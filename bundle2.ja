(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alt/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.alt = alt;
};
var altArray = new Alt(function () {
    return Prelude.functorArray;
}, Prelude.append(Prelude.semigroupArray));
var alt = function (dict) {
    return dict.alt;
};
var $less$bar$greater = function (dictAlt) {
    return alt(dictAlt);
};
module.exports = {
    Alt: Alt, 
    "<|>": $less$bar$greater, 
    alt: alt, 
    altArray: altArray
};

},{"Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alternative/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Plus = require("Control.Plus");
var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
    this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
};
var alternativeArray = new Alternative(function () {
    return Control_Plus.plusArray;
}, function () {
    return Prelude.applicativeArray;
});
module.exports = {
    Alternative: Alternative, 
    alternativeArray: alternativeArray
};

},{"Control.Plus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Plus/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Apply/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var $less$times = function (dictApply) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
        };
    };
};
var $times$greater = function (dictApply) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
        };
    };
};
var lift5 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
var lift4 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift3 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift2 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b);
            };
        };
    };
};
module.exports = {
    lift5: lift5, 
    lift4: lift4, 
    lift3: lift3, 
    lift2: lift2, 
    "*>": $times$greater, 
    "<*": $less$times
};

},{"Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Biapplicative/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Biapply = require("Control.Biapply");
var Biapplicative = function (__superclass_Control$dotBiapply$dotBiapply_0, bipure) {
    this["__superclass_Control.Biapply.Biapply_0"] = __superclass_Control$dotBiapply$dotBiapply_0;
    this.bipure = bipure;
};
var bipure = function (dict) {
    return dict.bipure;
};
module.exports = {
    Biapplicative: Biapplicative, 
    bipure: bipure
};

},{"Control.Biapply":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Biapply/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Biapply/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Data_Bifunctor = require("Data.Bifunctor");
var Biapply = function (__superclass_Data$dotBifunctor$dotBifunctor_0, biapply) {
    this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
    this.biapply = biapply;
};
var $less$less$dollar$greater$greater = Prelude.id(Prelude.categoryFn);
var biapply = function (dict) {
    return dict.biapply;
};
var $less$less$times$greater$greater = function (dictBiapply) {
    return biapply(dictBiapply);
};
var bilift2 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b);
                };
            };
        };
    };
};
var bilift3 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return $less$less$times$greater$greater(dictBiapply)($less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b))(c);
                    };
                };
            };
        };
    };
};
var $times$greater$greater = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(Prelude["const"](Prelude.id(Prelude.categoryFn))))(a))(b);
        };
    };
};
var $less$less$times = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"])(Prelude["const"]))(a))(b);
        };
    };
};
module.exports = {
    Biapply: Biapply, 
    bilift3: bilift3, 
    bilift2: bilift2, 
    "<<*": $less$less$times, 
    "*>>": $times$greater$greater, 
    "<<*>>": $less$less$times$greater$greater, 
    biapply: biapply, 
    "<<$>>": $less$less$dollar$greater$greater
};

},{"Data.Bifunctor":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bifunctor/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
    this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad, 
    extract: extract
};

},{"Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Extend = function (__superclass_Prelude$dotFunctor_0, extend) {
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.extend = extend;
};
var extendFn = function (dictSemigroup) {
    return new Extend(function () {
        return Prelude.functorFn;
    }, function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Prelude["<>"](dictSemigroup)(w)(w$prime));
                });
            };
        };
    });
};
var extend = function (dict) {
    return dict.extend;
};
var $less$less$eq = function (dictExtend) {
    return extend(dictExtend);
};
var $eq$less$eq = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f($less$less$eq(dictExtend)(g)(w));
            };
        };
    };
};
var $eq$greater$eq = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g($less$less$eq(dictExtend)(f)(w));
            };
        };
    };
};
var $eq$greater$greater = function (dictExtend) {
    return function (w) {
        return function (f) {
            return $less$less$eq(dictExtend)(f)(w);
        };
    };
};
var duplicate = function (dictExtend) {
    return extend(dictExtend)(Prelude.id(Prelude.categoryFn));
};
module.exports = {
    Extend: Extend, 
    duplicate: duplicate, 
    "=<=": $eq$less$eq, 
    "=>=": $eq$greater$eq, 
    "=>>": $eq$greater$greater, 
    "<<=": $less$less$eq, 
    extend: extend, 
    extendFn: extendFn
};

},{"Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Lazy/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Lazy = function (defer) {
    this.defer = defer;
};
var defer = function (dict) {
    return dict.defer;
};
var fix = function (dictLazy) {
    return function (f) {
        return defer(dictLazy)(function (v) {
            return f(fix(dictLazy)(f));
        });
    };
};
module.exports = {
    Lazy: Lazy, 
    fix: fix, 
    defer: defer
};

},{"Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff.Console/foreign.js":[function(require,module,exports){
/* global exports, console */
"use strict";

// module Control.Monad.Eff.Console

exports.log = function (s) {
  return function () {
    console.log(s);
    return {};
  };
};

exports.error = function (s) {
  return function () {
    console.error(s);
    return {};
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff.Console/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var print = function (dictShow) {
    return function ($1) {
        return $foreign.log(Prelude.show(dictShow)($1));
    };
};
module.exports = {
    print: print, 
    error: $foreign.error, 
    log: $foreign.log
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff.Console/foreign.js","Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Control.Monad.Eff

exports.returnE = function (a) {
  return function () {
    return a;
  };
};

exports.bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.runPure = function (f) {
  return f();
};

exports.untilE = function (f) {
  return function () {
    while (!f());
    return {};
  };
};

exports.whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
      return {};
    };
  };
};

exports.forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(function () {
    return applyEff;
}, $foreign.bindE);
var applyEff = new Prelude.Apply(function () {
    return functorEff;
}, Prelude.ap(monadEff));
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, $foreign.returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    functorEff: functorEff, 
    applyEff: applyEff, 
    applicativeEff: applicativeEff, 
    bindEff: bindEff, 
    monadEff: monadEff, 
    foreachE: $foreign.foreachE, 
    forE: $foreign.forE, 
    whileE: $foreign.whileE, 
    untilE: $foreign.untilE, 
    runPure: $foreign.runPure
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/foreign.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.ST/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Control.Monad.ST

exports.newSTRef = function (val) {
  return function () {
    return { value: val };
  };
};

exports.readSTRef = function (ref) {
  return function () {
    return ref.value;
  };
};

exports.modifySTRef = function (ref) {
  return function (f) {
    return function () {
      /* jshint boss: true */
      return ref.value = f(ref.value);
    };
  };
};

exports.writeSTRef = function (ref) {
  return function (a) {
    return function () {
      /* jshint boss: true */
      return ref.value = a;
    };
  };
};

exports.runST = function (f) {
  return f;
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.ST/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var pureST = function (st) {
    return Control_Monad_Eff.runPure($foreign.runST(st));
};
module.exports = {
    pureST: pureST, 
    runST: $foreign.runST, 
    writeSTRef: $foreign.writeSTRef, 
    modifySTRef: $foreign.modifySTRef, 
    readSTRef: $foreign.readSTRef, 
    newSTRef: $foreign.newSTRef
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.ST/foreign.js","Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.MonadPlus/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Alternative = require("Control.Alternative");
var Control_Plus = require("Control.Plus");
var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
    this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
};
var monadPlusArray = new MonadPlus(function () {
    return Control_Alternative.alternativeArray;
}, function () {
    return Prelude.monadArray;
});
var guard = function (dictMonadPlus) {
    return function (v) {
        if (v) {
            return Prelude["return"]((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
        };
        if (!v) {
            return Control_Plus.empty((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
        };
        throw new Error("Failed pattern match at Control.MonadPlus line 36, column 1 - line 37, column 1: " + [ v.constructor.name ]);
    };
};
module.exports = {
    MonadPlus: MonadPlus, 
    guard: guard, 
    monadPlusArray: monadPlusArray
};

},{"Control.Alternative":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alternative/index.js","Control.Plus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Plus/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Plus/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};
var plusArray = new Plus(function () {
    return Control_Alt.altArray;
}, [  ]);
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty, 
    plusArray: plusArray
};

},{"Control.Alt":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alt/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array.ST/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Array.ST

exports.runSTArray = function (f) {
  return f;
};

exports.emptySTArray = function () {
  return [];
};

exports.peekSTArrayImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return function () {
          return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
        };
      };
    };
  };
};

exports.pokeSTArray = function (xs) {
  return function (i) {
    return function (a) {
      return function () {
        var ret = i >= 0 && i < xs.length;
        if (ret) xs[i] = a;
        return ret;
      };
    };
  };
};

exports.pushAllSTArray = function (xs) {
  return function (as) {
    return function () {
      return xs.push.apply(xs, as);
    };
  };
};

exports.spliceSTArray = function (xs) {
  return function (i) {
    return function (howMany) {
      return function (bs) {
        return function () {
          return xs.splice.apply(xs, [i, howMany].concat(bs));
        };
      };
    };
  };
};

exports.copyImpl = function (xs) {
  return function () {
    return xs.slice();
  };
};

exports.toAssocArray = function (xs) {
  return function () {
    var n = xs.length;
    var as = new Array(n);
    for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
    return as;
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array.ST/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_ST = require("Control.Monad.ST");
var Data_Maybe = require("Data.Maybe");
var thaw = $foreign.copyImpl;
var pushSTArray = function (arr) {
    return function (a) {
        return $foreign.pushAllSTArray(arr)([ a ]);
    };
};
var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var freeze = $foreign.copyImpl;
module.exports = {
    thaw: thaw, 
    freeze: freeze, 
    pushSTArray: pushSTArray, 
    peekSTArray: peekSTArray, 
    toAssocArray: $foreign.toAssocArray, 
    spliceSTArray: $foreign.spliceSTArray, 
    pushAllSTArray: $foreign.pushAllSTArray, 
    pokeSTArray: $foreign.pokeSTArray, 
    emptySTArray: $foreign.emptySTArray, 
    runSTArray: $foreign.runSTArray
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array.ST/foreign.js","Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js","Control.Monad.ST":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.ST/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Array

//------------------------------------------------------------------------------
// Array creation --------------------------------------------------------------
//------------------------------------------------------------------------------

exports.range = function (start) {
  return function (end) {
    var step = start > end ? -1 : 1;
    var result = [];
    for (var i = start, n = 0; i !== end; i += step) {
      result[n++] = i;
    }
    result[n] = i;
    return result;
  };
};

exports.replicate = function (n) {
  return function (v) {
    if (n < 1) return [];
    var r = new Array(n);
    for (var i = 0; i < n; i++) r[i] = v;
    return r;
  };
};

//------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.length = function (xs) {
  return xs.length;
};

//------------------------------------------------------------------------------
// Extending arrays ------------------------------------------------------------
//------------------------------------------------------------------------------

exports.cons = function (e) {
  return function (l) {
    return [e].concat(l);
  };
};

exports.snoc = function (l) {
  return function (e) {
    var l1 = l.slice();
    l1.push(e);
    return l1;
  };
};

//------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------

exports["uncons'"] = function (empty) {
  return function (next) {
    return function (xs) {
      return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
    };
  };
};

//------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------

exports.indexImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
      };
    };
  };
};

exports.findIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports.findLastIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = xs.length - 1; i >= 0; i--) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports._insertAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i > l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 0, a);
          return just(l1);
        };
      };
    };
  };
};

exports._deleteAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (l) {
        if (i < 0 || i >= l.length) return nothing;
        var l1 = l.slice();
        l1.splice(i, 1);
        return just(l1);
      };
    };
  };
};

exports._updateAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1[i] = a;
          return just(l1);
        };
      };
    };
  };
};

//------------------------------------------------------------------------------
// Transformations -------------------------------------------------------------
//------------------------------------------------------------------------------

exports.reverse = function (l) {
  return l.slice().reverse();
};

exports.concat = function (xss) {
  var result = [];
  for (var i = 0, l = xss.length; i < l; i++) {
    var xs = xss[i];
    for (var j = 0, m = xs.length; j < m; j++) {
      result.push(xs[j]);
    }
  }
  return result;
};

exports.filter = function (f) {
  return function (xs) {
    return xs.filter(f);
  };
};

exports.partition = function (f) {
  return function (xs) {
    var yes = [];
    var no  = [];
    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x))
        yes.push(x);
      else
        no.push(x);
    }
    return { yes: yes, no: no };
  };
};

//------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.sortImpl = function (f) {
  return function (l) {
    /* jshint maxparams: 2 */
    return l.slice().sort(function (x, y) {
      return f(x)(y);
    });
  };
};

//------------------------------------------------------------------------------
// Subarrays -------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.slice = function (s) {
  return function (e) {
    return function (l) {
      return l.slice(s, e);
    };
  };
};

exports.drop = function (n) {
  return function (l) {
    return n < 1 ? l : l.slice(n);
  };
};

//------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.zipWith = function (f) {
  return function (xs) {
    return function (ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }
      return result;
    };
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Lazy = require("Control.Lazy");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Data_Foldable = require("Data.Foldable");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var $colon = $foreign.cons;
var $dot$dot = $foreign.range;
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unzip = $foreign["uncons'"](function (v) {
    return new Data_Tuple.Tuple([  ], [  ]);
})(function (v) {
    return function (ts) {
        var $36 = unzip(ts);
        return new Data_Tuple.Tuple($colon(v.value0)($36.value0), $colon(v.value1)($36.value1));
    };
});
var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (xs) {
        return new Data_Maybe.Just({
            head: x, 
            tail: xs
        });
    };
});
var take = $foreign.slice(0);
var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
    return function (xs) {
        return new Data_Maybe.Just(xs);
    };
});
var span = function (p) {
    var go = function (__copy_acc) {
        return function (__copy_xs) {
            var acc = __copy_acc;
            var xs = __copy_xs;
            tco: while (true) {
                var $42 = uncons(xs);
                if ($42 instanceof Data_Maybe.Just && p($42.value0.head)) {
                    var __tco_acc = $colon($42.value0.head)(acc);
                    acc = __tco_acc;
                    xs = $42.value0.tail;
                    continue tco;
                };
                return {
                    init: $foreign.reverse(acc), 
                    rest: xs
                };
            };
        };
    };
    return go([  ]);
};
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var $46 = comp(x)(y);
                if ($46 instanceof Prelude.GT) {
                    return 1;
                };
                if ($46 instanceof Prelude.EQ) {
                    return 0;
                };
                if ($46 instanceof Prelude.LT) {
                    return -1;
                };
                throw new Error("Failed pattern match at Data.Array line 417, column 15 - line 422, column 1: " + [ $46.constructor.name ]);
            };
        };
        return $foreign.sortImpl(comp$prime)(xs);
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Prelude.compare(dictOrd))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var replicateM = function (dictMonad) {
    return function (n) {
        return function (m) {
            if (n < 1) {
                return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
            };
            if (Prelude.otherwise) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictMonad["__superclass_Prelude.Applicative_0"]())($foreign.replicate(n)(m));
            };
            throw new Error("Failed pattern match at Data.Array line 138, column 1 - line 145, column 1: " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};
var $$null = function (xs) {
    return $foreign.length(xs) === 0;
};
var nubBy = function (eq) {
    return function (xs) {
        var $49 = uncons(xs);
        if ($49 instanceof Data_Maybe.Just) {
            return $colon($49.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                return !eq($49.value0.head)(y);
            })($49.value0.tail)));
        };
        if ($49 instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        throw new Error("Failed pattern match at Data.Array line 500, column 15 - line 507, column 1: " + [ $49.constructor.name ]);
    };
};
var nub = function (dictEq) {
    return nubBy(Prelude.eq(dictEq));
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())($colon)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())([  ]));
        };
    };
};
var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var init = function (xs) {
    if ($$null(xs)) {
        return Data_Maybe.Nothing.value;
    };
    if (Prelude.otherwise) {
        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1)(xs));
    };
    throw new Error("Failed pattern match at Data.Array line 228, column 1 - line 245, column 1: " + [ xs.constructor.name ]);
};
var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var $bang$bang = index;
var last = function (xs) {
    return $bang$bang(xs)($foreign.length(xs) - 1);
};
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                return updateAt(i)(f(x))(xs);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
        };
    };
};
var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (v) {
        return new Data_Maybe.Just(x);
    };
});
var groupBy = function (op) {
    var go = function (__copy_acc) {
        return function (__copy_xs) {
            var acc = __copy_acc;
            var xs = __copy_xs;
            tco: while (true) {
                var $54 = uncons(xs);
                if ($54 instanceof Data_Maybe.Just) {
                    var sp = span(op($54.value0.head))($54.value0.tail);
                    var __tco_acc = $colon($colon($54.value0.head)(sp.init))(acc);
                    acc = __tco_acc;
                    xs = sp.rest;
                    continue tco;
                };
                if ($54 instanceof Data_Maybe.Nothing) {
                    return $foreign.reverse(acc);
                };
                throw new Error("Failed pattern match at Data.Array line 488, column 15 - line 494, column 1: " + [ $54.constructor.name ]);
            };
        };
    };
    return go([  ]);
};
var group = function (dictEq) {
    return function (xs) {
        return groupBy(Prelude.eq(dictEq))(xs);
    };
};
var group$prime = function (dictOrd) {
    return function ($68) {
        return group(dictOrd["__superclass_Prelude.Eq_0"]())(sort(dictOrd)($68));
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return $foreign["uncons'"](function (v) {
                return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
            })(function (b) {
                return function (bs) {
                    return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(a)(b))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(bs);
                    });
                };
            });
        };
    };
};
var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var insertBy = function (cmp) {
    return function (x) {
        return function (ys) {
            var i = Data_Maybe.maybe(0)(function (v) {
                return v + 1 | 0;
            })(findLastIndex(function (y) {
                return Prelude["=="](Prelude.eqOrdering)(cmp(x)(y))(Prelude.GT.value);
            })(ys));
            return Data_Maybe_Unsafe.fromJust(insertAt(i)(x)(ys));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Prelude.compare(dictOrd));
};
var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return $foreign.filter(function (x) {
                return Data_Maybe.isJust(findIndex(eq(x))(ys));
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Prelude.eq(dictEq));
};
var filterM = function (dictMonad) {
    return function (p) {
        return $foreign["uncons'"](function (v) {
            return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
        })(function (x) {
            return function (xs) {
                return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(p(x))(function (v) {
                    return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(filterM(dictMonad)(p)(xs))(function (v1) {
                        return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                            if (v) {
                                return $colon(x)(v1);
                            };
                            if (!v) {
                                return v1;
                            };
                            throw new Error("Failed pattern match at Data.Array line 390, column 5 - line 396, column 1: " + [ v.constructor.name ]);
                        })());
                    });
                });
            };
        });
    };
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Prelude["=="](dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Prelude["=="](dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};
var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2.length === 0) {
                return [  ];
            };
            return Data_Maybe.maybe(v2)(function (i) {
                return Data_Maybe_Unsafe.fromJust(deleteAt(i)(v2));
            })(findIndex(v(v1))(v2));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["++"](Prelude.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Prelude["=="](dictEq));
};
var $$delete = function (dictEq) {
    return deleteBy(Prelude.eq(dictEq));
};
var $bslash$bslash = function (dictEq) {
    return function (xs) {
        return function (ys) {
            if ($$null(xs)) {
                return [  ];
            };
            if (Prelude.otherwise) {
                return $foreign["uncons'"](Prelude["const"](xs))(function (y) {
                    return function (ys2) {
                        return $bslash$bslash(dictEq)($$delete(dictEq)(y)(xs))(ys2);
                    };
                })(ys);
            };
            throw new Error("Failed pattern match at Data.Array line 532, column 1 - line 536, column 1: " + [ xs.constructor.name, ys.constructor.name ]);
        };
    };
};
var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
var mapMaybe = function (f) {
    return concatMap(function ($69) {
        return Data_Maybe.maybe([  ])(singleton)(f($69));
    });
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var alterAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                var $66 = f(x);
                if ($66 instanceof Data_Maybe.Nothing) {
                    return deleteAt(i)(xs);
                };
                if ($66 instanceof Data_Maybe.Just) {
                    return updateAt(i)($66.value0)(xs);
                };
                throw new Error("Failed pattern match at Data.Array line 350, column 10 - line 359, column 1: " + [ $66.constructor.name ]);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
        };
    };
};
module.exports = {
    foldM: foldM, 
    unzip: unzip, 
    zip: zip, 
    zipWithA: zipWithA, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    takeWhile: takeWhile, 
    take: take, 
    sortBy: sortBy, 
    sort: sort, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filterM: filterM, 
    concatMap: concatMap, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    ":": $colon, 
    "null": $$null, 
    many: many, 
    some: some, 
    replicateM: replicateM, 
    "..": $dot$dot, 
    singleton: singleton, 
    zipWith: $foreign.zipWith, 
    drop: $foreign.drop, 
    slice: $foreign.slice, 
    partition: $foreign.partition, 
    filter: $foreign.filter, 
    concat: $foreign.concat, 
    reverse: $foreign.reverse, 
    snoc: $foreign.snoc, 
    cons: $foreign.cons, 
    length: $foreign.length, 
    replicate: $foreign.replicate, 
    range: $foreign.range
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array/foreign.js","Control.Alt":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alt/index.js","Control.Alternative":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alternative/index.js","Control.Lazy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Lazy/index.js","Control.MonadPlus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.MonadPlus/index.js","Control.Plus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Plus/index.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.Functor.Invariant":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Maybe.Unsafe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.Unsafe/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Data.Traversable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/index.js","Data.Tuple":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Tuple/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bifoldable/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Data_Monoid = require("Data.Monoid");
var Data_Monoid_Disj = require("Data.Monoid.Disj");
var Data_Monoid_Conj = require("Data.Monoid.Conj");
var Data_Monoid_Endo = require("Data.Monoid.Endo");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
    this.bifoldMap = bifoldMap;
    this.bifoldl = bifoldl;
    this.bifoldr = bifoldr;
};
var bifoldr = function (dict) {
    return dict.bifoldr;
};
var bitraverse_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)(function ($18) {
                    return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($18));
                })(function ($19) {
                    return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(g($19));
                })(Prelude.pure(dictApplicative)(Prelude.unit));
            };
        };
    };
};
var bifor_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
var bisequence_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return bitraverse_(dictBifoldable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
    };
};
var bifoldl = function (dict) {
    return dict.bifoldl;
};
var bifoldMapDefaultR = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return function (p) {
                    return bifoldr(dictBifoldable)(function ($20) {
                        return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f($20));
                    })(function ($21) {
                        return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(g($21));
                    })(Data_Monoid.mempty(dictMonoid))(p);
                };
            };
        };
    };
};
var bifoldMapDefaultL = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return function (p) {
                    return bifoldl(dictBifoldable)(function (m) {
                        return function (a) {
                            return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(f(a));
                        };
                    })(function (m) {
                        return function (b) {
                            return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(g(b));
                        };
                    })(Data_Monoid.mempty(dictMonoid))(p);
                };
            };
        };
    };
};
var bifoldMap = function (dict) {
    return dict.bifoldMap;
};
var bifoldlDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($22) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(f)($22)));
                    })(function ($23) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(g)($23)));
                    })(p)))(z);
                };
            };
        };
    };
};
var bifoldrDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Monoid_Endo.runEndo(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo)(function ($24) {
                        return Data_Monoid_Endo.Endo(f($24));
                    })(function ($25) {
                        return Data_Monoid_Endo.Endo(g($25));
                    })(p))(z);
                };
            };
        };
    };
};
var bifold = function (dictBifoldable) {
    return function (dictMonoid) {
        return bifoldMap(dictBifoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
    };
};
var biany = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                return function ($26) {
                    return Data_Monoid_Disj.runDisj(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($27) {
                        return Data_Monoid_Disj.Disj(p($27));
                    })(function ($28) {
                        return Data_Monoid_Disj.Disj(q($28));
                    })($26));
                };
            };
        };
    };
};
var biall = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                return function ($29) {
                    return Data_Monoid_Conj.runConj(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($30) {
                        return Data_Monoid_Conj.Conj(p($30));
                    })(function ($31) {
                        return Data_Monoid_Conj.Conj(q($31));
                    })($29));
                };
            };
        };
    };
};
module.exports = {
    Bifoldable: Bifoldable, 
    biall: biall, 
    biany: biany, 
    bisequence_: bisequence_, 
    bifor_: bifor_, 
    bitraverse_: bitraverse_, 
    bifold: bifold, 
    bifoldMapDefaultL: bifoldMapDefaultL, 
    bifoldMapDefaultR: bifoldMapDefaultR, 
    bifoldlDefault: bifoldlDefault, 
    bifoldrDefault: bifoldrDefault, 
    bifoldMap: bifoldMap, 
    bifoldl: bifoldl, 
    bifoldr: bifoldr
};

},{"Control.Apply":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Apply/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Data.Monoid.Conj":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Conj/index.js","Data.Monoid.Disj":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Disj/index.js","Data.Monoid.Dual":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Dual/index.js","Data.Monoid.Endo":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Endo/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bifunctor/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Bifunctor = function (bimap) {
    this.bimap = bimap;
};
var bimap = function (dict) {
    return dict.bimap;
};
var lmap = function (dictBifunctor) {
    return function (f) {
        return bimap(dictBifunctor)(f)(Prelude.id(Prelude.categoryFn));
    };
};
var rmap = function (dictBifunctor) {
    return bimap(dictBifunctor)(Prelude.id(Prelude.categoryFn));
};
module.exports = {
    Bifunctor: Bifunctor, 
    rmap: rmap, 
    lmap: lmap, 
    bimap: bimap
};

},{"Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bitraversable/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Bitraversable = function (__superclass_Data$dotBifoldable$dotBifoldable_1, __superclass_Data$dotBifunctor$dotBifunctor_0, bisequence, bitraverse) {
    this["__superclass_Data.Bifoldable.Bifoldable_1"] = __superclass_Data$dotBifoldable$dotBifoldable_1;
    this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
    this.bisequence = bisequence;
    this.bitraverse = bitraverse;
};
var bitraverse = function (dict) {
    return dict.bitraverse;
};
var bisequenceDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return bitraverse(dictBitraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn))(t);
        };
    };
};
var bisequence = function (dict) {
    return dict.bisequence;
};
var bitraverseDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return function (t) {
                    return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g)(t));
                };
            };
        };
    };
};
var bifor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
module.exports = {
    Bitraversable: Bitraversable, 
    bifor: bifor, 
    bisequenceDefault: bisequenceDefault, 
    bitraverseDefault: bitraverseDefault, 
    bisequence: bisequence, 
    bitraverse: bitraverse
};

},{"Data.Bifoldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bifoldable/index.js","Data.Bifunctor":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bifunctor/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Char/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Char

exports.toString = function (c) {
  return c;
};

exports.toCharCode = function (c) {
  return c.charCodeAt(0);
};

exports.fromCharCode = function (c) {
  return String.fromCharCode(c);
};

exports.toLower = function (c) {
  return c.toLowerCase();
};

exports.toUpper = function (c) {
  return c.toUpperCase();
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Char/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
module.exports = {
    toUpper: $foreign.toUpper, 
    toLower: $foreign.toLower, 
    toCharCode: $foreign.toCharCode, 
    fromCharCode: $foreign.fromCharCode, 
    toString: $foreign.toString
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Char/foreign.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Either/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Extend = require("Control.Extend");
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Bitraversable = require("Data.Bitraversable");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (dictShow) {
    return function (dictShow1) {
        return new Prelude.Show(function (v) {
            if (v instanceof Left) {
                return "Left (" + (Prelude.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Right) {
                return "Right (" + (Prelude.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Either line 175, column 3 - line 176, column 3: " + [ v.constructor.name ]);
        });
    };
};
var functorEither = new Prelude.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Left) {
            return new Left(v1.value0);
        };
        if (v1 instanceof Right) {
            return new Right(v(v1.value0));
        };
        throw new Error("Failed pattern match at Data.Either line 53, column 3 - line 54, column 3: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Left) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Right) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Either line 206, column 3 - line 207, column 3: " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Either line 204, column 3 - line 205, column 3: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Either line 202, column 3 - line 203, column 3: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableEither = new Data_Traversable.Traversable(function () {
    return foldableEither;
}, function () {
    return functorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Prelude.pure(dictApplicative)(new Left(v.value0));
        };
        if (v instanceof Right) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either line 220, column 3 - line 221, column 3: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Left) {
                return Prelude.pure(dictApplicative)(new Left(v1.value0));
            };
            if (v1 instanceof Right) {
                return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Either line 218, column 3 - line 219, column 3: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Left) {
            return new Left(v1.value0);
        };
        return new Right(v(v1));
    };
});
var eqEither = function (dictEq) {
    return function (dictEq1) {
        return new Prelude.Eq(function (v) {
            return function (v1) {
                if (v instanceof Left && v1 instanceof Left) {
                    return Prelude["=="](dictEq)(v.value0)(v1.value0);
                };
                if (v instanceof Right && v1 instanceof Right) {
                    return Prelude["=="](dictEq1)(v.value0)(v1.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (dictOrd) {
    return function (dictOrd1) {
        return new Prelude.Ord(function () {
            return eqEither(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
        }, function (v) {
            return function (v1) {
                if (v instanceof Left && v1 instanceof Left) {
                    return Prelude.compare(dictOrd)(v.value0)(v1.value0);
                };
                if (v instanceof Right && v1 instanceof Right) {
                    return Prelude.compare(dictOrd1)(v.value0)(v1.value0);
                };
                if (v instanceof Left) {
                    return Prelude.LT.value;
                };
                if (v1 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match at Data.Either line 192, column 3 - line 193, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        });
    };
};
var either = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return v(v2.value0);
            };
            if (v2 instanceof Right) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Either line 29, column 1 - line 30, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var boundedEither = function (dictBounded) {
    return function (dictBounded1) {
        return new Prelude.Bounded(new Left(Prelude.bottom(dictBounded)), new Right(Prelude.top(dictBounded1)));
    };
};
var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return new Left(v(v2.value0));
            };
            if (v2 instanceof Right) {
                return new Right(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Data.Either line 57, column 3 - line 58, column 3: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either line 214, column 3 - line 215, column 3: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(z)(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(z)(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either line 212, column 3 - line 213, column 3: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0)(z);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0)(z);
                };
                throw new Error("Failed pattern match at Data.Either line 210, column 3 - line 211, column 3: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableEither;
}, function () {
    return bifunctorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(v.value0);
        };
        if (v instanceof Right) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either line 226, column 3 - line 227, column 3: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(v(v2.value0));
                };
                if (v2 instanceof Right) {
                    return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v1(v2.value0));
                };
                throw new Error("Failed pattern match at Data.Either line 224, column 3 - line 225, column 3: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var applyEither = new Prelude.Apply(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return new Left(v.value0);
        };
        if (v instanceof Right) {
            return Prelude["<$>"](functorEither)(v.value0)(v1);
        };
        throw new Error("Failed pattern match at Data.Either line 93, column 3 - line 94, column 3: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindEither = new Prelude.Bind(function () {
    return applyEither;
}, either(function (e) {
    return function (v) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}));
var semigroupEither = function (dictSemigroup) {
    return new Prelude.Semigroup(function (x) {
        return function (y) {
            return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.append(dictSemigroup))(x))(y);
        };
    });
};
var semiringEither = function (dictSemiring) {
    return new Prelude.Semiring(function (x) {
        return function (y) {
            return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.add(dictSemiring))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.mul(dictSemiring))(x))(y);
        };
    }, new Right(Prelude.one(dictSemiring)), new Right(Prelude.zero(dictSemiring)));
};
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return v1;
        };
        return v;
    };
});
module.exports = {
    Left: Left, 
    Right: Right, 
    isRight: isRight, 
    isLeft: isLeft, 
    either: either, 
    functorEither: functorEither, 
    bifunctorEither: bifunctorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    extendEither: extendEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    ordEither: ordEither, 
    boundedEither: boundedEither, 
    foldableEither: foldableEither, 
    bifoldableEither: bifoldableEither, 
    traversableEither: traversableEither, 
    bitraversableEither: bitraversableEither, 
    semiringEither: semiringEither, 
    semigroupEither: semigroupEither
};

},{"Control.Alt":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alt/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Data.Bifoldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bifoldable/index.js","Data.Bifunctor":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bifunctor/index.js","Data.Bitraversable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bitraversable/index.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Data.Traversable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Foldable

exports.foldrArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };
};

exports.foldlArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_First = require("Data.Maybe.First");
var Data_Maybe_Last = require("Data.Maybe.Last");
var Data_Monoid = require("Data.Monoid");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Conj = require("Data.Monoid.Conj");
var Data_Monoid_Disj = require("Data.Monoid.Disj");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_Endo = require("Data.Monoid.Endo");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
var foldr = function (dict) {
    return dict.foldr;
};
var traverse_ = function (dictApplicative) {
    return function (dictFoldable) {
        return function (f) {
            return foldr(dictFoldable)(function ($161) {
                return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($161));
            })(Prelude.pure(dictApplicative)(Prelude.unit));
        };
    };
};
var for_ = function (dictApplicative) {
    return function (dictFoldable) {
        return Prelude.flip(traverse_(dictApplicative)(dictFoldable));
    };
};
var sequence_ = function (dictApplicative) {
    return function (dictFoldable) {
        return traverse_(dictApplicative)(dictFoldable)(Prelude.id(Prelude.categoryFn));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var intercalate = function (dictFoldable) {
    return function (dictMonoid) {
        return function (sep) {
            return function (xs) {
                var go = function (v) {
                    return function (x) {
                        if (v.init) {
                            return {
                                init: false, 
                                acc: x
                            };
                        };
                        return {
                            init: false, 
                            acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                        };
                    };
                };
                return (foldl(dictFoldable)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(dictMonoid)
                })(xs)).acc;
            };
        };
    };
};
var maximumBy = function (dictFoldable) {
    return function (cmp) {
        var max$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $87 = cmp(v.value0)(v1);
                        if ($87 instanceof Prelude.GT) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable line 246, column 3 - line 247, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
    };
};
var maximum = function (dictOrd) {
    return function (dictFoldable) {
        return maximumBy(dictFoldable)(Prelude.compare(dictOrd));
    };
};
var mconcat = function (dictFoldable) {
    return function (dictMonoid) {
        return foldl(dictFoldable)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(dictMonoid));
    };
};
var minimumBy = function (dictFoldable) {
    return function (cmp) {
        var min$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $91 = cmp(v.value0)(v1);
                        if ($91 instanceof Prelude.LT) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable line 261, column 3 - line 262, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
    };
};
var minimum = function (dictOrd) {
    return function (dictFoldable) {
        return minimumBy(dictFoldable)(Prelude.compare(dictOrd));
    };
};
var product = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Prelude["*"](dictSemiring))(Prelude.one(dictSemiring));
    };
};
var sum = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Prelude["+"](dictSemiring))(Prelude.zero(dictSemiring));
    };
};
var foldableMultiplicative = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable line 108, column 3 - line 109, column 3: " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable line 106, column 3 - line 107, column 3: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Foldable line 104, column 3 - line 105, column 3: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var foldableDual = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableDisj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableConj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableAdditive = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldMapDefaultR = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (xs) {
                return foldr(dictFoldable)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(dictMonoid))(xs);
            };
        };
    };
};
var foldableArray = new Foldable(function (dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
}, $foreign.foldlArray, $foreign.foldrArray);
var foldMapDefaultL = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (xs) {
                return foldl(dictFoldable)(function (acc) {
                    return function (x) {
                        return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(dictMonoid))(xs);
            };
        };
    };
};
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldableLast = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldlDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($162) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(c)($162)));
                })(xs)))(u);
            };
        };
    };
};
var foldrDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Monoid_Endo.runEndo(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($163) {
                    return Data_Monoid_Endo.Endo(c($163));
                })(xs))(u);
            };
        };
    };
};
var fold = function (dictFoldable) {
    return function (dictMonoid) {
        return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
    };
};
var find = function (dictFoldable) {
    return function (p) {
        return foldl(dictFoldable)(function (r) {
            return function (x) {
                var $160 = p(x);
                if ($160) {
                    return new Data_Maybe.Just(x);
                };
                if (!$160) {
                    return r;
                };
                throw new Error("Failed pattern match at Data.Foldable line 234, column 25 - line 234, column 50: " + [ $160.constructor.name ]);
            };
        })(Data_Maybe.Nothing.value);
    };
};
var any = function (dictFoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function ($164) {
                return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($165) {
                    return Data_Monoid_Disj.Disj(p($165));
                })($164));
            };
        };
    };
};
var elem = function (dictFoldable) {
    return function (dictEq) {
        return function ($166) {
            return any(dictFoldable)(Prelude.booleanAlgebraBoolean)(Prelude["=="](dictEq)($166));
        };
    };
};
var notElem = function (dictFoldable) {
    return function (dictEq) {
        return function (x) {
            return function ($167) {
                return !elem(dictFoldable)(dictEq)(x)($167);
            };
        };
    };
};
var or = function (dictFoldable) {
    return function (dictBooleanAlgebra) {
        return any(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
    };
};
var all = function (dictFoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function ($168) {
                return Data_Monoid_Conj.runConj(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($169) {
                    return Data_Monoid_Conj.Conj(p($169));
                })($168));
            };
        };
    };
};
var and = function (dictFoldable) {
    return function (dictBooleanAlgebra) {
        return all(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
    };
};
module.exports = {
    Foldable: Foldable, 
    minimumBy: minimumBy, 
    minimum: minimum, 
    maximumBy: maximumBy, 
    maximum: maximum, 
    find: find, 
    notElem: notElem, 
    elem: elem, 
    product: product, 
    sum: sum, 
    all: all, 
    any: any, 
    or: or, 
    and: and, 
    intercalate: intercalate, 
    mconcat: mconcat, 
    sequence_: sequence_, 
    for_: for_, 
    traverse_: traverse_, 
    fold: fold, 
    foldMapDefaultR: foldMapDefaultR, 
    foldMapDefaultL: foldMapDefaultL, 
    foldlDefault: foldlDefault, 
    foldrDefault: foldrDefault, 
    foldMap: foldMap, 
    foldl: foldl, 
    foldr: foldr, 
    foldableArray: foldableArray, 
    foldableMaybe: foldableMaybe, 
    foldableFirst: foldableFirst, 
    foldableLast: foldableLast, 
    foldableAdditive: foldableAdditive, 
    foldableDual: foldableDual, 
    foldableDisj: foldableDisj, 
    foldableConj: foldableConj, 
    foldableMultiplicative: foldableMultiplicative
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/foreign.js","Control.Apply":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Apply/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Maybe.First":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.First/index.js","Data.Maybe.Last":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.Last/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Data.Monoid.Additive":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Additive/index.js","Data.Monoid.Conj":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Conj/index.js","Data.Monoid.Disj":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Disj/index.js","Data.Monoid.Dual":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Dual/index.js","Data.Monoid.Endo":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Endo/index.js","Data.Monoid.Multiplicative":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Multiplicative/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foreign/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Foreign

// jshint maxparams: 3
exports.parseJSONImpl = function (left, right, str) {
  try {
    return right(JSON.parse(str));
  } catch (e) {
    return left(e.toString());
  }
};

// jshint maxparams: 1
exports.toForeign = function (value) {
  return value;
};

exports.unsafeFromForeign = function (value) {
  return value;
};

exports.typeOf = function (value) {
  return typeof value;
};

exports.tagOf = function (value) {
  return Object.prototype.toString.call(value).slice(8, -1);
};

exports.isNull = function (value) {
  return value === null;
};

exports.isUndefined = function (value) {
  return value === undefined;
};

exports.isArray = Array.isArray || function (value) {
  return Object.prototype.toString.call(value) === "[object Array]";
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foreign/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Data_Function = require("Data.Function");
var Data_Int_1 = require("Data.Int");
var Data_Int_1 = require("Data.Int");
var Data_String = require("Data.String");
var TypeMismatch = (function () {
    function TypeMismatch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeMismatch.create = function (value0) {
        return function (value1) {
            return new TypeMismatch(value0, value1);
        };
    };
    return TypeMismatch;
})();
var ErrorAtIndex = (function () {
    function ErrorAtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtIndex.create = function (value0) {
        return function (value1) {
            return new ErrorAtIndex(value0, value1);
        };
    };
    return ErrorAtIndex;
})();
var ErrorAtProperty = (function () {
    function ErrorAtProperty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtProperty.create = function (value0) {
        return function (value1) {
            return new ErrorAtProperty(value0, value1);
        };
    };
    return ErrorAtProperty;
})();
var JSONError = (function () {
    function JSONError(value0) {
        this.value0 = value0;
    };
    JSONError.create = function (value0) {
        return new JSONError(value0);
    };
    return JSONError;
})();
var unsafeReadTagged = function (tag) {
    return function (value) {
        if ($foreign.tagOf(value) === tag) {
            return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
        };
        return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
    };
};
var showForeignError = new Prelude.Show(function (v) {
    if (v instanceof TypeMismatch) {
        return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
    };
    if (v instanceof ErrorAtIndex) {
        return "Error at array index " + (Prelude.show(Prelude.showInt)(v.value0) + (": " + Prelude.show(showForeignError)(v.value1)));
    };
    if (v instanceof ErrorAtProperty) {
        return "Error at property " + (Prelude.show(Prelude.showString)(v.value0) + (": " + Prelude.show(showForeignError)(v.value1)));
    };
    if (v instanceof JSONError) {
        return "JSON error: " + v.value0;
    };
    throw new Error("Failed pattern match at Data.Foreign line 54, column 3 - line 55, column 3: " + [ v.constructor.name ]);
});
var readString = unsafeReadTagged("String");
var readNumber = unsafeReadTagged("Number");
var readInt = function (value) {
    var error = Data_Either.Left.create(new TypeMismatch("Int", $foreign.tagOf(value)));
    var fromNumber = function ($30) {
        return Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither))(Data_Int_1.fromNumber($30));
    };
    return Data_Either.either(Prelude["const"](error))(fromNumber)(readNumber(value));
};
var readChar = function (value) {
    var error = Data_Either.Left.create(new TypeMismatch("Char", $foreign.tagOf(value)));
    var fromString = function ($31) {
        return Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither))(Data_String.toChar($31));
    };
    return Data_Either.either(Prelude["const"](error))(fromString)(readString(value));
};
var readBoolean = unsafeReadTagged("Boolean");
var readArray = function (value) {
    if ($foreign.isArray(value)) {
        return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
    };
    return new Data_Either.Left(new TypeMismatch("array", $foreign.tagOf(value)));
};
var parseJSON = function (json) {
    return $foreign.parseJSONImpl(function ($32) {
        return Data_Either.Left.create(JSONError.create($32));
    }, Data_Either.Right.create, json);
};
var eqForeignError = new Prelude.Eq(function (v) {
    return function (v1) {
        if (v instanceof TypeMismatch && v1 instanceof TypeMismatch) {
            return v.value0 === v1.value0 && v.value1 === v1.value1;
        };
        if (v instanceof ErrorAtIndex && v1 instanceof ErrorAtIndex) {
            return v.value0 === v1.value0 && Prelude["=="](eqForeignError)(v.value1)(v1.value1);
        };
        if (v instanceof ErrorAtProperty && v1 instanceof ErrorAtProperty) {
            return v.value0 === v1.value0 && Prelude["=="](eqForeignError)(v.value1)(v1.value1);
        };
        if (v instanceof JSONError && v1 instanceof JSONError) {
            return v.value0 === v1.value0;
        };
        return false;
    };
});
module.exports = {
    TypeMismatch: TypeMismatch, 
    ErrorAtIndex: ErrorAtIndex, 
    ErrorAtProperty: ErrorAtProperty, 
    JSONError: JSONError, 
    readArray: readArray, 
    readInt: readInt, 
    readNumber: readNumber, 
    readBoolean: readBoolean, 
    readChar: readChar, 
    readString: readString, 
    unsafeReadTagged: unsafeReadTagged, 
    parseJSON: parseJSON, 
    showForeignError: showForeignError, 
    eqForeignError: eqForeignError, 
    isArray: $foreign.isArray, 
    isUndefined: $foreign.isUndefined, 
    isNull: $foreign.isNull, 
    tagOf: $foreign.tagOf, 
    typeOf: $foreign.typeOf, 
    unsafeFromForeign: $foreign.unsafeFromForeign, 
    toForeign: $foreign.toForeign
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foreign/foreign.js","Data.Either":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Either/index.js","Data.Function":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Function/index.js","Data.Int":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.String":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.String/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Function.Eff/foreign.js":[function(require,module,exports){
// module Data.Function.Eff

exports.mkEffFn1 = function mkEffFn1(fn) {
  return function(x) {
    return fn(x)();
  };
};

exports.mkEffFn2 = function mkEffFn2(fn) {
  return function(a, b) {
    return fn(a)(b)();
  };
};

exports.mkEffFn3 = function mkEffFn3(fn) {
  return function(a, b, c) {
    return fn(a)(b)(c)();
  };
};

exports.mkEffFn4 = function mkEffFn4(fn) {
  return function(a, b, c, d) {
    return fn(a)(b)(c)(d)();
  };
};

exports.mkEffFn5 = function mkEffFn5(fn) {
  return function(a, b, c, d, e) {
    return fn(a)(b)(c)(d)(e)();
  };
};

exports.mkEffFn6 = function mkEffFn6(fn) {
  return function(a, b, c, d, e, f) {
    return fn(a)(b)(c)(d)(e)(f)();
  };
};

exports.mkEffFn7 = function mkEffFn7(fn) {
  return function(a, b, c, d, e, f, g) {
    return fn(a)(b)(c)(d)(e)(f)(g)();
  };
};

exports.mkEffFn8 = function mkEffFn8(fn) {
  return function(a, b, c, d, e, f, g, h) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)();
  };
};

exports.mkEffFn9 = function mkEffFn9(fn) {
  return function(a, b, c, d, e, f, g, h, i) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)();
  };
};

exports.mkEffFn10 = function mkEffFn10(fn) {
  return function(a, b, c, d, e, f, g, h, i, j) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)();
  };
};

exports.runEffFn1 = function runEffFn1(fn) {
  return function(a) {
    return function() {
      return fn(a);
    };
  };
};

exports.runEffFn2 = function runEffFn2(fn) {
  return function(a) {
    return function(b) {
      return function() {
        return fn(a, b);
      };
    };
  };
};

exports.runEffFn3 = function runEffFn3(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function() {
          return fn(a, b, c);
        };
      };
    };
  };
};

exports.runEffFn4 = function runEffFn4(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function() {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
};

exports.runEffFn5 = function runEffFn5(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function(e) {
            return function() {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };
};

exports.runEffFn6 = function runEffFn6(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function(e) {
            return function(f) {
              return function() {
                return fn(a, b, c, d, e, f);
              };
            };
          };
        };
      };
    };
  };
};

exports.runEffFn7 = function runEffFn7(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function(e) {
            return function(f) {
              return function(g) {
                return function() {
                  return fn(a, b, c, d, e, f, g);
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runEffFn8 = function runEffFn8(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function(e) {
            return function(f) {
              return function(g) {
                return function(h) {
                  return function() {
                    return fn(a, b, c, d, e, f, g, h);
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runEffFn9 = function runEffFn9(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function(e) {
            return function(f) {
              return function(g) {
                return function(h) {
                  return function(i) {
                    return function() {
                      return fn(a, b, c, d, e, f, g, h, i);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runEffFn10 = function runEffFn10(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function(e) {
            return function(f) {
              return function(g) {
                return function(h) {
                  return function(i) {
                    return function(j) {
                      return function() {
                        return fn(a, b, c, d, e, f, g, h, i, j);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Function.Eff/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("Control.Monad.Eff");
module.exports = {
    runEffFn10: $foreign.runEffFn10, 
    runEffFn9: $foreign.runEffFn9, 
    runEffFn8: $foreign.runEffFn8, 
    runEffFn7: $foreign.runEffFn7, 
    runEffFn6: $foreign.runEffFn6, 
    runEffFn5: $foreign.runEffFn5, 
    runEffFn4: $foreign.runEffFn4, 
    runEffFn3: $foreign.runEffFn3, 
    runEffFn2: $foreign.runEffFn2, 
    runEffFn1: $foreign.runEffFn1, 
    mkEffFn10: $foreign.mkEffFn10, 
    mkEffFn9: $foreign.mkEffFn9, 
    mkEffFn8: $foreign.mkEffFn8, 
    mkEffFn7: $foreign.mkEffFn7, 
    mkEffFn6: $foreign.mkEffFn6, 
    mkEffFn5: $foreign.mkEffFn5, 
    mkEffFn4: $foreign.mkEffFn4, 
    mkEffFn3: $foreign.mkEffFn3, 
    mkEffFn2: $foreign.mkEffFn2, 
    mkEffFn1: $foreign.mkEffFn1
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Function.Eff/foreign.js","Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Function/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Function

exports.mkFn0 = function (fn) {
  return function () {
    return fn({});
  };
};

exports.mkFn1 = function (fn) {
  return function (a) {
    return fn(a);
  };
};

exports.mkFn2 = function (fn) {
  /* jshint maxparams: 2 */
  return function (a, b) {
    return fn(a)(b);
  };
};

exports.mkFn3 = function (fn) {
  /* jshint maxparams: 3 */
  return function (a, b, c) {
    return fn(a)(b)(c);
  };
};

exports.mkFn4 = function (fn) {
  /* jshint maxparams: 4 */
  return function (a, b, c, d) {
    return fn(a)(b)(c)(d);
  };
};

exports.mkFn5 = function (fn) {
  /* jshint maxparams: 5 */
  return function (a, b, c, d, e) {
    return fn(a)(b)(c)(d)(e);
  };
};

exports.mkFn6 = function (fn) {
  /* jshint maxparams: 6 */
  return function (a, b, c, d, e, f) {
    return fn(a)(b)(c)(d)(e)(f);
  };
};

exports.mkFn7 = function (fn) {
  /* jshint maxparams: 7 */
  return function (a, b, c, d, e, f, g) {
    return fn(a)(b)(c)(d)(e)(f)(g);
  };
};

exports.mkFn8 = function (fn) {
  /* jshint maxparams: 8 */
  return function (a, b, c, d, e, f, g, h) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h);
  };
};

exports.mkFn9 = function (fn) {
  /* jshint maxparams: 9 */
  return function (a, b, c, d, e, f, g, h, i) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
  };
};

exports.mkFn10 = function (fn) {
  /* jshint maxparams: 10 */
  return function (a, b, c, d, e, f, g, h, i, j) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
  };
};

exports.runFn0 = function (fn) {
  return fn();
};

exports.runFn1 = function (fn) {
  return function (a) {
    return fn(a);
  };
};

exports.runFn2 = function (fn) {
  return function (a) {
    return function (b) {
      return fn(a, b);
    };
  };
};

exports.runFn3 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return fn(a, b, c);
      };
    };
  };
};

exports.runFn4 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return fn(a, b, c, d);
        };
      };
    };
  };
};

exports.runFn5 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return fn(a, b, c, d, e);
          };
        };
      };
    };
  };
};

exports.runFn6 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return fn(a, b, c, d, e, f);
            };
          };
        };
      };
    };
  };
};

exports.runFn7 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return fn(a, b, c, d, e, f, g);
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn8 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return fn(a, b, c, d, e, f, g, h);
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn9 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return fn(a, b, c, d, e, f, g, h, i);
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn10 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return function (j) {
                      return fn(a, b, c, d, e, f, g, h, i, j);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Function/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
module.exports = {
    on: on, 
    runFn10: $foreign.runFn10, 
    runFn9: $foreign.runFn9, 
    runFn8: $foreign.runFn8, 
    runFn7: $foreign.runFn7, 
    runFn6: $foreign.runFn6, 
    runFn5: $foreign.runFn5, 
    runFn4: $foreign.runFn4, 
    runFn3: $foreign.runFn3, 
    runFn2: $foreign.runFn2, 
    runFn1: $foreign.runFn1, 
    runFn0: $foreign.runFn0, 
    mkFn10: $foreign.mkFn10, 
    mkFn9: $foreign.mkFn9, 
    mkFn8: $foreign.mkFn8, 
    mkFn7: $foreign.mkFn7, 
    mkFn6: $foreign.mkFn6, 
    mkFn5: $foreign.mkFn5, 
    mkFn4: $foreign.mkFn4, 
    mkFn3: $foreign.mkFn3, 
    mkFn2: $foreign.mkFn2, 
    mkFn1: $foreign.mkFn1, 
    mkFn0: $foreign.mkFn0
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Function/foreign.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Invariant = function (imap) {
    this.imap = imap;
};
var imapF = function (dictFunctor) {
    return function ($1) {
        return Prelude["const"](Prelude.map(dictFunctor)($1));
    };
};
var invariantArray = new Invariant(imapF(Prelude.functorArray));
var invariantFn = new Invariant(imapF(Prelude.functorFn));
var imap = function (dict) {
    return dict.imap;
};
module.exports = {
    Invariant: Invariant, 
    imapF: imapF, 
    imap: imap, 
    invariantFn: invariantFn, 
    invariantArray: invariantArray
};

},{"Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Generic/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Generic


//------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.zipAll = function(f) {
    return function(xs) {
        return function(ys) {
            var l = xs.length < ys.length ? xs.length : ys.length;
            for (var i = 0; i < l; i++) {
                if (!f(xs[i])(ys[i])) {
                    return false;
                }
            }
            return true;
        };
    };
};

exports.zipCompare = function(f) {
    return function(xs) {
        return function(ys) {
            var i = 0;
            var xlen = xs.length;
            var ylen = ys.length;
            while (i < xlen && i < ylen) {
                var o = f(xs[i])(ys[i]);
                if (o !== 0) {
                    return o;
                }
                i++;
            }
            if (xlen === ylen) {
                return 0;
            } else if (xlen > ylen) {
                return -1;
            } else {
                return 1;
            }
        };
    };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Generic/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Data_Traversable = require("Data.Traversable");
var Data_Foldable = require("Data.Foldable");
var Data_Array = require("Data.Array");
var Data_String = require("Data.String");
var Type_Proxy = require("Type.Proxy");
var Data_Monoid = require("Data.Monoid");
var SProd = (function () {
    function SProd(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SProd.create = function (value0) {
        return function (value1) {
            return new SProd(value0, value1);
        };
    };
    return SProd;
})();
var SRecord = (function () {
    function SRecord(value0) {
        this.value0 = value0;
    };
    SRecord.create = function (value0) {
        return new SRecord(value0);
    };
    return SRecord;
})();
var SNumber = (function () {
    function SNumber(value0) {
        this.value0 = value0;
    };
    SNumber.create = function (value0) {
        return new SNumber(value0);
    };
    return SNumber;
})();
var SBoolean = (function () {
    function SBoolean(value0) {
        this.value0 = value0;
    };
    SBoolean.create = function (value0) {
        return new SBoolean(value0);
    };
    return SBoolean;
})();
var SInt = (function () {
    function SInt(value0) {
        this.value0 = value0;
    };
    SInt.create = function (value0) {
        return new SInt(value0);
    };
    return SInt;
})();
var SString = (function () {
    function SString(value0) {
        this.value0 = value0;
    };
    SString.create = function (value0) {
        return new SString(value0);
    };
    return SString;
})();
var SChar = (function () {
    function SChar(value0) {
        this.value0 = value0;
    };
    SChar.create = function (value0) {
        return new SChar(value0);
    };
    return SChar;
})();
var SArray = (function () {
    function SArray(value0) {
        this.value0 = value0;
    };
    SArray.create = function (value0) {
        return new SArray(value0);
    };
    return SArray;
})();
var SigProd = (function () {
    function SigProd(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SigProd.create = function (value0) {
        return function (value1) {
            return new SigProd(value0, value1);
        };
    };
    return SigProd;
})();
var SigRecord = (function () {
    function SigRecord(value0) {
        this.value0 = value0;
    };
    SigRecord.create = function (value0) {
        return new SigRecord(value0);
    };
    return SigRecord;
})();
var SigNumber = (function () {
    function SigNumber() {

    };
    SigNumber.value = new SigNumber();
    return SigNumber;
})();
var SigBoolean = (function () {
    function SigBoolean() {

    };
    SigBoolean.value = new SigBoolean();
    return SigBoolean;
})();
var SigInt = (function () {
    function SigInt() {

    };
    SigInt.value = new SigInt();
    return SigInt;
})();
var SigString = (function () {
    function SigString() {

    };
    SigString.value = new SigString();
    return SigString;
})();
var SigChar = (function () {
    function SigChar() {

    };
    SigChar.value = new SigChar();
    return SigChar;
})();
var SigArray = (function () {
    function SigArray(value0) {
        this.value0 = value0;
    };
    SigArray.create = function (value0) {
        return new SigArray(value0);
    };
    return SigArray;
})();
var Generic = function (fromSpine, toSignature, toSpine) {
    this.fromSpine = fromSpine;
    this.toSignature = toSignature;
    this.toSpine = toSpine;
};
var toSpine = function (dict) {
    return dict.toSpine;
};
var toSignature = function (dict) {
    return dict.toSignature;
};
var showArray = function (f) {
    return function (xs) {
        return "[ " + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(Prelude.map(Prelude.functorArray)(f)(xs)) + " ]");
    };
};
var isValidSpine = function (v) {
    return function (v1) {
        if (v instanceof SigBoolean && v1 instanceof SBoolean) {
            return true;
        };
        if (v instanceof SigNumber && v1 instanceof SNumber) {
            return true;
        };
        if (v instanceof SigInt && v1 instanceof SInt) {
            return true;
        };
        if (v instanceof SigString && v1 instanceof SString) {
            return true;
        };
        if (v instanceof SigChar && v1 instanceof SChar) {
            return true;
        };
        if (v instanceof SigArray && v1 instanceof SArray) {
            return Data_Foldable.all(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(function ($191) {
                return isValidSpine(v.value0(Prelude.unit))($191(Prelude.unit));
            })(v1.value0);
        };
        if (v instanceof SigProd && v1 instanceof SProd) {
            var $52 = Data_Foldable.find(Data_Foldable.foldableArray)(function ($192) {
                return v1.value0 === (function (v2) {
                    return v2.sigConstructor;
                })($192);
            })(v.value1);
            if ($52 instanceof Data_Maybe.Nothing) {
                return false;
            };
            if ($52 instanceof Data_Maybe.Just) {
                return Data_Foldable.and(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(Data_Array.zipWith(function (sig) {
                    return function (spine) {
                        return isValidSpine(sig(Prelude.unit))(spine(Prelude.unit));
                    };
                })($52.value0.sigValues)(v1.value1));
            };
            throw new Error("Failed pattern match at Data.Generic line 132, column 3 - line 136, column 1: " + [ $52.constructor.name ]);
        };
        if (v instanceof SigRecord && v1 instanceof SRecord) {
            return Data_Foldable.and(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(Data_Array.zipWith(function (sig) {
                return function (val) {
                    return isValidSpine(sig.recValue(Prelude.unit))(val.recValue(Prelude.unit));
                };
            })(Data_Array.sortBy(function (a) {
                return function (b) {
                    return Prelude.compare(Prelude.ordString)(a.recLabel)(b.recLabel);
                };
            })(v.value0))(Data_Array.sortBy(function (a) {
                return function (b) {
                    return Prelude.compare(Prelude.ordString)(a.recLabel)(b.recLabel);
                };
            })(v1.value0)));
        };
        return false;
    };
};
var genericString = new Generic(function (v) {
    if (v instanceof SString) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigString.value;
}, function (x) {
    return new SString(x);
});
var genericShowPrec = function (d) {
    return function (v) {
        if (v instanceof SProd) {
            var showParen = function (v1) {
                return function (x) {
                    if (!v1) {
                        return x;
                    };
                    if (v1) {
                        return "(" + (x + ")");
                    };
                    throw new Error("Failed pattern match at Data.Generic line 240, column 9 - line 241, column 9: " + [ v1.constructor.name, x.constructor.name ]);
                };
            };
            var $67 = Data_Array["null"](v.value1);
            if ($67) {
                return v.value0;
            };
            if (!$67) {
                return showParen(d > 10)(v.value0 + (" " + Data_String.joinWith(" ")(Prelude.map(Prelude.functorArray)(function (x) {
                    return genericShowPrec(11)(x(Prelude.unit));
                })(v.value1))));
            };
            throw new Error("Failed pattern match at Data.Generic line 237, column 5 - line 240, column 3: " + [ $67.constructor.name ]);
        };
        if (v instanceof SRecord) {
            return "{" + (Data_String.joinWith(", ")(Prelude.map(Prelude.functorArray)(function (x) {
                return x.recLabel + (": " + genericShowPrec(0)(x.recValue(Prelude.unit)));
            })(v.value0)) + "}");
        };
        if (v instanceof SBoolean) {
            return Prelude.show(Prelude.showBoolean)(v.value0);
        };
        if (v instanceof SInt) {
            return Prelude.show(Prelude.showInt)(v.value0);
        };
        if (v instanceof SNumber) {
            return Prelude.show(Prelude.showNumber)(v.value0);
        };
        if (v instanceof SString) {
            return Prelude.show(Prelude.showString)(v.value0);
        };
        if (v instanceof SChar) {
            return Prelude.show(Prelude.showChar)(v.value0);
        };
        if (v instanceof SArray) {
            return "[" + (Data_String.joinWith(", ")(Prelude.map(Prelude.functorArray)(function (x) {
                return genericShowPrec(0)(x(Prelude.unit));
            })(v.value0)) + "]");
        };
        throw new Error("Failed pattern match at Data.Generic line 236, column 1 - line 243, column 1: " + [ d.constructor.name, v.constructor.name ]);
    };
};
var genericNumber = new Generic(function (v) {
    if (v instanceof SNumber) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigNumber.value;
}, function (x) {
    return new SNumber(x);
});
var genericInt = new Generic(function (v) {
    if (v instanceof SInt) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigInt.value;
}, function (x) {
    return new SInt(x);
});
var genericChar = new Generic(function (v) {
    if (v instanceof SChar) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigChar.value;
}, function (x) {
    return new SChar(x);
});
var genericBool = new Generic(function (v) {
    if (v instanceof SBoolean) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigBoolean.value;
}, function (b) {
    return new SBoolean(b);
});
var gShow = function (dictGeneric) {
    return function ($193) {
        return genericShowPrec(0)(toSpine(dictGeneric)($193));
    };
};
var fromSpine = function (dict) {
    return dict.fromSpine;
};
var force = function (v) {
    return v(Prelude.unit);
};
var showSignature = function (sig) {
    var needsParen = function (s) {
        if (s instanceof SigProd) {
            return true;
        };
        if (s instanceof SigRecord) {
            return true;
        };
        if (s instanceof SigNumber) {
            return false;
        };
        if (s instanceof SigBoolean) {
            return false;
        };
        if (s instanceof SigInt) {
            return false;
        };
        if (s instanceof SigString) {
            return false;
        };
        if (s instanceof SigChar) {
            return false;
        };
        if (s instanceof SigArray) {
            return true;
        };
        throw new Error("Failed pattern match at Data.Generic line 79, column 18 - line 89, column 1: " + [ s.constructor.name ]);
    };
    var paren = function (s) {
        if (needsParen(s)) {
            return "(" + (showSignature(s) + ")");
        };
        if (Prelude.otherwise) {
            return showSignature(s);
        };
        throw new Error("Failed pattern match at Data.Generic line 55, column 1 - line 89, column 1: " + [ s.constructor.name ]);
    };
    return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)((function () {
        if (sig instanceof SigProd) {
            return [ "SigProd ", Prelude.show(Prelude.showString)(sig.value0), " ", showArray(showDataConstructor)(sig.value1) ];
        };
        if (sig instanceof SigRecord) {
            return [ "SigRecord ", showArray(showLabel)(sig.value0) ];
        };
        if (sig instanceof SigNumber) {
            return [ "SigNumber" ];
        };
        if (sig instanceof SigBoolean) {
            return [ "SigBoolean" ];
        };
        if (sig instanceof SigInt) {
            return [ "SigInt" ];
        };
        if (sig instanceof SigString) {
            return [ "SigString" ];
        };
        if (sig instanceof SigChar) {
            return [ "SigChar" ];
        };
        if (sig instanceof SigArray) {
            return [ "SigArray ", paren(force(sig.value0)) ];
        };
        throw new Error("Failed pattern match at Data.Generic line 56, column 3 - line 74, column 3: " + [ sig.constructor.name ]);
    })());
};
var showLabel = function (l) {
    return "{ recLabel: " + (Prelude.show(Prelude.showString)(l.recLabel) + (", recValue: " + (showSignature(force(l.recValue)) + " }")));
};
var showDataConstructor = function (dc) {
    return "{ sigConstructor: " + (Prelude.show(Prelude.showString)(dc.sigConstructor) + (", sigValues: " + (showArray(function ($194) {
        return showSignature(force($194));
    })(dc.sigValues) + "}")));
};
var showGenericSignature = new Prelude.Show(showSignature);
var eqGeneric = new Prelude.Eq(function (v) {
    return function (v1) {
        if (v instanceof SProd && v1 instanceof SProd) {
            return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(function (x) {
                return function (y) {
                    return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
                };
            })(v.value1)(v1.value1));
        };
        if (v instanceof SRecord && v1 instanceof SRecord) {
            var go = function (x) {
                return function (y) {
                    return x.recLabel === y.recLabel && Prelude["=="](eqGeneric)(x.recValue(Prelude.unit))(y.recValue(Prelude.unit));
                };
            };
            return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(go)(v.value0)(v1.value0);
        };
        if (v instanceof SInt && v1 instanceof SInt) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SNumber && v1 instanceof SNumber) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SBoolean && v1 instanceof SBoolean) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SChar && v1 instanceof SChar) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SString && v1 instanceof SString) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SArray && v1 instanceof SArray) {
            return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(function (x) {
                return function (y) {
                    return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
                };
            })(v.value0)(v1.value0);
        };
        return false;
    };
});
var gEq = function (dictGeneric) {
    return function (x) {
        return function (y) {
            return Prelude["=="](eqGeneric)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
        };
    };
};
var ordGeneric = new Prelude.Ord(function () {
    return eqGeneric;
}, function (v) {
    return function (v1) {
        if (v instanceof SProd && v1 instanceof SProd) {
            var $118 = Prelude.compare(Prelude.ordString)(v.value0)(v1.value0);
            if ($118 instanceof Prelude.EQ) {
                return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(function (x) {
                    return function (y) {
                        var $119 = Prelude.compare(ordGeneric)(x(Prelude.unit))(y(Prelude.unit));
                        if ($119 instanceof Prelude.EQ) {
                            return 0;
                        };
                        if ($119 instanceof Prelude.LT) {
                            return 1;
                        };
                        if ($119 instanceof Prelude.GT) {
                            return -1;
                        };
                        throw new Error("Failed pattern match at Data.Generic line 280, column 49 - line 283, column 59: " + [ $119.constructor.name ]);
                    };
                })(v.value1)(v1.value1));
            };
            return $118;
        };
        if (v instanceof SProd) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SProd) {
            return Prelude.GT.value;
        };
        if (v instanceof SRecord && v1 instanceof SRecord) {
            var go = function (x) {
                return function (y) {
                    var $128 = Prelude.compare(Prelude.ordString)(x.recLabel)(y.recLabel);
                    if ($128 instanceof Prelude.EQ) {
                        var $129 = Prelude.compare(ordGeneric)(x.recValue(Prelude.unit))(y.recValue(Prelude.unit));
                        if ($129 instanceof Prelude.EQ) {
                            return 0;
                        };
                        if ($129 instanceof Prelude.LT) {
                            return 1;
                        };
                        if ($129 instanceof Prelude.GT) {
                            return -1;
                        };
                        throw new Error("Failed pattern match at Data.Generic line 289, column 32 - line 293, column 26: " + [ $129.constructor.name ]);
                    };
                    if ($128 instanceof Prelude.LT) {
                        return 1;
                    };
                    if ($128 instanceof Prelude.GT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match at Data.Generic line 288, column 24 - line 295, column 5: " + [ $128.constructor.name ]);
                };
            };
            return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(go)(v.value0)(v1.value0));
        };
        if (v instanceof SRecord) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SRecord) {
            return Prelude.GT.value;
        };
        if (v instanceof SInt && v1 instanceof SInt) {
            return Prelude.compare(Prelude.ordInt)(v.value0)(v1.value0);
        };
        if (v instanceof SInt) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SInt) {
            return Prelude.GT.value;
        };
        if (v instanceof SBoolean && v1 instanceof SBoolean) {
            return Prelude.compare(Prelude.ordBoolean)(v.value0)(v1.value0);
        };
        if (v instanceof SBoolean) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SBoolean) {
            return Prelude.GT.value;
        };
        if (v instanceof SNumber && v1 instanceof SNumber) {
            return Prelude.compare(Prelude.ordNumber)(v.value0)(v1.value0);
        };
        if (v instanceof SNumber) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SNumber) {
            return Prelude.GT.value;
        };
        if (v instanceof SString && v1 instanceof SString) {
            return Prelude.compare(Prelude.ordString)(v.value0)(v1.value0);
        };
        if (v instanceof SString) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SString) {
            return Prelude.GT.value;
        };
        if (v instanceof SChar && v1 instanceof SChar) {
            return Prelude.compare(Prelude.ordChar)(v.value0)(v1.value0);
        };
        if (v instanceof SChar) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SChar) {
            return Prelude.GT.value;
        };
        if (v instanceof SArray && v1 instanceof SArray) {
            return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(function (x) {
                return function (y) {
                    var $154 = Prelude.compare(ordGeneric)(x(Prelude.unit))(y(Prelude.unit));
                    if ($154 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if ($154 instanceof Prelude.LT) {
                        return 1;
                    };
                    if ($154 instanceof Prelude.GT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match at Data.Generic line 312, column 71 - line 315, column 81: " + [ $154.constructor.name ]);
                };
            })(v.value0)(v1.value0));
        };
        throw new Error("Failed pattern match at Data.Generic line 278, column 5 - line 285, column 5: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var gCompare = function (dictGeneric) {
    return function (x) {
        return function (y) {
            return Prelude.compare(ordGeneric)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
        };
    };
};
var anyProxy = (Type_Proxy["Proxy"]).value;
var genericArray = function (dictGeneric) {
    return new Generic(function (v) {
        if (v instanceof SArray) {
            return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(function ($195) {
                return fromSpine(dictGeneric)((function (v1) {
                    return v1(Prelude.unit);
                })($195));
            })(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }, function (x) {
        var lowerProxy = function (v) {
            return anyProxy;
        };
        return new SigArray(function (unit) {
            return toSignature(dictGeneric)(lowerProxy(x));
        });
    }, function (xs) {
        return new SArray(Prelude["<$>"](Prelude.functorArray)(function (x) {
            return function (y) {
                return toSpine(dictGeneric)(x);
            };
        })(xs));
    });
};
var genericEither = function (dictGeneric) {
    return function (dictGeneric1) {
        return new Generic(function (v) {
            if (v instanceof SProd && (v.value0 === "Data.Either.Left" && v.value1.length === 1)) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Either.Left.create)(fromSpine(dictGeneric)(v.value1[0](Prelude.unit)));
            };
            if (v instanceof SProd && (v.value0 === "Data.Either.Right" && v.value1.length === 1)) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Either.Right.create)(fromSpine(dictGeneric1)(v.value1[0](Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        }, function (x) {
            var rproxy = function (v) {
                return anyProxy;
            };
            var lproxy = function (v) {
                return anyProxy;
            };
            return new SigProd("Data.Either.Either", [ {
                sigConstructor: "Data.Either.Left", 
                sigValues: [ function (u) {
                    return toSignature(dictGeneric)(lproxy(x));
                } ]
            }, {
                sigConstructor: "Data.Either.Right", 
                sigValues: [ function (u) {
                    return toSignature(dictGeneric1)(rproxy(x));
                } ]
            } ]);
        }, function (v) {
            if (v instanceof Data_Either.Left) {
                return new SProd("Data.Either.Left", [ function (u) {
                    return toSpine(dictGeneric)(v.value0);
                } ]);
            };
            if (v instanceof Data_Either.Right) {
                return new SProd("Data.Either.Right", [ function (u) {
                    return toSpine(dictGeneric1)(v.value0);
                } ]);
            };
            throw new Error("Failed pattern match at Data.Generic line 215, column 5 - line 216, column 5: " + [ v.constructor.name ]);
        });
    };
};
var genericMaybe = function (dictGeneric) {
    return new Generic(function (v) {
        if (v instanceof SProd && (v.value0 === "Data.Maybe.Just" && v.value1.length === 1)) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(fromSpine(dictGeneric)(v.value1[0](Prelude.unit)));
        };
        if (v instanceof SProd && (v.value0 === "Data.Maybe.Nothing" && v.value1.length === 0)) {
            return Prelude["return"](Data_Maybe.applicativeMaybe)(Data_Maybe.Nothing.value);
        };
        return Data_Maybe.Nothing.value;
    }, function (x) {
        var mbProxy = function (v) {
            return anyProxy;
        };
        return new SigProd("Data.Maybe.Maybe", [ {
            sigConstructor: "Data.Maybe.Just", 
            sigValues: [ function (u) {
                return toSignature(dictGeneric)(mbProxy(x));
            } ]
        }, {
            sigConstructor: "Data.Maybe.Nothing", 
            sigValues: [  ]
        } ]);
    }, function (v) {
        if (v instanceof Data_Maybe.Just) {
            return new SProd("Data.Maybe.Just", [ function (u) {
                return toSpine(dictGeneric)(v.value0);
            } ]);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return new SProd("Data.Maybe.Nothing", [  ]);
        };
        throw new Error("Failed pattern match at Data.Generic line 198, column 7 - line 199, column 7: " + [ v.constructor.name ]);
    });
};
var genericTuple = function (dictGeneric) {
    return function (dictGeneric1) {
        return new Generic(function (v) {
            if (v instanceof SProd && (v.value0 === "Data.Tuple.Tuple" && v.value1.length === 2)) {
                return Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(fromSpine(dictGeneric)(v.value1[0](Prelude.unit))))(fromSpine(dictGeneric1)(v.value1[1](Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        }, function (x) {
            var sndProxy = function (v) {
                return anyProxy;
            };
            var fstProxy = function (v) {
                return anyProxy;
            };
            return new SigProd("Data.Tuple.Tuple", [ {
                sigConstructor: "Data.Tuple.Tuple", 
                sigValues: [ function (u) {
                    return toSignature(dictGeneric)(fstProxy(x));
                }, function (u) {
                    return toSignature(dictGeneric1)(sndProxy(x));
                } ]
            } ]);
        }, function (v) {
            return new SProd("Data.Tuple.Tuple", [ function (u) {
                return toSpine(dictGeneric)(v.value0);
            }, function (u) {
                return toSpine(dictGeneric1)(v.value1);
            } ]);
        });
    };
};
module.exports = {
    SigProd: SigProd, 
    SigRecord: SigRecord, 
    SigNumber: SigNumber, 
    SigBoolean: SigBoolean, 
    SigInt: SigInt, 
    SigString: SigString, 
    SigChar: SigChar, 
    SigArray: SigArray, 
    SProd: SProd, 
    SRecord: SRecord, 
    SNumber: SNumber, 
    SBoolean: SBoolean, 
    SInt: SInt, 
    SString: SString, 
    SChar: SChar, 
    SArray: SArray, 
    Generic: Generic, 
    gCompare: gCompare, 
    gEq: gEq, 
    gShow: gShow, 
    isValidSpine: isValidSpine, 
    showDataConstructor: showDataConstructor, 
    showSignature: showSignature, 
    fromSpine: fromSpine, 
    toSignature: toSignature, 
    toSpine: toSpine, 
    showGenericSignature: showGenericSignature, 
    genericNumber: genericNumber, 
    genericInt: genericInt, 
    genericString: genericString, 
    genericChar: genericChar, 
    genericBool: genericBool, 
    genericArray: genericArray, 
    genericTuple: genericTuple, 
    genericMaybe: genericMaybe, 
    genericEither: genericEither, 
    eqGeneric: eqGeneric, 
    ordGeneric: ordGeneric
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Generic/foreign.js","Data.Array":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array/index.js","Data.Either":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Either/index.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Data.String":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.String/index.js","Data.Traversable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/index.js","Data.Tuple":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Tuple/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js","Type.Proxy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Type.Proxy/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int.Bits/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Int.Bits

exports.andImpl = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 & n2;
  };
};

exports.orImpl = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 | n2;
  };
};

exports.xorImpl = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 ^ n2;
  };
};

exports.shl = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 << n2;
  };
};

exports.shr = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 >> n2;
  };
};

exports.zshr = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 >>> n2;
  };
};

exports.complement = function (n) {
  /* jshint bitwise: false */
  return ~n;
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int.Bits/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var $dot$bar$dot = $foreign.orImpl;
var $dot$up$dot = $foreign.xorImpl;
var $dot$amp$dot = $foreign.andImpl;
module.exports = {
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    ".&.": $dot$amp$dot, 
    complement: $foreign.complement, 
    zshr: $foreign.zshr, 
    shr: $foreign.shr, 
    shl: $foreign.shl
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int.Bits/foreign.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Int

exports.fromNumberImpl = function (just) {
  return function (nothing) {
    return function (n) {
      /* jshint bitwise: false */
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};

exports.toNumber = function (n) {
  return n;
};

exports.fromStringImpl = function (just) {
  return function (nothing) {
    return function (s) {
      /* jshint bitwise: false */
      var i = parseFloat(s);
      return (i | 0) === i ? just(i) : nothing;
    };
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Int_Bits = require("Data.Int.Bits");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var $$Math = require("Math");
var odd = function (x) {
    return (x & 1) !== 0;
};
var fromString = $foreign.fromStringImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeClamp = function (x) {
    if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
        return Prelude.top(Prelude.boundedInt);
    };
    if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
        return Prelude.bottom(Prelude.boundedInt);
    };
    if (Prelude.otherwise) {
        return Data_Maybe_Unsafe.fromJust(fromNumber(x));
    };
    throw new Error("Failed pattern match at Data.Int line 49, column 1 - line 56, column 1: " + [ x.constructor.name ]);
};
var round = function ($1) {
    return unsafeClamp($$Math.round($1));
};
var floor = function ($2) {
    return unsafeClamp($$Math.floor($2));
};
var even = function (x) {
    return (x & 1) === 0;
};
var ceil = function ($3) {
    return unsafeClamp($$Math.ceil($3));
};
module.exports = {
    odd: odd, 
    even: even, 
    fromString: fromString, 
    round: round, 
    floor: floor, 
    ceil: ceil, 
    fromNumber: fromNumber, 
    toNumber: $foreign.toNumber
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int/foreign.js","Data.Int.Bits":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int.Bits/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Maybe.Unsafe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.Unsafe/index.js","Math":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Math/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Lazy/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Lazy

exports.defer = function () {

  function Defer (thunk) {
    if (this instanceof Defer) {
      this.thunk = thunk;
      return this;
    } else {
      return new Defer(thunk);
    }
  }

  Defer.prototype.force = function () {
    var value = this.thunk();
    delete this.thunk;
    this.force = function () {
      return value;
    };
    return value;
  };

  return Defer;

}();

exports.force = function (l) {
  return l.force();
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Lazy/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Control_Lazy = require("Control.Lazy");
var showLazy = function (dictShow) {
    return new Prelude.Show(function (x) {
        return "Lazy " + Prelude.show(dictShow)($foreign.force(x));
    });
};
var semiringLazy = function (dictSemiring) {
    return new Prelude.Semiring(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["+"](dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["*"](dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, $foreign.defer(function (v) {
        return Prelude.one(dictSemiring);
    }), $foreign.defer(function (v) {
        return Prelude.zero(dictSemiring);
    }));
};
var semigroupLazy = function (dictSemigroup) {
    return new Prelude.Semigroup(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["<>"](dictSemigroup)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var ringLazy = function (dictRing) {
    return new Prelude.Ring(function () {
        return semiringLazy(dictRing["__superclass_Prelude.Semiring_0"]());
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["-"](dictRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var monoidLazy = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupLazy(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, $foreign.defer(function (v) {
        return Data_Monoid.mempty(dictMonoid);
    }));
};
var moduloSemiringLazy = function (dictModuloSemiring) {
    return new Prelude.ModuloSemiring(function () {
        return semiringLazy(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["/"](dictModuloSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude.mod(dictModuloSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var lazyLazy = new Control_Lazy.Lazy(function (f) {
    return $foreign.defer(function (v) {
        return $foreign.force(f(Prelude.unit));
    });
});
var functorLazy = new Prelude.Functor(function (f) {
    return function (l) {
        return $foreign.defer(function (v) {
            return f($foreign.force(l));
        });
    };
});
var extendLazy = new Control_Extend.Extend(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return f(x);
        });
    };
});
var eqLazy = function (dictEq) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return Prelude["=="](dictEq)($foreign.force(x))($foreign.force(y));
        };
    });
};
var ordLazy = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqLazy(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (x) {
        return function (y) {
            return Prelude.compare(dictOrd)($foreign.force(x))($foreign.force(y));
        };
    });
};
var divisionRingLazy = function (dictDivisionRing) {
    return new Prelude.DivisionRing(function () {
        return moduloSemiringLazy(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
    }, function () {
        return ringLazy(dictDivisionRing["__superclass_Prelude.Ring_0"]());
    });
};
var numLazy = function (dictNum) {
    return new Prelude.Num(function () {
        return divisionRingLazy(dictNum["__superclass_Prelude.DivisionRing_0"]());
    });
};
var comonadLazy = new Control_Comonad.Comonad(function () {
    return extendLazy;
}, $foreign.force);
var boundedLazy = function (dictBounded) {
    return new Prelude.Bounded($foreign.defer(function (v) {
        return Prelude.bottom(dictBounded);
    }), $foreign.defer(function (v) {
        return Prelude.top(dictBounded);
    }));
};
var boundedOrdLazy = function (dictBoundedOrd) {
    return new Prelude.BoundedOrd(function () {
        return boundedLazy(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
    }, function () {
        return ordLazy(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
    });
};
var applyLazy = new Prelude.Apply(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return $foreign.force(f)($foreign.force(x));
        });
    };
});
var bindLazy = new Prelude.Bind(function () {
    return applyLazy;
}, function (l) {
    return function (f) {
        return $foreign.defer(function (v) {
            return $foreign.force(f($foreign.force(l)));
        });
    };
});
var booleanAlgebraLazy = function (dictBooleanAlgebra) {
    return new Prelude.BooleanAlgebra(function () {
        return boundedLazy(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
    }, function (a) {
        return function (b) {
            return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.conj(dictBooleanAlgebra))(a))(b);
        };
    }, function (a) {
        return function (b) {
            return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.disj(dictBooleanAlgebra))(a))(b);
        };
    }, function (a) {
        return Prelude["<$>"](functorLazy)(Prelude.not(dictBooleanAlgebra))(a);
    });
};
var applicativeLazy = new Prelude.Applicative(function () {
    return applyLazy;
}, function (a) {
    return $foreign.defer(function (v) {
        return a;
    });
});
var monadLazy = new Prelude.Monad(function () {
    return applicativeLazy;
}, function () {
    return bindLazy;
});
module.exports = {
    semiringLazy: semiringLazy, 
    ringLazy: ringLazy, 
    moduloSemiringLazy: moduloSemiringLazy, 
    divisionRingLazy: divisionRingLazy, 
    numLazy: numLazy, 
    eqLazy: eqLazy, 
    ordLazy: ordLazy, 
    boundedLazy: boundedLazy, 
    boundedOrdLazy: boundedOrdLazy, 
    semigroupLazy: semigroupLazy, 
    monoidLazy: monoidLazy, 
    booleanAlgebraLazy: booleanAlgebraLazy, 
    functorLazy: functorLazy, 
    applyLazy: applyLazy, 
    applicativeLazy: applicativeLazy, 
    bindLazy: bindLazy, 
    monadLazy: monadLazy, 
    extendLazy: extendLazy, 
    comonadLazy: comonadLazy, 
    showLazy: showLazy, 
    lazyLazy: lazyLazy, 
    force: $foreign.force, 
    defer: $foreign.defer
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Lazy/foreign.js","Control.Comonad":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Control.Lazy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Lazy/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.List.Lazy/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Control_Lazy = require("Control.Lazy");
var Data_Foldable = require("Data.Foldable");
var Data_Lazy = require("Data.Lazy");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Data_Unfoldable = require("Data.Unfoldable");
var List = function (x) {
    return x;
};
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var runList = function (v) {
    return v;
};
var step = function ($228) {
    return Data_Lazy.force(runList($228));
};
var semigroupList = new Prelude.Semigroup(function (xs) {
    return function (ys) {
        var go = function (v) {
            if (v instanceof Nil) {
                return step(ys);
            };
            if (v instanceof Cons) {
                return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 703, column 5 - line 704, column 5: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
});
var showList = function (dictShow) {
    return new Prelude.Show(function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return "Nil";
            };
            if (v instanceof Cons) {
                return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (go(step(v.value1)) + ")")));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 673, column 3 - line 678, column 1: " + [ v.constructor.name ]);
        };
        return "fromStrict (" + (go(step(xs)) + ")");
    });
};
var uncons = function (xs) {
    var $73 = step(xs);
    if ($73 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if ($73 instanceof Cons) {
        return new Data_Maybe.Just({
            head: $73.value0, 
            tail: $73.value1
        });
    };
    throw new Error("Failed pattern match at Data.List.Lazy line 284, column 13 - line 295, column 1: " + [ $73.constructor.name ]);
};
var tail = function (xs) {
    return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
        return v.tail;
    })(uncons(xs));
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var take = function (n) {
    return function (xs) {
        var go = function (v) {
            return function (v1) {
                if (v === 0) {
                    return Nil.value;
                };
                if (v1 instanceof Nil) {
                    return Nil.value;
                };
                if (v1 instanceof Cons) {
                    return new Cons(v1.value0, take(v - 1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 451, column 3 - line 452, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var takeWhile = function (p) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Cons && p(v.value0)) {
                return new Cons(v.value0, takeWhile(p)(v.value1));
            };
            return Nil.value;
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var updateAt = function (n) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v === 0 && v1 instanceof Cons) {
                        return new Cons(x, v1.value1);
                    };
                    if (v1 instanceof Cons) {
                        return new Cons(v1.value0, updateAt(v - 1)(x)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 346, column 3 - line 347, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (v) {
                return function (v1) {
                    if (v instanceof Nil) {
                        return Nil.value;
                    };
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v instanceof Cons && v1 instanceof Cons) {
                        return new Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 618, column 3 - line 619, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Prelude["<*>"](Data_Lazy.applyLazy)(Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs)))(runList(ys));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var $$null = function ($229) {
    return Data_Maybe.isNothing(uncons($229));
};
var nil = List(Data_Lazy.defer(function (v) {
    return Nil.value;
}));
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, nil);
var mapMaybe = function (f) {
    return function (xs) {
        var go = function (__copy_v) {
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return Nil.value;
                };
                if (v instanceof Cons) {
                    var $97 = f(v.value0);
                    if ($97 instanceof Data_Maybe.Nothing) {
                        var __tco_v = step(v.value1);
                        v = __tco_v;
                        continue tco;
                    };
                    if ($97 instanceof Data_Maybe.Just) {
                        return new Cons($97.value0, mapMaybe(f)(v.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 427, column 5 - line 433, column 1: " + [ $97.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 423, column 1 - line 433, column 1: " + [ v.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var length = function (xs) {
    var go = function (v) {
        if (v instanceof Nil) {
            return 0;
        };
        if (v instanceof Cons) {
            return 1 + go(step(v.value1)) | 0;
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 199, column 1 - line 211, column 1: " + [ v.constructor.name ]);
    };
    return go(step(xs));
};
var lazyList = new Control_Lazy.Lazy(function (f) {
    return List(Data_Lazy.defer(function ($230) {
        return step(f($230));
    }));
});
var last = function (xs) {
    var go = function (__copy_v) {
        var v = __copy_v;
        tco: while (true) {
            if (v instanceof Cons) {
                if ($$null(v.value1)) {
                    return new Data_Maybe.Just(v.value0);
                };
                if (Prelude.otherwise) {
                    var __tco_v = step(v.value1);
                    v = __tco_v;
                    continue tco;
                };
            };
            return Data_Maybe.Nothing.value;
        };
    };
    return go(step(xs));
};
var index = function (xs) {
    var go = function (__copy_v) {
        return function (__copy_v1) {
            var v = __copy_v;
            var v1 = __copy_v1;
            tco: while (true) {
                if (v instanceof Nil) {
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Cons && v1 === 0) {
                    return new Data_Maybe.Just(v.value0);
                };
                if (v instanceof Cons) {
                    var __tco_v = step(v.value1);
                    var __tco_v1 = v1 - 1;
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 296, column 1 - line 302, column 1: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
    return go(step(xs));
};
var $bang$bang = index;
var head = function (xs) {
    return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
        return v.head;
    })(uncons(xs));
};
var functorList = new Prelude.Functor(function (f) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return new Cons(f(v.value0), Prelude["<$>"](functorList)(f)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 712, column 5 - line 713, column 5: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
});
var fromStep = function ($231) {
    return List(Prelude.pure(Data_Lazy.applicativeLazy)($231));
};
var insertBy = function (cmp) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (v instanceof Cons) {
                    var $117 = cmp(x)(v.value0);
                    if ($117 instanceof Prelude.GT) {
                        return new Cons(v.value0, insertBy(cmp)(x)(v.value1));
                    };
                    return new Cons(x, fromStep(v));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 236, column 3 - line 237, column 3: " + [ v.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Prelude.compare(dictOrd));
};
var fromList = function (dictUnfoldable) {
    return toUnfoldable(dictUnfoldable);
};
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v instanceof Cons) {
                    return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(Data_Foldable.foldMap(foldableList)(dictMonoid)(f)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 731, column 5 - line 732, column 5: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return b;
                };
                if (v instanceof Cons) {
                    return Data_Foldable.foldl(foldableList)(o)(o(b)(v.value0))(v.value1);
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 725, column 5 - line 726, column 5: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return b;
                };
                if (v instanceof Cons) {
                    return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 719, column 5 - line 720, column 5: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});
var filter = function (p) {
    return function (xs) {
        var go = function (__copy_v) {
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return Nil.value;
                };
                if (v instanceof Cons) {
                    if (p(v.value0)) {
                        return new Cons(v.value0, filter(p)(v.value1));
                    };
                    if (Prelude.otherwise) {
                        var __tco_v = step(v.value1);
                        v = __tco_v;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 411, column 1 - line 422, column 1: " + [ v.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(ys);
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Prelude["=="](dictEq));
};
var nubBy = function (eq) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return new Cons(v.value0, nubBy(eq)(filter(function (y) {
                    return !eq(v.value0)(y);
                })(v.value1)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 544, column 3 - line 545, column 3: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var nub = function (dictEq) {
    return nubBy(Prelude.eq(dictEq));
};
var eqList = function (dictEq) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    tco: while (true) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            return true;
                        };
                        if (v instanceof Cons && (v1 instanceof Cons && Prelude["=="](dictEq)(v.value0)(v1.value0))) {
                            var __tco_v = step(v.value1);
                            var __tco_v1 = step(v1.value1);
                            v = __tco_v;
                            v1 = __tco_v1;
                            continue tco;
                        };
                        return false;
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};
var ordList = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqList(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    tco: while (true) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            return Prelude.EQ.value;
                        };
                        if (v instanceof Nil) {
                            return Prelude.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            return Prelude.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var $143 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                            if ($143 instanceof Prelude.EQ) {
                                var __tco_v = step(v.value1);
                                var __tco_v1 = step(v1.value1);
                                v = __tco_v;
                                v1 = __tco_v1;
                                continue tco;
                            };
                            return $143;
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy line 687, column 3 - line 697, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};
var dropWhile = function (p) {
    return function (xs) {
        var go = function (__copy_v) {
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Cons && p(v.value0)) {
                    var __tco_v = step(v.value1);
                    v = __tco_v;
                    continue tco;
                };
                return fromStep(v);
            };
        };
        return go(step(xs));
    };
};
var drop = function (n) {
    return function (xs) {
        var go = function (__copy_v) {
            return function (__copy_v1) {
                var v = __copy_v;
                var v1 = __copy_v1;
                tco: while (true) {
                    if (v === 0) {
                        return v1;
                    };
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v1 instanceof Cons) {
                        var __tco_v = v - 1;
                        var __tco_v1 = step(v1.value1);
                        v = __tco_v;
                        v1 = __tco_v1;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 468, column 1 - line 477, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return Nil.value;
                };
                if (v instanceof Cons) {
                    if (eq(x)(v.value0)) {
                        return step(v.value1);
                    };
                    if (Prelude.otherwise) {
                        return new Cons(v.value0, deleteBy(eq)(x)(v.value1));
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 573, column 3 - line 574, column 3: " + [ v.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Prelude["=="](dictEq));
};
var deleteAt = function (n) {
    return function (xs) {
        var go = function (v) {
            return function (v1) {
                if (v1 instanceof Nil) {
                    return Nil.value;
                };
                if (v === 0 && v1 instanceof Cons) {
                    return step(v1.value1);
                };
                if (v1 instanceof Cons) {
                    return new Cons(v1.value0, deleteAt(v - 1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 332, column 3 - line 333, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Prelude["=="](dictEq));
};
var $bslash$bslash = function (dictEq) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(dictEq)));
};
var cycle = function (xs) {
    return Control_Lazy.fix(lazyList)(function (ys) {
        return Prelude["<>"](semigroupList)(xs)(ys);
    });
};
var cons = function (x) {
    return function (xs) {
        return List(Data_Lazy.defer(function (v) {
            return new Cons(x, xs);
        }));
    };
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(cons)(nil);
};
var toList = function (dictFoldable) {
    return fromFoldable(dictFoldable);
};
var init = function (xs) {
    var go = function (v) {
        if (v instanceof Cons) {
            if ($$null(v.value1)) {
                return new Data_Maybe.Just(nil);
            };
            if (Prelude.otherwise) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(cons(v.value0))(go(step(v.value1)));
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return go(step(xs));
};
var insertAt = function (v) {
    return function (x) {
        return function (xs) {
            if (v === 0) {
                return cons(x)(xs);
            };
            var go = function (v1) {
                if (v1 instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (v1 instanceof Cons) {
                    return new Cons(v1.value0, insertAt(v - 1)(x)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 319, column 3 - line 320, column 3: " + [ v1.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var iterate = function (f) {
    return function (x) {
        return Control_Lazy.fix(lazyList)(function (xs) {
            return cons(x)(Prelude["<$>"](functorList)(f)(xs));
        });
    };
};
var repeat = function (x) {
    return Control_Lazy.fix(lazyList)(function (xs) {
        return cons(x)(xs);
    });
};
var reverse = function (xs) {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var acc = __copy_acc;
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return acc;
                };
                if (v instanceof Cons) {
                    var __tco_acc = cons(v.value0)(acc);
                    var __tco_v = step(v.value1);
                    acc = __tco_acc;
                    v = __tco_v;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 386, column 1 - line 394, column 1: " + [ acc.constructor.name, v.constructor.name ]);
            };
        };
    };
    return go(nil)(step(xs));
};
var singleton = function (a) {
    return cons(a)(nil);
};
var range = function (start) {
    return function (end) {
        if (start === end) {
            return singleton(start);
        };
        if (Prelude.otherwise) {
            var go = function (__copy_s) {
                return function (__copy_e) {
                    return function (__copy_step$prime) {
                        return function (__copy_rest) {
                            var s = __copy_s;
                            var e = __copy_e;
                            var step$prime = __copy_step$prime;
                            var rest = __copy_rest;
                            tco: while (true) {
                                if (s === e) {
                                    return cons(s)(rest);
                                };
                                if (Prelude.otherwise) {
                                    var __tco_s = s + step$prime | 0;
                                    var __tco_e = e;
                                    var __tco_step$prime = step$prime;
                                    var __tco_rest = cons(s)(rest);
                                    s = __tco_s;
                                    e = __tco_e;
                                    step$prime = __tco_step$prime;
                                    rest = __tco_rest;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at Data.List.Lazy line 167, column 1 - line 174, column 1: " + [ s.constructor.name, e.constructor.name, step$prime.constructor.name, rest.constructor.name ]);
                            };
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var $184 = start > end;
                if ($184) {
                    return 1;
                };
                if (!$184) {
                    return -1;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 168, column 45 - line 168, column 74: " + [ $184.constructor.name ]);
            })())(nil);
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 167, column 1 - line 174, column 1: " + [ start.constructor.name, end.constructor.name ]);
    };
};
var $dot$dot = range;
var span = function (p) {
    return function (xs) {
        var $185 = uncons(xs);
        if ($185 instanceof Data_Maybe.Just && p($185.value0.head)) {
            var $186 = span(p)($185.value0.tail);
            return {
                init: cons($185.value0.head)($186.init), 
                rest: $186.rest
            };
        };
        return {
            init: nil, 
            rest: xs
        };
    };
};
var groupBy = function (eq) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                var $193 = span(eq(v.value0))(v.value1);
                return new Cons(cons(v.value0)($193.init), groupBy(eq)($193.rest));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 522, column 3 - line 523, column 3: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var group = function (dictEq) {
    return groupBy(Prelude["=="](dictEq));
};
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Prelude.pure(dictApplicative)(nil);
            };
            if (v instanceof Cons) {
                return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 752, column 5 - line 753, column 5: " + [ v.constructor.name ]);
        };
        return go(step(xs));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return Prelude.pure(dictApplicative)(nil);
                };
                if (v instanceof Cons) {
                    return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 746, column 5 - line 747, column 5: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});
var $colon = cons;
var transpose = function (xs) {
    var $204 = uncons(xs);
    if ($204 instanceof Data_Maybe.Nothing) {
        return xs;
    };
    if ($204 instanceof Data_Maybe.Just) {
        var $205 = uncons($204.value0.head);
        if ($205 instanceof Data_Maybe.Nothing) {
            return transpose($204.value0.tail);
        };
        if ($205 instanceof Data_Maybe.Just) {
            return $colon($colon($205.value0.head)(mapMaybe(head)($204.value0.tail)))(transpose($colon($205.value0.tail)(mapMaybe(tail)($204.value0.tail))));
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 648, column 7 - line 660, column 1: " + [ $205.constructor.name ]);
    };
    throw new Error("Failed pattern match at Data.List.Lazy line 644, column 3 - line 660, column 1: " + [ $204.constructor.name ]);
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return nil;
            };
            if (v instanceof Data_Maybe.Just) {
                return $colon(v.value0.value0)(Control_Lazy.defer(lazyList)(function (v1) {
                    return go(f(v.value0.value1));
                }));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 736, column 3 - line 742, column 1: " + [ v.constructor.name ]);
        };
        return go(f(b));
    };
});
var concatMap = function (f) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return step(Prelude["<>"](semigroupList)(f(v.value0))(concatMap(f)(v.value1)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 404, column 3 - line 405, column 3: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var bindList = new Prelude.Bind(function () {
    return applyList;
}, Prelude.flip(concatMap));
var applyList = new Prelude.Apply(function () {
    return functorList;
}, Prelude.ap(monadList));
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, singleton);
var concat = function (v) {
    return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
};
var alterAt = function (n) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v === 0 && v1 instanceof Cons) {
                        var $222 = f(v1.value0);
                        if ($222 instanceof Data_Maybe.Nothing) {
                            return step(v1.value1);
                        };
                        if ($222 instanceof Data_Maybe.Just) {
                            return new Cons($222.value0, v1.value1);
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy line 373, column 22 - line 376, column 3: " + [ $222.constructor.name ]);
                    };
                    if (v1 instanceof Cons) {
                        return new Cons(v1.value0, alterAt(v - 1)(f)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 372, column 3 - line 373, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($232) {
            return Data_Maybe.Just.create(f($232));
        });
    };
};
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Prelude.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    List: List, 
    fromList: fromList, 
    toList: toList, 
    transpose: transpose, 
    zip: zip, 
    zipWith: zipWith, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filter: filter, 
    concatMap: concatMap, 
    concat: concat, 
    reverse: reverse, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    cons: cons, 
    ":": $colon, 
    length: length, 
    "null": $$null, 
    cycle: cycle, 
    iterate: iterate, 
    repeat: repeat, 
    range: range, 
    "..": $dot$dot, 
    singleton: singleton, 
    nil: nil, 
    step: step, 
    fromFoldable: fromFoldable, 
    toUnfoldable: toUnfoldable, 
    runList: runList, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    lazyList: lazyList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};

},{"Control.Alt":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alt/index.js","Control.Alternative":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alternative/index.js","Control.Lazy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Lazy/index.js","Control.MonadPlus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.MonadPlus/index.js","Control.Plus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Plus/index.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.Lazy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Lazy/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Data.Traversable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/index.js","Data.Tuple":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Tuple/index.js","Data.Unfoldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Unfoldable/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.List/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Lazy = require("Control.Lazy");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Data_Unfoldable = require("Data.Unfoldable");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var $colon = Cons.create;
var updateAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Cons) {
                return new Data_Maybe.Just(new Cons(v1, v2.value1));
            };
            if (v2 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v2.value0))(updateAt(v - 1)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var uncons = function (v) {
    if (v instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Cons) {
        return new Data_Maybe.Just({
            head: v.value0, 
            tail: v.value1
        });
    };
    throw new Error("Failed pattern match at Data.List line 273, column 1 - line 274, column 1: " + [ v.constructor.name ]);
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var tail = function (v) {
    if (v instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Cons) {
        return new Data_Maybe.Just(v.value1);
    };
    throw new Error("Failed pattern match at Data.List line 254, column 1 - line 255, column 1: " + [ v.constructor.name ]);
};
var span = function (v) {
    return function (v1) {
        if (v1 instanceof Cons && v(v1.value0)) {
            var $133 = span(v)(v1.value1);
            return {
                init: new Cons(v1.value0, $133.init), 
                rest: $133.rest
            };
        };
        return {
            init: Nil.value, 
            rest: v1
        };
    };
};
var singleton = function (a) {
    return new Cons(a, Nil.value);
};
var sortBy = function (cmp) {
    var merge = function (v) {
        return function (v1) {
            if (v instanceof Cons && v1 instanceof Cons) {
                if (Prelude["=="](Prelude.eqOrdering)(cmp(v.value0)(v1.value0))(Prelude.GT.value)) {
                    return new Cons(v1.value0, merge(v)(v1.value1));
                };
                if (Prelude.otherwise) {
                    return new Cons(v.value0, merge(v.value1)(v1));
                };
            };
            if (v instanceof Nil) {
                return v1;
            };
            if (v1 instanceof Nil) {
                return v;
            };
            throw new Error("Failed pattern match at Data.List line 475, column 3 - line 478, column 3: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    var mergePairs = function (v) {
        if (v instanceof Cons && v.value1 instanceof Cons) {
            return new Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
        };
        return v;
    };
    var mergeAll = function (__copy_v) {
        var v = __copy_v;
        tco: while (true) {
            if (v instanceof Cons && v.value1 instanceof Nil) {
                return v.value0;
            };
            var __tco_v = mergePairs(v);
            v = __tco_v;
            continue tco;
        };
    };
    var sequences = function (v) {
        if (v instanceof Cons && v.value1 instanceof Cons) {
            if (Prelude["=="](Prelude.eqOrdering)(cmp(v.value0)(v.value1.value0))(Prelude.GT.value)) {
                return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
            };
            if (Prelude.otherwise) {
                return ascending(v.value1.value0)(Cons.create(v.value0))(v.value1.value1);
            };
        };
        return singleton(v);
    };
    var descending = function (__copy_a) {
        return function (__copy_as) {
            return function (__copy_v) {
                var a = __copy_a;
                var as = __copy_as;
                var v = __copy_v;
                tco: while (true) {
                    if (v instanceof Cons && Prelude["=="](Prelude.eqOrdering)(cmp(a)(v.value0))(Prelude.GT.value)) {
                        var __tco_a = v.value0;
                        var __tco_as = new Cons(a, as);
                        var __tco_v = v.value1;
                        a = __tco_a;
                        as = __tco_as;
                        v = __tco_v;
                        continue tco;
                    };
                    return new Cons(new Cons(a, as), sequences(v));
                };
            };
        };
    };
    var ascending = function (a) {
        return function (as) {
            return function (v) {
                if (v instanceof Cons && Prelude["/="](Prelude.eqOrdering)(cmp(a)(v.value0))(Prelude.GT.value)) {
                    return ascending(v.value0)(function (ys) {
                        return as(new Cons(a, ys));
                    })(v.value1);
                };
                return new Cons(as(singleton(a)), sequences(v));
            };
        };
    };
    return function ($371) {
        return mergeAll(sequences($371));
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Prelude.compare(dictOrd))(xs);
    };
};
var showList = function (dictShow) {
    return new Prelude.Show(function (v) {
        if (v instanceof Nil) {
            return "Nil";
        };
        if (v instanceof Cons) {
            return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(showList(dictShow))(v.value1) + ")")));
        };
        throw new Error("Failed pattern match at Data.List line 727, column 3 - line 728, column 3: " + [ v.constructor.name ]);
    });
};
var semigroupList = new Prelude.Semigroup(function (v) {
    return function (ys) {
        if (v instanceof Nil) {
            return ys;
        };
        if (v instanceof Cons) {
            return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
        };
        throw new Error("Failed pattern match at Data.List line 751, column 3 - line 752, column 3: " + [ v.constructor.name, ys.constructor.name ]);
    };
});
var reverse = (function () {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var acc = __copy_acc;
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return acc;
                };
                if (v instanceof Cons) {
                    var __tco_acc = new Cons(v.value0, acc);
                    var __tco_v = v.value1;
                    acc = __tco_acc;
                    v = __tco_v;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List line 371, column 1 - line 379, column 1: " + [ acc.constructor.name, v.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
})();
var snoc = function (xs) {
    return function (x) {
        return reverse(new Cons(x, reverse(xs)));
    };
};
var take = (function () {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            return function (__copy_v1) {
                var acc = __copy_acc;
                var v = __copy_v;
                var v1 = __copy_v1;
                tco: while (true) {
                    if (v === 0) {
                        return reverse(acc);
                    };
                    if (v1 instanceof Nil) {
                        return reverse(acc);
                    };
                    if (v1 instanceof Cons) {
                        var __tco_acc = new Cons(v1.value0, acc);
                        var __tco_v = v - 1;
                        var __tco_v1 = v1.value1;
                        acc = __tco_acc;
                        v = __tco_v;
                        v1 = __tco_v1;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 493, column 1 - line 502, column 1: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                };
            };
        };
    };
    return go(Nil.value);
})();
var takeWhile = function (p) {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var acc = __copy_acc;
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Cons && p(v.value0)) {
                    var __tco_acc = new Cons(v.value0, acc);
                    var __tco_v = v.value1;
                    acc = __tco_acc;
                    v = __tco_v;
                    continue tco;
                };
                return reverse(acc);
            };
        };
    };
    return go(Nil.value);
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (__copy_source) {
            return function (__copy_memo) {
                var source = __copy_source;
                var memo = __copy_memo;
                tco: while (true) {
                    var $187 = f(source);
                    if ($187 instanceof Data_Maybe.Nothing) {
                        return reverse(memo);
                    };
                    if ($187 instanceof Data_Maybe.Just) {
                        var __tco_memo = new Cons($187.value0.value0, memo);
                        source = $187.value0.value1;
                        memo = __tco_memo;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 777, column 24 - line 781, column 1: " + [ $187.constructor.name ]);
                };
            };
        };
        return go(b)(Nil.value);
    };
});
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    return function (__copy_acc) {
                        var v = __copy_v;
                        var v1 = __copy_v1;
                        var acc = __copy_acc;
                        tco: while (true) {
                            if (v instanceof Nil) {
                                return acc;
                            };
                            if (v1 instanceof Nil) {
                                return acc;
                            };
                            if (v instanceof Cons && v1 instanceof Cons) {
                                var __tco_v = v.value1;
                                var __tco_v1 = v1.value1;
                                var __tco_acc = new Cons(f(v.value0)(v1.value0), acc);
                                v = __tco_v;
                                v1 = __tco_v1;
                                acc = __tco_acc;
                                continue tco;
                            };
                            throw new Error("Failed pattern match at Data.List line 657, column 1 - line 665, column 1: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                        };
                    };
                };
            };
            return reverse(go(xs)(ys)(Nil.value));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var replicateM = function (dictMonad) {
    return function (n) {
        return function (m) {
            if (n < 1) {
                return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Nil.value);
            };
            if (Prelude.otherwise) {
                return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                    return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(replicateM(dictMonad)(n - 1)(m))(function (v1) {
                        return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Cons(v, v1));
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List line 158, column 1 - line 167, column 1: " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};
var replicate = function (n) {
    return function (value) {
        var go = function (__copy_n1) {
            return function (__copy_rest) {
                var n1 = __copy_n1;
                var rest = __copy_rest;
                tco: while (true) {
                    if (n1 <= 0) {
                        return rest;
                    };
                    if (Prelude.otherwise) {
                        var __tco_n1 = n1 - 1;
                        var __tco_rest = new Cons(value, rest);
                        n1 = __tco_n1;
                        rest = __tco_rest;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 151, column 1 - line 157, column 1: " + [ n1.constructor.name, rest.constructor.name ]);
                };
            };
        };
        return go(n)(Nil.value);
    };
};
var range = function (start) {
    return function (end) {
        if (start === end) {
            return singleton(start);
        };
        if (Prelude.otherwise) {
            var go = function (__copy_s) {
                return function (__copy_e) {
                    return function (__copy_step) {
                        return function (__copy_rest) {
                            var s = __copy_s;
                            var e = __copy_e;
                            var step = __copy_step;
                            var rest = __copy_rest;
                            tco: while (true) {
                                if (s === e) {
                                    return new Cons(s, rest);
                                };
                                if (Prelude.otherwise) {
                                    var __tco_s = s + step | 0;
                                    var __tco_e = e;
                                    var __tco_step = step;
                                    var __tco_rest = new Cons(s, rest);
                                    s = __tco_s;
                                    e = __tco_e;
                                    step = __tco_step;
                                    rest = __tco_rest;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at Data.List line 143, column 1 - line 150, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                            };
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var $210 = start > end;
                if ($210) {
                    return 1;
                };
                if (!$210) {
                    return -1;
                };
                throw new Error("Failed pattern match at Data.List line 144, column 45 - line 144, column 74: " + [ $210.constructor.name ]);
            })())(Nil.value);
        };
        throw new Error("Failed pattern match at Data.List line 143, column 1 - line 150, column 1: " + [ start.constructor.name, end.constructor.name ]);
    };
};
var $dot$dot = range;
var $$null = function (v) {
    if (v instanceof Nil) {
        return true;
    };
    return false;
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var mapMaybe = function (f) {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var acc = __copy_acc;
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return reverse(acc);
                };
                if (v instanceof Cons) {
                    var $214 = f(v.value0);
                    if ($214 instanceof Data_Maybe.Nothing) {
                        var __tco_acc = acc;
                        var __tco_v = v.value1;
                        acc = __tco_acc;
                        v = __tco_v;
                        continue tco;
                    };
                    if ($214 instanceof Data_Maybe.Just) {
                        var __tco_acc = new Cons($214.value0, acc);
                        var __tco_v = v.value1;
                        acc = __tco_acc;
                        v = __tco_v;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 427, column 5 - line 433, column 1: " + [ $214.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.List line 423, column 1 - line 433, column 1: " + [ acc.constructor.name, v.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())(Nil.value));
        };
    };
};
var last = function (__copy_v) {
    var v = __copy_v;
    tco: while (true) {
        if (v instanceof Cons && v.value1 instanceof Nil) {
            return new Data_Maybe.Just(v.value0);
        };
        if (v instanceof Cons) {
            var __tco_v = v.value1;
            v = __tco_v;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var insertBy = function (v) {
    return function (x) {
        return function (v1) {
            if (v1 instanceof Nil) {
                return new Cons(x, Nil.value);
            };
            if (v1 instanceof Cons) {
                var $227 = v(x)(v1.value0);
                if ($227 instanceof Prelude.GT) {
                    return new Cons(v1.value0, insertBy(v)(x)(v1.value1));
                };
                return new Cons(x, v1);
            };
            throw new Error("Failed pattern match at Data.List line 225, column 1 - line 226, column 1: " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
        };
    };
};
var insertAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0) {
                return new Data_Maybe.Just(new Cons(v1, v2));
            };
            if (v2 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v2.value0))(insertAt(v - 1)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Prelude.compare(dictOrd));
};
var init = function (v) {
    if (v instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    var go = function (__copy_v1) {
        return function (__copy_acc) {
            var v1 = __copy_v1;
            var acc = __copy_acc;
            tco: while (true) {
                if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                    return acc;
                };
                if (v1 instanceof Cons) {
                    var __tco_v1 = v1.value1;
                    var __tco_acc = new Cons(v1.value0, acc);
                    v1 = __tco_v1;
                    acc = __tco_acc;
                    continue tco;
                };
                return acc;
            };
        };
    };
    return Data_Maybe.Just.create(reverse(go(v)(Nil.value)));
};
var index = function (__copy_v) {
    return function (__copy_v1) {
        var v = __copy_v;
        var v1 = __copy_v1;
        tco: while (true) {
            if (v instanceof Nil) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Cons && v1 === 0) {
                return new Data_Maybe.Just(v.value0);
            };
            if (v instanceof Cons) {
                var __tco_v = v.value1;
                var __tco_v1 = v1 - 1;
                v = __tco_v;
                v1 = __tco_v1;
                continue tco;
            };
            throw new Error("Failed pattern match at Data.List line 284, column 1 - line 285, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var $bang$bang = index;
var head = function (v) {
    if (v instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Cons) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Data.List line 239, column 1 - line 240, column 1: " + [ v.constructor.name ]);
};
var transpose = function (v) {
    if (v instanceof Nil) {
        return Nil.value;
    };
    if (v instanceof Cons && v.value0 instanceof Nil) {
        return transpose(v.value1);
    };
    if (v instanceof Cons && v.value0 instanceof Cons) {
        return $colon($colon(v.value0.value0)(mapMaybe(head)(v.value1)))(transpose($colon(v.value0.value1)(mapMaybe(tail)(v.value1))));
    };
    throw new Error("Failed pattern match at Data.List line 694, column 1 - line 695, column 1: " + [ v.constructor.name ]);
};
var groupBy = function (v) {
    return function (v1) {
        if (v1 instanceof Nil) {
            return Nil.value;
        };
        if (v1 instanceof Cons) {
            var $260 = span(v(v1.value0))(v1.value1);
            return new Cons(new Cons(v1.value0, $260.init), groupBy(v)($260.rest));
        };
        throw new Error("Failed pattern match at Data.List line 567, column 1 - line 568, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var group = function (dictEq) {
    return groupBy(Prelude["=="](dictEq));
};
var group$prime = function (dictOrd) {
    return function ($372) {
        return group(dictOrd["__superclass_Prelude.Eq_0"]())(sort(dictOrd)($372));
    };
};
var functorList = new Prelude.Functor(function (f) {
    return function (lst) {
        var go = function (__copy_v) {
            return function (__copy_acc) {
                var v = __copy_v;
                var acc = __copy_acc;
                tco: while (true) {
                    if (v instanceof Nil) {
                        return acc;
                    };
                    if (v instanceof Cons) {
                        var __tco_v = v.value1;
                        var __tco_acc = new Cons(f(v.value0), acc);
                        v = __tco_v;
                        acc = __tco_acc;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 758, column 3 - line 764, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                };
            };
        };
        return reverse(go(lst)(Nil.value));
    };
});
var fromList = function (dictUnfoldable) {
    return toUnfoldable(dictUnfoldable);
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
};
var toList = function (dictFoldable) {
    return fromFoldable(dictFoldable);
};
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldl(foldableList)(function (acc) {
            return function ($373) {
                return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($373));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, (function () {
    var go = function (__copy_v) {
        return function (__copy_b) {
            return function (__copy_v1) {
                var v = __copy_v;
                var b = __copy_b;
                var v1 = __copy_v1;
                tco: while (true) {
                    if (v1 instanceof Nil) {
                        return b;
                    };
                    if (v1 instanceof Cons) {
                        var __tco_v = v;
                        var __tco_b = v(b)(v1.value0);
                        var __tco_v1 = v1.value1;
                        v = __tco_v;
                        b = __tco_b;
                        v1 = __tco_v1;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 767, column 3 - line 771, column 3: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                };
            };
        };
    };
    return go;
})(), function (v) {
    return function (b) {
        return function (v1) {
            if (v1 instanceof Nil) {
                return b;
            };
            if (v1 instanceof Cons) {
                return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
            };
            throw new Error("Failed pattern match at Data.List line 765, column 3 - line 766, column 3: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
        };
    };
});
var length = Data_Foldable.foldl(foldableList)(function (acc) {
    return function (v) {
        return acc + 1 | 0;
    };
})(0);
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Nil) {
            return Prelude.pure(dictApplicative)(Nil.value);
        };
        if (v instanceof Cons) {
            return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
        };
        throw new Error("Failed pattern match at Data.List line 784, column 3 - line 785, column 3: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Nil) {
                return Prelude.pure(dictApplicative)(Nil.value);
            };
            if (v1 instanceof Cons) {
                return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v(v1.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(v)(v1.value1));
            };
            throw new Error("Failed pattern match at Data.List line 782, column 3 - line 783, column 3: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var unzip = Data_Foldable.foldr(foldableList)(function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(new Cons(v.value0, v1.value0), new Cons(v.value1, v1.value1));
    };
})(new Data_Tuple.Tuple(Nil.value, Nil.value));
var foldM = function (dictMonad) {
    return function (v) {
        return function (a) {
            return function (v1) {
                if (v1 instanceof Nil) {
                    return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
                };
                if (v1 instanceof Cons) {
                    return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(v(a)(v1.value0))(function (a$prime) {
                        return foldM(dictMonad)(v)(a$prime)(v1.value1);
                    });
                };
                throw new Error("Failed pattern match at Data.List line 705, column 1 - line 706, column 1: " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function (__copy_v) {
        return function (__copy_v1) {
            var v = __copy_v;
            var v1 = __copy_v1;
            tco: while (true) {
                if (v1 instanceof Cons) {
                    if (fn(v1.value0)) {
                        return new Data_Maybe.Just(v);
                    };
                    if (Prelude.otherwise) {
                        var __tco_v = v + 1 | 0;
                        var __tco_v1 = v1.value1;
                        v = __tco_v;
                        v1 = __tco_v1;
                        continue tco;
                    };
                };
                if (v1 instanceof Nil) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List line 307, column 3 - line 309, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude["-"](Prelude.ringInt)(length(xs) - 1))(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Nil) {
                return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Nil.value);
            };
            if (v1 instanceof Cons) {
                return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(v(v1.value0))(function (v2) {
                    return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(filterM(dictMonad)(v)(v1.value1))(function (v3) {
                        return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                            if (v2) {
                                return new Cons(v1.value0, v3);
                            };
                            if (!v2) {
                                return v3;
                            };
                            throw new Error("Failed pattern match at Data.List line 414, column 3 - line 422, column 1: " + [ v2.constructor.name ]);
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List line 410, column 1 - line 411, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var acc = __copy_acc;
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return reverse(acc);
                };
                if (v instanceof Cons) {
                    if (p(v.value0)) {
                        var __tco_acc = new Cons(v.value0, acc);
                        var __tco_v = v.value1;
                        acc = __tco_acc;
                        v = __tco_v;
                        continue tco;
                    };
                    if (Prelude.otherwise) {
                        var __tco_acc = acc;
                        var __tco_v = v.value1;
                        acc = __tco_acc;
                        v = __tco_v;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match at Data.List line 394, column 1 - line 409, column 1: " + [ acc.constructor.name, v.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
};
var intersectBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Nil) {
                return Nil.value;
            };
            if (v2 instanceof Nil) {
                return Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(v(x))(v2);
            })(v1);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Prelude["=="](dictEq));
};
var nubBy = function (v) {
    return function (v1) {
        if (v1 instanceof Nil) {
            return Nil.value;
        };
        if (v1 instanceof Cons) {
            return new Cons(v1.value0, nubBy(v)(filter(function (y) {
                return !v(v1.value0)(y);
            })(v1.value1)));
        };
        throw new Error("Failed pattern match at Data.List line 586, column 1 - line 587, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var nub = function (dictEq) {
    return nubBy(Prelude.eq(dictEq));
};
var eqList = function (dictEq) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    return function (__copy_v2) {
                        var v = __copy_v;
                        var v1 = __copy_v1;
                        var v2 = __copy_v2;
                        tco: while (true) {
                            if (!v2) {
                                return false;
                            };
                            if (v instanceof Nil && v1 instanceof Nil) {
                                return v2;
                            };
                            if (v instanceof Cons && v1 instanceof Cons) {
                                var __tco_v = v.value1;
                                var __tco_v1 = v1.value1;
                                var __tco_v2 = v2 && Prelude["=="](dictEq)(v1.value0)(v.value0);
                                v = __tco_v;
                                v1 = __tco_v1;
                                v2 = __tco_v2;
                                continue tco;
                            };
                            return false;
                        };
                    };
                };
            };
            return go(xs)(ys)(true);
        };
    });
};
var ordList = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqList(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    tco: while (true) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            return Prelude.EQ.value;
                        };
                        if (v instanceof Nil) {
                            return Prelude.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            return Prelude.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var $329 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                            if ($329 instanceof Prelude.EQ) {
                                var __tco_v = v.value1;
                                var __tco_v1 = v1.value1;
                                v = __tco_v;
                                v1 = __tco_v1;
                                continue tco;
                            };
                            return $329;
                        };
                        throw new Error("Failed pattern match at Data.List line 740, column 3 - line 750, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                    };
                };
            };
            return go(xs)(ys);
        };
    });
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Prelude["=="](dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Prelude["=="](dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function (__copy_v) {
        var v = __copy_v;
        tco: while (true) {
            if (v instanceof Cons && p(v.value0)) {
                var __tco_v = v.value1;
                v = __tco_v;
                continue tco;
            };
            return v;
        };
    };
    return go;
};
var drop = function (__copy_v) {
    return function (__copy_v1) {
        var v = __copy_v;
        var v1 = __copy_v1;
        tco: while (true) {
            if (v === 0) {
                return v1;
            };
            if (v1 instanceof Nil) {
                return Nil.value;
            };
            if (v1 instanceof Cons) {
                var __tco_v = v - 1;
                var __tco_v1 = v1.value1;
                v = __tco_v;
                v1 = __tco_v1;
                continue tco;
            };
            throw new Error("Failed pattern match at Data.List line 512, column 1 - line 513, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start)(drop(start)(xs));
        };
    };
};
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nil) {
                return Nil.value;
            };
            if (v2 instanceof Cons && v(v1)(v2.value0)) {
                return v2.value1;
            };
            if (v2 instanceof Cons) {
                return new Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
            };
            throw new Error("Failed pattern match at Data.List line 613, column 1 - line 614, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Prelude["=="](dictEq));
};
var deleteAt = function (v) {
    return function (v1) {
        if (v === 0 && v1 instanceof Cons) {
            return new Data_Maybe.Just(v1.value1);
        };
        if (v1 instanceof Cons) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(deleteAt(v - 1)(v1.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Prelude["=="](dictEq));
};
var $bslash$bslash = function (dictEq) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(dictEq)));
};
var concatMap = function (v) {
    return function (v1) {
        if (v1 instanceof Nil) {
            return Nil.value;
        };
        if (v1 instanceof Cons) {
            return Prelude["<>"](semigroupList)(v(v1.value0))(concatMap(v)(v1.value1));
        };
        throw new Error("Failed pattern match at Data.List line 387, column 1 - line 388, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var applyList = new Prelude.Apply(function () {
    return functorList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(v1))(Prelude["<*>"](applyList)(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.List line 788, column 3 - line 789, column 3: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindList = new Prelude.Bind(function () {
    return applyList;
}, Prelude.flip(concatMap));
var concat = function (v) {
    return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
};
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var alterAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Cons) {
                return Data_Maybe.Just.create((function () {
                    var $365 = v1(v2.value0);
                    if ($365 instanceof Data_Maybe.Nothing) {
                        return v2.value1;
                    };
                    if ($365 instanceof Data_Maybe.Just) {
                        return new Cons($365.value0, v2.value1);
                    };
                    throw new Error("Failed pattern match at Data.List line 356, column 27 - line 360, column 1: " + [ $365.constructor.name ]);
                })());
            };
            if (v2 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v2.value0))(alterAt(v - 1)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($374) {
            return Data_Maybe.Just.create(f($374));
        });
    };
};
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Prelude.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    fromList: fromList, 
    toList: toList, 
    foldM: foldM, 
    transpose: transpose, 
    unzip: unzip, 
    zip: zip, 
    zipWithA: zipWithA, 
    zipWith: zipWith, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    slice: slice, 
    sortBy: sortBy, 
    sort: sort, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filterM: filterM, 
    filter: filter, 
    concatMap: concatMap, 
    concat: concat, 
    reverse: reverse, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    snoc: snoc, 
    ":": $colon, 
    length: length, 
    "null": $$null, 
    many: many, 
    some: some, 
    replicateM: replicateM, 
    replicate: replicate, 
    range: range, 
    "..": $dot$dot, 
    singleton: singleton, 
    fromFoldable: fromFoldable, 
    toUnfoldable: toUnfoldable, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};

},{"Control.Alt":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alt/index.js","Control.Alternative":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alternative/index.js","Control.Lazy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Lazy/index.js","Control.MonadPlus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.MonadPlus/index.js","Control.Plus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Plus/index.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Data.Traversable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/index.js","Data.Tuple":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Tuple/index.js","Data.Unfoldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Unfoldable/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.First/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "First (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupFirst = new Prelude.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just) {
            return v;
        };
        return v1;
    };
});
var runFirst = function (v) {
    return v;
};
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var functorFirst = new Prelude.Functor(function (f) {
    return function (v) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
    };
});
var invariantFirst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorFirst));
var extendFirst = new Control_Extend.Extend(function () {
    return functorFirst;
}, function (f) {
    return function (v) {
        return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($34) {
            return f(First($34));
        })(v);
    };
});
var eqFirst = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
        };
    });
};
var ordFirst = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqFirst(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
        };
    });
};
var boundedFirst = function (dictBounded) {
    return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
};
var applyFirst = new Prelude.Apply(function () {
    return functorFirst;
}, function (v) {
    return function (v1) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
    };
});
var bindFirst = new Prelude.Bind(function () {
    return applyFirst;
}, function (v) {
    return function (f) {
        return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($35) {
            return runFirst(f($35));
        });
    };
});
var applicativeFirst = new Prelude.Applicative(function () {
    return applyFirst;
}, function ($36) {
    return First(Prelude.pure(Data_Maybe.applicativeMaybe)($36));
});
var monadFirst = new Prelude.Monad(function () {
    return applicativeFirst;
}, function () {
    return bindFirst;
});
module.exports = {
    First: First, 
    runFirst: runFirst, 
    eqFirst: eqFirst, 
    ordFirst: ordFirst, 
    boundedFirst: boundedFirst, 
    functorFirst: functorFirst, 
    applyFirst: applyFirst, 
    applicativeFirst: applicativeFirst, 
    bindFirst: bindFirst, 
    monadFirst: monadFirst, 
    extendFirst: extendFirst, 
    invariantFirst: invariantFirst, 
    showFirst: showFirst, 
    semigroupFirst: semigroupFirst, 
    monoidFirst: monoidFirst
};

},{"Control.Comonad":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.Last/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Last = function (x) {
    return x;
};
var showLast = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Last (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupLast = new Prelude.Semigroup(function (v) {
    return function (v1) {
        if (v1 instanceof Data_Maybe.Just) {
            return v1;
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return v;
        };
        throw new Error("Failed pattern match at Data.Maybe.Last line 58, column 3 - line 59, column 3: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var runLast = function (v) {
    return v;
};
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var functorLast = new Prelude.Functor(function (f) {
    return function (v) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
    };
});
var invariantLast = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLast));
var extendLast = new Control_Extend.Extend(function () {
    return functorLast;
}, function (f) {
    return function (v) {
        return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($34) {
            return f(Last($34));
        })(v);
    };
});
var eqLast = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
        };
    });
};
var ordLast = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqLast(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
        };
    });
};
var boundedLast = function (dictBounded) {
    return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
};
var applyLast = new Prelude.Apply(function () {
    return functorLast;
}, function (v) {
    return function (v1) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
    };
});
var bindLast = new Prelude.Bind(function () {
    return applyLast;
}, function (v) {
    return function (f) {
        return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($35) {
            return runLast(f($35));
        });
    };
});
var applicativeLast = new Prelude.Applicative(function () {
    return applyLast;
}, function ($36) {
    return Last(Prelude.pure(Data_Maybe.applicativeMaybe)($36));
});
var monadLast = new Prelude.Monad(function () {
    return applicativeLast;
}, function () {
    return bindLast;
});
module.exports = {
    Last: Last, 
    runLast: runLast, 
    eqLast: eqLast, 
    ordLast: ordLast, 
    boundedLast: boundedLast, 
    functorLast: functorLast, 
    applyLast: applyLast, 
    applicativeLast: applicativeLast, 
    bindLast: bindLast, 
    monadLast: monadLast, 
    extendLast: extendLast, 
    invariantLast: invariantLast, 
    showLast: showLast, 
    semigroupLast: semigroupLast, 
    monoidLast: monoidLast
};

},{"Control.Comonad":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.Unsafe/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Maybe.Unsafe

exports.unsafeThrow = function (msg) {
  throw new Error(msg);
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.Unsafe/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var fromJust = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
    };
    throw new Error("Failed pattern match at Data.Maybe.Unsafe line 11, column 1 - line 12, column 1: " + [ v.constructor.name ]);
};
module.exports = {
    fromJust: fromJust, 
    unsafeThrow: $foreign.unsafeThrow
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.Unsafe/foreign.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Extend = require("Control.Extend");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();
var showMaybe = function (dictShow) {
    return new Prelude.Show(function (v) {
        if (v instanceof Just) {
            return "Just (" + (Prelude.show(dictShow)(v.value0) + ")");
        };
        if (v instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match at Data.Maybe line 290, column 3 - line 291, column 3: " + [ v.constructor.name ]);
    });
};
var semigroupMaybe = function (dictSemigroup) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            if (v instanceof Nothing) {
                return v1;
            };
            if (v1 instanceof Nothing) {
                return v;
            };
            if (v instanceof Just && v1 instanceof Just) {
                return new Just(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Maybe line 232, column 3 - line 233, column 3: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var monoidMaybe = function (dictSemigroup) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMaybe(dictSemigroup);
    }, Nothing.value);
};
var maybe$prime = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v(Prelude.unit);
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe line 40, column 1 - line 41, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var maybe = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v;
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe line 27, column 1 - line 28, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Just) {
            return new Just(v(v1.value0));
        };
        return Nothing.value;
    };
});
var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
var fromMaybe$prime = function (a) {
    return maybe$prime(a)(Prelude.id(Prelude.categoryFn));
};
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryFn));
};
var extendMaybe = new Control_Extend.Extend(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(v(v1));
    };
});
var eqMaybe = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            if (v instanceof Nothing && v1 instanceof Nothing) {
                return true;
            };
            if (v instanceof Just && v1 instanceof Just) {
                return Prelude["=="](dictEq)(v.value0)(v1.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqMaybe(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            if (v instanceof Just && v1 instanceof Just) {
                return Prelude.compare(dictOrd)(v.value0)(v1.value0);
            };
            if (v instanceof Nothing && v1 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (v instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (v1 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match at Data.Maybe line 270, column 3 - line 271, column 3: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var boundedMaybe = function (dictBounded) {
    return new Prelude.Bounded(Nothing.value, new Just(Prelude.top(dictBounded)));
};
var boundedOrdMaybe = function (dictBoundedOrd) {
    return new Prelude.BoundedOrd(function () {
        return boundedMaybe(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
    }, function () {
        return ordMaybe(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
    });
};
var applyMaybe = new Prelude.Apply(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return Prelude["<$>"](functorMaybe)(v.value0)(v1);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe line 122, column 3 - line 123, column 3: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindMaybe = new Prelude.Bind(function () {
    return applyMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return v1(v.value0);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe line 181, column 3 - line 182, column 3: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var booleanAlgebraMaybe = function (dictBooleanAlgebra) {
    return new Prelude.BooleanAlgebra(function () {
        return boundedMaybe(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.conj(dictBooleanAlgebra))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.disj(dictBooleanAlgebra))(x))(y);
        };
    }, Prelude.map(functorMaybe)(Prelude.not(dictBooleanAlgebra)));
};
var semiringMaybe = function (dictSemiring) {
    return new Prelude.Semiring(function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.add(dictSemiring))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mul(dictSemiring))(x))(y);
        };
    }, new Just(Prelude.one(dictSemiring)), new Just(Prelude.zero(dictSemiring)));
};
var moduloSemiringMaybe = function (dictModuloSemiring) {
    return new Prelude.ModuloSemiring(function () {
        return semiringMaybe(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.div(dictModuloSemiring))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mod(dictModuloSemiring))(x))(y);
        };
    });
};
var ringMaybe = function (dictRing) {
    return new Prelude.Ring(function () {
        return semiringMaybe(dictRing["__superclass_Prelude.Semiring_0"]());
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.sub(dictRing))(x))(y);
        };
    });
};
var divisionRingMaybe = function (dictDivisionRing) {
    return new Prelude.DivisionRing(function () {
        return moduloSemiringMaybe(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
    }, function () {
        return ringMaybe(dictDivisionRing["__superclass_Prelude.Ring_0"]());
    });
};
var numMaybe = function (dictNum) {
    return new Prelude.Num(function () {
        return divisionRingMaybe(dictNum["__superclass_Prelude.DivisionRing_0"]());
    });
};
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Nothing) {
            return v1;
        };
        return v;
    };
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing, 
    Just: Just, 
    isNothing: isNothing, 
    isJust: isJust, 
    "fromMaybe'": fromMaybe$prime, 
    fromMaybe: fromMaybe, 
    "maybe'": maybe$prime, 
    maybe: maybe, 
    functorMaybe: functorMaybe, 
    applyMaybe: applyMaybe, 
    applicativeMaybe: applicativeMaybe, 
    altMaybe: altMaybe, 
    plusMaybe: plusMaybe, 
    alternativeMaybe: alternativeMaybe, 
    bindMaybe: bindMaybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    extendMaybe: extendMaybe, 
    invariantMaybe: invariantMaybe, 
    semigroupMaybe: semigroupMaybe, 
    monoidMaybe: monoidMaybe, 
    semiringMaybe: semiringMaybe, 
    moduloSemiringMaybe: moduloSemiringMaybe, 
    ringMaybe: ringMaybe, 
    divisionRingMaybe: divisionRingMaybe, 
    numMaybe: numMaybe, 
    eqMaybe: eqMaybe, 
    ordMaybe: ordMaybe, 
    boundedMaybe: boundedMaybe, 
    boundedOrdMaybe: boundedOrdMaybe, 
    booleanAlgebraMaybe: booleanAlgebraMaybe, 
    showMaybe: showMaybe
};

},{"Control.Alt":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alt/index.js","Control.Alternative":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Alternative/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Control.MonadPlus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.MonadPlus/index.js","Control.Plus":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Plus/index.js","Data.Functor.Invariant":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Additive/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Additive = function (x) {
    return x;
};
var showAdditive = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Additive (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semigroupAdditive = function (dictSemiring) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude["+"](dictSemiring)(v)(v1);
        };
    });
};
var runAdditive = function (v) {
    return v;
};
var monoidAdditive = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAdditive(dictSemiring);
    }, Prelude.zero(dictSemiring));
};
var invariantAdditive = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorAdditive = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendAdditive = new Control_Extend.Extend(function () {
    return functorAdditive;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqAdditive = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordAdditive = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqAdditive(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadAdditive = new Control_Comonad.Comonad(function () {
    return extendAdditive;
}, runAdditive);
var applyAdditive = new Prelude.Apply(function () {
    return functorAdditive;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindAdditive = new Prelude.Bind(function () {
    return applyAdditive;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeAdditive = new Prelude.Applicative(function () {
    return applyAdditive;
}, Additive);
var monadAdditive = new Prelude.Monad(function () {
    return applicativeAdditive;
}, function () {
    return bindAdditive;
});
module.exports = {
    Additive: Additive, 
    runAdditive: runAdditive, 
    eqAdditive: eqAdditive, 
    ordAdditive: ordAdditive, 
    functorAdditive: functorAdditive, 
    applyAdditive: applyAdditive, 
    applicativeAdditive: applicativeAdditive, 
    bindAdditive: bindAdditive, 
    monadAdditive: monadAdditive, 
    extendAdditive: extendAdditive, 
    comonadAdditive: comonadAdditive, 
    invariantAdditive: invariantAdditive, 
    showAdditive: showAdditive, 
    semigroupAdditive: semigroupAdditive, 
    monoidAdditive: monoidAdditive
};

},{"Control.Comonad":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Conj/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Conj = function (x) {
    return x;
};
var showConj = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Conj (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semiringConj = function (dictBooleanAlgebra) {
    return new Prelude.Semiring(function (v) {
        return function (v1) {
            return Prelude.conj(dictBooleanAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Prelude.disj(dictBooleanAlgebra)(v)(v1);
        };
    }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
};
var semigroupConj = function (dictBooleanAlgebra) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude.conj(dictBooleanAlgebra)(v)(v1);
        };
    });
};
var runConj = function (v) {
    return v;
};
var monoidConj = function (dictBooleanAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConj(dictBooleanAlgebra);
    }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
};
var functorConj = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendConj = new Control_Extend.Extend(function () {
    return functorConj;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqConj = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordConj = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqConj(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadConj = new Control_Comonad.Comonad(function () {
    return extendConj;
}, runConj);
var boundedConj = function (dictBounded) {
    return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
};
var applyConj = new Prelude.Apply(function () {
    return functorConj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindConj = new Prelude.Bind(function () {
    return applyConj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeConj = new Prelude.Applicative(function () {
    return applyConj;
}, Conj);
var monadConj = new Prelude.Monad(function () {
    return applicativeConj;
}, function () {
    return bindConj;
});
module.exports = {
    Conj: Conj, 
    runConj: runConj, 
    eqConj: eqConj, 
    ordConj: ordConj, 
    boundedConj: boundedConj, 
    functorConj: functorConj, 
    applyConj: applyConj, 
    applicativeConj: applicativeConj, 
    bindConj: bindConj, 
    monadConj: monadConj, 
    extendConj: extendConj, 
    comonadConj: comonadConj, 
    showConj: showConj, 
    semigroupConj: semigroupConj, 
    monoidConj: monoidConj, 
    semiringConj: semiringConj
};

},{"Control.Comonad":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Disj/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Disj = function (x) {
    return x;
};
var showDisj = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Disj (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semiringDisj = function (dictBooleanAlgebra) {
    return new Prelude.Semiring(function (v) {
        return function (v1) {
            return Prelude.disj(dictBooleanAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Prelude.conj(dictBooleanAlgebra)(v)(v1);
        };
    }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
};
var semigroupDisj = function (dictBooleanAlgebra) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude.disj(dictBooleanAlgebra)(v)(v1);
        };
    });
};
var runDisj = function (v) {
    return v;
};
var monoidDisj = function (dictBooleanAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDisj(dictBooleanAlgebra);
    }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
};
var functorDisj = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendDisj = new Control_Extend.Extend(function () {
    return functorDisj;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqDisj = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordDisj = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqDisj(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadDisj = new Control_Comonad.Comonad(function () {
    return extendDisj;
}, runDisj);
var boundedDisj = function (dictBounded) {
    return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
};
var applyDisj = new Prelude.Apply(function () {
    return functorDisj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDisj = new Prelude.Bind(function () {
    return applyDisj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDisj = new Prelude.Applicative(function () {
    return applyDisj;
}, Disj);
var monadDisj = new Prelude.Monad(function () {
    return applicativeDisj;
}, function () {
    return bindDisj;
});
module.exports = {
    Disj: Disj, 
    runDisj: runDisj, 
    eqDisj: eqDisj, 
    ordDisj: ordDisj, 
    boundedDisj: boundedDisj, 
    functorDisj: functorDisj, 
    applyDisj: applyDisj, 
    applicativeDisj: applicativeDisj, 
    bindDisj: bindDisj, 
    monadDisj: monadDisj, 
    extendDisj: extendDisj, 
    comonadDisj: comonadDisj, 
    showDisj: showDisj, 
    semigroupDisj: semigroupDisj, 
    monoidDisj: monoidDisj, 
    semiringDisj: semiringDisj
};

},{"Control.Comonad":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Dual/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Dual = function (x) {
    return x;
};
var showDual = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Dual (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semigroupDual = function (dictSemigroup) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude["<>"](dictSemigroup)(v1)(v);
        };
    });
};
var runDual = function (v) {
    return v;
};
var monoidDual = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(dictMonoid));
};
var invariantDual = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorDual = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendDual = new Control_Extend.Extend(function () {
    return functorDual;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqDual = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordDual = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqDual(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadDual = new Control_Comonad.Comonad(function () {
    return extendDual;
}, runDual);
var applyDual = new Prelude.Apply(function () {
    return functorDual;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDual = new Prelude.Bind(function () {
    return applyDual;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDual = new Prelude.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Prelude.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual, 
    runDual: runDual, 
    eqDual: eqDual, 
    ordDual: ordDual, 
    functorDual: functorDual, 
    applyDual: applyDual, 
    applicativeDual: applicativeDual, 
    bindDual: bindDual, 
    monadDual: monadDual, 
    extendDual: extendDual, 
    comonadDual: comonadDual, 
    invariantDual: invariantDual, 
    showDual: showDual, 
    semigroupDual: semigroupDual, 
    monoidDual: monoidDual
};

},{"Control.Comonad":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Endo/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Endo = function (x) {
    return x;
};
var semigroupEndo = new Prelude.Semigroup(function (v) {
    return function (v1) {
        return function ($10) {
            return v(v1($10));
        };
    };
});
var runEndo = function (v) {
    return v;
};
var monoidEndo = new Data_Monoid.Monoid(function () {
    return semigroupEndo;
}, Prelude.id(Prelude.categoryFn));
var invariantEndo = new Data_Functor_Invariant.Invariant(function (ab) {
    return function (ba) {
        return function (v) {
            return function ($11) {
                return ab(v(ba($11)));
            };
        };
    };
});
module.exports = {
    Endo: Endo, 
    runEndo: runEndo, 
    invariantEndo: invariantEndo, 
    semigroupEndo: semigroupEndo, 
    monoidEndo: monoidEndo
};

},{"Data.Functor.Invariant":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Multiplicative/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Multiplicative = function (x) {
    return x;
};
var showMultiplicative = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Multiplicative (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semigroupMultiplicative = function (dictSemiring) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude["*"](dictSemiring)(v)(v1);
        };
    });
};
var runMultiplicative = function (v) {
    return v;
};
var monoidMultiplicative = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMultiplicative(dictSemiring);
    }, Prelude.one(dictSemiring));
};
var invariantMultiplicative = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorMultiplicative = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendMultiplicative = new Control_Extend.Extend(function () {
    return functorMultiplicative;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqMultiplicative = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordMultiplicative = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqMultiplicative(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadMultiplicative = new Control_Comonad.Comonad(function () {
    return extendMultiplicative;
}, runMultiplicative);
var applyMultiplicative = new Prelude.Apply(function () {
    return functorMultiplicative;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindMultiplicative = new Prelude.Bind(function () {
    return applyMultiplicative;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeMultiplicative = new Prelude.Applicative(function () {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Prelude.Monad(function () {
    return applicativeMultiplicative;
}, function () {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative, 
    runMultiplicative: runMultiplicative, 
    eqMultiplicative: eqMultiplicative, 
    ordMultiplicative: ordMultiplicative, 
    functorMultiplicative: functorMultiplicative, 
    applyMultiplicative: applyMultiplicative, 
    applicativeMultiplicative: applicativeMultiplicative, 
    bindMultiplicative: bindMultiplicative, 
    monadMultiplicative: monadMultiplicative, 
    extendMultiplicative: extendMultiplicative, 
    comonadMultiplicative: comonadMultiplicative, 
    invariantMultiplicative: invariantMultiplicative, 
    showMultiplicative: showMultiplicative, 
    semigroupMultiplicative: semigroupMultiplicative, 
    monoidMultiplicative: monoidMultiplicative
};

},{"Control.Comonad":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
    this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Prelude.semigroupUnit;
}, Prelude.unit);
var monoidString = new Monoid(function () {
    return Prelude.semigroupString;
}, "");
var monoidArray = new Monoid(function () {
    return Prelude.semigroupArray;
}, [  ]);
var mempty = function (dict) {
    return dict.mempty;
};
var monoidFn = function (dictMonoid) {
    return new Monoid(function () {
        return Prelude.semigroupFn(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, Prelude["const"](mempty(dictMonoid)));
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    monoidUnit: monoidUnit, 
    monoidFn: monoidFn, 
    monoidString: monoidString, 
    monoidArray: monoidArray
};

},{"Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.String.Unsafe/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.String.Unsafe

exports.charCodeAt = function (i) {
  return function (s) {
    if (i >= 0 && i < s.length) return s.charCodeAt(i);
    throw new Error("Data.String.Unsafe.charCodeAt: Invalid index.");
  };
};

exports.charAt = function (i) {
  return function (s) {
    if (i >= 0 && i < s.length) return s.charAt(i);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

exports.char = function (s) {
  if (s.length === 1) return s.charAt(0);
  throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.String.Unsafe/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
module.exports = {
    charCodeAt: $foreign.charCodeAt, 
    charAt: $foreign.charAt, 
    "char": $foreign["char"]
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.String.Unsafe/foreign.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.String/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.String

exports._charAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
      };
    };
  };
};

exports._charCodeAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ? just(s.charCodeAt(i)) : nothing;
      };
    };
  };
};

exports._toChar = function (just) {
  return function (nothing) {
    return function (s) {
      return s.length === 1 ? just(s) : nothing;
    };
  };
};

exports.fromCharArray = function (a) {
  return a.join("");
};

exports._indexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.indexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports["_indexOf'"] = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.indexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports._lastIndexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.lastIndexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports["_lastIndexOf'"] = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.lastIndexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports.length = function (s) {
  return s.length;
};

exports._localeCompare = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (s1) {
        return function (s2) {
          var result = s1.localeCompare(s2);
          return result < 0 ? lt : result > 0 ? gt : eq;
        };
      };
    };
  };
};

exports.replace = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(s1, s2);
    };
  };
};

exports.take = function (n) {
  return function (s) {
    return s.substr(0, n);
  };
};

exports.drop = function (n) {
  return function (s) {
    return s.substr(n);
  };
};

exports.count = function (p) {
  return function (s) {
    for (var i = 0; i < s.length && p(s.charAt(i)); i++); {}
    return i;
  };
};

exports.split = function (sep) {
  return function (s) {
    return s.split(sep);
  };
};

exports.toCharArray = function (s) {
  return s.split("");
};

exports.toLower = function (s) {
  return s.toLowerCase();
};

exports.toUpper = function (s) {
  return s.toUpperCase();
};

exports.trim = function (s) {
  return s.trim();
};

exports.joinWith = function (s) {
  return function (xs) {
    return xs.join(s);
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.String/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Char = require("Data.Char");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_String_Unsafe = require("Data.String.Unsafe");
var uncons = function (v) {
    if (v === "") {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(v), 
        tail: $foreign.drop(1)(v)
    });
};
var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var takeWhile = function (p) {
    return function (s) {
        return $foreign.take($foreign.count(p)(s))(s);
    };
};
var $$null = function (s) {
    return $foreign.length(s) === 0;
};
var localeCompare = $foreign._localeCompare(Prelude.LT.value)(Prelude.EQ.value)(Prelude.GT.value);
var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var stripSuffix = function (suffix) {
    return function (str) {
        var $2 = lastIndexOf(suffix)(str);
        if ($2 instanceof Data_Maybe.Just && $2.value0 === $foreign.length(str) - $foreign.length(suffix)) {
            return Data_Maybe.Just.create($foreign.take($2.value0)(str));
        };
        return Data_Maybe.Nothing.value;
    };
};
var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var stripPrefix = function (prefix) {
    return function (str) {
        var $4 = indexOf(prefix)(str);
        if ($4 instanceof Data_Maybe.Just && $4.value0 === 0) {
            return Data_Maybe.Just.create($foreign.drop($foreign.length(prefix))(str));
        };
        return Data_Maybe.Nothing.value;
    };
};
var fromChar = Data_Char.toString;
var singleton = fromChar;
var dropWhile = function (p) {
    return function (s) {
        return $foreign.drop($foreign.count(p)(s))(s);
    };
};
var contains = function (x) {
    return function (s) {
        return Data_Maybe.isJust(indexOf(x)(s));
    };
};
var charCodeAt = $foreign._charCodeAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    stripSuffix: stripSuffix, 
    stripPrefix: stripPrefix, 
    dropWhile: dropWhile, 
    takeWhile: takeWhile, 
    localeCompare: localeCompare, 
    singleton: singleton, 
    uncons: uncons, 
    "null": $$null, 
    "lastIndexOf'": lastIndexOf$prime, 
    lastIndexOf: lastIndexOf, 
    "indexOf'": indexOf$prime, 
    indexOf: indexOf, 
    contains: contains, 
    toChar: toChar, 
    fromChar: fromChar, 
    charCodeAt: charCodeAt, 
    charAt: charAt, 
    joinWith: $foreign.joinWith, 
    trim: $foreign.trim, 
    toUpper: $foreign.toUpper, 
    toLower: $foreign.toLower, 
    toCharArray: $foreign.toCharArray, 
    split: $foreign.split, 
    drop: $foreign.drop, 
    take: $foreign.take, 
    count: $foreign.count, 
    replace: $foreign.replace, 
    length: $foreign.length, 
    fromCharArray: $foreign.fromCharArray
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.String/foreign.js","Data.Char":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Char/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Data.String.Unsafe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.String.Unsafe/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Traversable

// jshint maxparams: 3

exports.traverseArrayImpl = function () {
  function Cont (fn) {
    this.fn = fn;
  }

  var emptyList = {};

  var ConsCell = function (head, tail) {
    this.head = head;
    this.tail = tail;
  };

  function consList (x) {
    return function (xs) {
      return new ConsCell(x, xs);
    };
  }

  function listToArray (list) {
    var arr = [];
    while (list !== emptyList) {
      arr.push(list.head);
      list = list.tail;
    }
    return arr;
  }

  return function (apply) {
    return function (map) {
      return function (pure) {
        return function (f) {
          var buildFrom = function (x, ys) {
            return apply(map(consList)(f(x)))(ys);
          };

          var go = function (acc, currentLen, xs) {
            if (currentLen === 0) {
              return acc;
            } else {
              var last = xs[currentLen - 1];
              return new Cont(function () {
                return go(buildFrom(last, acc), currentLen - 1, xs);
              });
            }
          };

          return function (array) {
            var result = go(pure(emptyList), array.length, array);
            while (result instanceof Cont) {
              result = result.fn();
            }

            return map(listToArray)(result);
          };
        };
      };
    };
  };
}();

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_First = require("Data.Maybe.First");
var Data_Maybe_Last = require("Data.Maybe.Last");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Conj = require("Data.Monoid.Conj");
var Data_Monoid_Disj = require("Data.Monoid.Disj");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");
var StateL = function (x) {
    return x;
};
var StateR = function (x) {
    return x;
};
var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
    this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.sequence = sequence;
    this.traverse = traverse;
};
var traverse = function (dict) {
    return dict.traverse;
};
var traversableMultiplicative = new Traversable(function () {
    return Data_Foldable.foldableMultiplicative;
}, function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var traversableMaybe = new Traversable(function () {
    return Data_Foldable.foldableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
        };
        if (v instanceof Data_Maybe.Just) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Traversable line 79, column 3 - line 80, column 3: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Traversable line 77, column 3 - line 78, column 3: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableDual = new Traversable(function () {
    return Data_Foldable.foldableDual;
}, function () {
    return Data_Monoid_Dual.functorDual;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableDisj = new Traversable(function () {
    return Data_Foldable.foldableDisj;
}, function () {
    return Data_Monoid_Disj.functorDisj;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(f(v));
        };
    };
});
var traversableConj = new Traversable(function () {
    return Data_Foldable.foldableConj;
}, function () {
    return Data_Monoid_Conj.functorConj;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(f(v));
        };
    };
});
var traversableAdditive = new Traversable(function () {
    return Data_Foldable.foldableAdditive;
}, function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(f(v));
        };
    };
});
var stateR = function (v) {
    return v;
};
var stateL = function (v) {
    return v;
};
var sequenceDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return function (tma) {
            return traverse(dictTraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(tma);
        };
    };
};
var traversableArray = new Traversable(function () {
    return Data_Foldable.foldableArray;
}, function () {
    return Prelude.functorArray;
}, function (dictApplicative) {
    return sequenceDefault(traversableArray)(dictApplicative);
}, function (dictApplicative) {
    return $foreign.traverseArrayImpl(Prelude.apply(dictApplicative["__superclass_Prelude.Apply_0"]()))(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(dictApplicative));
});
var sequence = function (dict) {
    return dict.sequence;
};
var traversableFirst = new Traversable(function () {
    return Data_Foldable.foldableFirst;
}, function () {
    return Data_Maybe_First.functorFirst;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traversableLast = new Traversable(function () {
    return Data_Foldable.foldableLast;
}, function () {
    return Data_Maybe_Last.functorLast;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traverseDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (ta) {
                return sequence(dictTraversable)(dictApplicative)(Prelude.map(dictTraversable["__superclass_Prelude.Functor_0"]())(f)(ta));
            };
        };
    };
};
var functorStateR = new Prelude.Functor(function (f) {
    return function (k) {
        return function (s) {
            var $75 = stateR(k)(s);
            return {
                accum: $75.accum, 
                value: f($75.value)
            };
        };
    };
});
var functorStateL = new Prelude.Functor(function (f) {
    return function (k) {
        return function (s) {
            var $78 = stateL(k)(s);
            return {
                accum: $78.accum, 
                value: f($78.value)
            };
        };
    };
});
var $$for = function (dictApplicative) {
    return function (dictTraversable) {
        return function (x) {
            return function (f) {
                return traverse(dictTraversable)(dictApplicative)(f)(x);
            };
        };
    };
};
var applyStateR = new Prelude.Apply(function () {
    return functorStateR;
}, function (f) {
    return function (x) {
        return function (s) {
            var $81 = stateR(x)(s);
            var $82 = stateR(f)($81.accum);
            return {
                accum: $82.accum, 
                value: $82.value($81.value)
            };
        };
    };
});
var applyStateL = new Prelude.Apply(function () {
    return functorStateL;
}, function (f) {
    return function (x) {
        return function (s) {
            var $87 = stateL(f)(s);
            var $88 = stateL(x)($87.accum);
            return {
                accum: $88.accum, 
                value: $87.value($88.value)
            };
        };
    };
});
var applicativeStateR = new Prelude.Applicative(function () {
    return applyStateR;
}, function (a) {
    return function (s) {
        return {
            accum: s, 
            value: a
        };
    };
});
var mapAccumR = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateR(traverse(dictTraversable)(applicativeStateR)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanr = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumR(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(a)(b);
                        return {
                            accum: b$prime, 
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var applicativeStateL = new Prelude.Applicative(function () {
    return applyStateL;
}, function (a) {
    return function (s) {
        return {
            accum: s, 
            value: a
        };
    };
});
var mapAccumL = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateL(traverse(dictTraversable)(applicativeStateL)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanl = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumL(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(b)(a);
                        return {
                            accum: b$prime, 
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
module.exports = {
    Traversable: Traversable, 
    mapAccumR: mapAccumR, 
    mapAccumL: mapAccumL, 
    scanr: scanr, 
    scanl: scanl, 
    "for": $$for, 
    sequenceDefault: sequenceDefault, 
    traverseDefault: traverseDefault, 
    sequence: sequence, 
    traverse: traverse, 
    traversableArray: traversableArray, 
    traversableMaybe: traversableMaybe, 
    traversableFirst: traversableFirst, 
    traversableLast: traversableLast, 
    traversableAdditive: traversableAdditive, 
    traversableDual: traversableDual, 
    traversableConj: traversableConj, 
    traversableDisj: traversableDisj, 
    traversableMultiplicative: traversableMultiplicative
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/foreign.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Maybe.First":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.First/index.js","Data.Maybe.Last":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.Last/index.js","Data.Monoid.Additive":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Additive/index.js","Data.Monoid.Conj":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Conj/index.js","Data.Monoid.Disj":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Disj/index.js","Data.Monoid.Dual":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Dual/index.js","Data.Monoid.Multiplicative":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid.Multiplicative/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Tuple/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Biapplicative = require("Control.Biapplicative");
var Control_Biapply = require("Control.Biapply");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Control_Lazy = require("Control.Lazy");
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Bitraversable = require("Data.Bitraversable");
var Data_Foldable = require("Data.Foldable");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_First = require("Data.Maybe.First");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var uncurry = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var swap = function (v) {
    return new Tuple(v.value1, v.value0);
};
var snd = function (v) {
    return v.value1;
};
var showTuple = function (dictShow) {
    return function (dictShow1) {
        return new Prelude.Show(function (v) {
            return "Tuple (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var semiringTuple = function (dictSemiring) {
    return function (dictSemiring1) {
        return new Prelude.Semiring(function (v) {
            return function (v1) {
                return new Tuple(Prelude.add(dictSemiring)(v.value0)(v1.value0), Prelude.add(dictSemiring1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.mul(dictSemiring)(v.value0)(v1.value0), Prelude.mul(dictSemiring1)(v.value1)(v1.value1));
            };
        }, new Tuple(Prelude.one(dictSemiring), Prelude.one(dictSemiring1)), new Tuple(Prelude.zero(dictSemiring), Prelude.zero(dictSemiring1)));
    };
};
var semigroupoidTuple = new Prelude.Semigroupoid(function (v) {
    return function (v1) {
        return new Tuple(v1.value0, v.value1);
    };
});
var semigroupTuple = function (dictSemigroup) {
    return function (dictSemigroup1) {
        return new Prelude.Semigroup(function (v) {
            return function (v1) {
                return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), Prelude["<>"](dictSemigroup1)(v.value1)(v1.value1));
            };
        });
    };
};
var ringTuple = function (dictRing) {
    return function (dictRing1) {
        return new Prelude.Ring(function () {
            return semiringTuple(dictRing["__superclass_Prelude.Semiring_0"]())(dictRing1["__superclass_Prelude.Semiring_0"]());
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.sub(dictRing)(v.value0)(v1.value0), Prelude.sub(dictRing1)(v.value1)(v1.value1));
            };
        });
    };
};
var monoidTuple = function (dictMonoid) {
    return function (dictMonoid1) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictMonoid1["__superclass_Prelude.Semigroup_0"]());
        }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
    };
};
var moduloSemiringTuple = function (dictModuloSemiring) {
    return function (dictModuloSemiring1) {
        return new Prelude.ModuloSemiring(function () {
            return semiringTuple(dictModuloSemiring["__superclass_Prelude.Semiring_0"]())(dictModuloSemiring1["__superclass_Prelude.Semiring_0"]());
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.div(dictModuloSemiring)(v.value0)(v1.value0), Prelude.div(dictModuloSemiring1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.mod(dictModuloSemiring)(v.value0)(v1.value0), Prelude.mod(dictModuloSemiring1)(v.value1)(v1.value1));
            };
        });
    };
};
var lookup = function (dictFoldable) {
    return function (dictEq) {
        return function (a) {
            return function (f) {
                return Data_Maybe_First.runFirst(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                    var $145 = Prelude["=="](dictEq)(a)(v.value0);
                    if ($145) {
                        return new Data_Maybe.Just(v.value1);
                    };
                    if (!$145) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Data.Tuple line 174, column 58 - line 174, column 93: " + [ $145.constructor.name ]);
                })(f));
            };
        };
    };
};
var functorTuple = new Prelude.Functor(function (f) {
    return function (v) {
        return new Tuple(v.value0, f(v.value1));
    };
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
var fst = function (v) {
    return v.value0;
};
var lazyTuple = function (dictLazy) {
    return function (dictLazy1) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer(dictLazy1)(function (v) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v.value1)(z);
        };
    };
});
var traversableTuple = new Data_Traversable.Traversable(function () {
    return foldableTuple;
}, function () {
    return functorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var extendTuple = new Control_Extend.Extend(function () {
    return functorTuple;
}, function (f) {
    return function (v) {
        return new Tuple(v.value0, f(v));
    };
});
var eqTuple = function (dictEq) {
    return function (dictEq1) {
        return new Prelude.Eq(function (v) {
            return function (v1) {
                return Prelude["=="](dictEq)(v.value0)(v1.value0) && Prelude["=="](dictEq1)(v.value1)(v1.value1);
            };
        });
    };
};
var ordTuple = function (dictOrd) {
    return function (dictOrd1) {
        return new Prelude.Ord(function () {
            return eqTuple(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
        }, function (v) {
            return function (v1) {
                var $190 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                if ($190 instanceof Prelude.EQ) {
                    return Prelude.compare(dictOrd1)(v.value1)(v1.value1);
                };
                return $190;
            };
        });
    };
};
var divisionRingTuple = function (dictDivisionRing) {
    return function (dictDivisionRing1) {
        return new Prelude.DivisionRing(function () {
            return moduloSemiringTuple(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]())(dictDivisionRing1["__superclass_Prelude.ModuloSemiring_1"]());
        }, function () {
            return ringTuple(dictDivisionRing["__superclass_Prelude.Ring_0"]())(dictDivisionRing1["__superclass_Prelude.Ring_0"]());
        });
    };
};
var numTuple = function (dictNum) {
    return function (dictNum1) {
        return new Prelude.Num(function () {
            return divisionRingTuple(dictNum["__superclass_Prelude.DivisionRing_0"]())(dictNum1["__superclass_Prelude.DivisionRing_0"]());
        });
    };
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var boundedTuple = function (dictBounded) {
    return function (dictBounded1) {
        return new Prelude.Bounded(new Tuple(Prelude.bottom(dictBounded), Prelude.bottom(dictBounded1)), new Tuple(Prelude.top(dictBounded), Prelude.top(dictBounded1)));
    };
};
var boundedOrdTuple = function (dictBoundedOrd) {
    return function (dictBoundedOrd1) {
        return new Prelude.BoundedOrd(function () {
            return boundedTuple(dictBoundedOrd["__superclass_Prelude.Bounded_0"]())(dictBoundedOrd1["__superclass_Prelude.Bounded_0"]());
        }, function () {
            return ordTuple(dictBoundedOrd["__superclass_Prelude.Ord_1"]())(dictBoundedOrd1["__superclass_Prelude.Ord_1"]());
        });
    };
};
var booleanAlgebraTuple = function (dictBooleanAlgebra) {
    return function (dictBooleanAlgebra1) {
        return new Prelude.BooleanAlgebra(function () {
            return boundedTuple(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]())(dictBooleanAlgebra1["__superclass_Prelude.Bounded_0"]());
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.conj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.conj(dictBooleanAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.disj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.disj(dictBooleanAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return new Tuple(Prelude.not(dictBooleanAlgebra)(v.value0), Prelude.not(dictBooleanAlgebra1)(v.value1));
        });
    };
};
var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Tuple(f(v.value0), g(v.value1));
        };
    };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(g(v.value1));
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return g(f(z)(v.value0))(v.value1);
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return f(v.value0)(g(v.value1)(z));
            };
        };
    };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableTuple;
}, function () {
    return bifunctorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(f(v.value0)))(g(v.value1));
            };
        };
    };
});
var biapplyTuple = new Control_Biapply.Biapply(function () {
    return bifunctorTuple;
}, function (v) {
    return function (v1) {
        return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
    };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
    return biapplyTuple;
}, Tuple.create);
var applyTuple = function (dictSemigroup) {
    return new Prelude.Apply(function () {
        return functorTuple;
    }, function (v) {
        return function (v1) {
            return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
        };
    });
};
var bindTuple = function (dictSemigroup) {
    return new Prelude.Bind(function () {
        return applyTuple(dictSemigroup);
    }, function (v) {
        return function (f) {
            var $254 = f(v.value1);
            return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)($254.value0), $254.value1);
        };
    });
};
var applicativeTuple = function (dictMonoid) {
    return new Prelude.Applicative(function () {
        return applyTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
};
var monadTuple = function (dictMonoid) {
    return new Prelude.Monad(function () {
        return applicativeTuple(dictMonoid);
    }, function () {
        return bindTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    });
};
module.exports = {
    Tuple: Tuple, 
    lookup: lookup, 
    swap: swap, 
    uncurry: uncurry, 
    curry: curry, 
    snd: snd, 
    fst: fst, 
    showTuple: showTuple, 
    eqTuple: eqTuple, 
    ordTuple: ordTuple, 
    boundedTuple: boundedTuple, 
    boundedOrdTuple: boundedOrdTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    semigroupTuple: semigroupTuple, 
    monoidTuple: monoidTuple, 
    semiringTuple: semiringTuple, 
    moduloSemiringTuple: moduloSemiringTuple, 
    ringTuple: ringTuple, 
    divisionRingTuple: divisionRingTuple, 
    numTuple: numTuple, 
    booleanAlgebraTuple: booleanAlgebraTuple, 
    functorTuple: functorTuple, 
    invariantTuple: invariantTuple, 
    bifunctorTuple: bifunctorTuple, 
    applyTuple: applyTuple, 
    biapplyTuple: biapplyTuple, 
    applicativeTuple: applicativeTuple, 
    biapplicativeTuple: biapplicativeTuple, 
    bindTuple: bindTuple, 
    monadTuple: monadTuple, 
    extendTuple: extendTuple, 
    comonadTuple: comonadTuple, 
    lazyTuple: lazyTuple, 
    foldableTuple: foldableTuple, 
    bifoldableTuple: bifoldableTuple, 
    traversableTuple: traversableTuple, 
    bitraversableTuple: bitraversableTuple
};

},{"Control.Biapplicative":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Biapplicative/index.js","Control.Biapply":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Biapply/index.js","Control.Comonad":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Comonad/index.js","Control.Extend":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Extend/index.js","Control.Lazy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Lazy/index.js","Data.Bifoldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bifoldable/index.js","Data.Bifunctor":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bifunctor/index.js","Data.Bitraversable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Bitraversable/index.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.Functor.Invariant":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Functor.Invariant/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Maybe.First":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe.First/index.js","Data.Monoid":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Monoid/index.js","Data.Traversable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Unfoldable/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Data_Array_ST = require("Data.Array.ST");
var Data_Traversable = require("Data.Traversable");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_ST = require("Control.Monad.ST");
var Unfoldable = function (unfoldr) {
    this.unfoldr = unfoldr;
};
var unfoldr = function (dict) {
    return dict.unfoldr;
};
var unfoldableArray = new Unfoldable(function (f) {
    return function (b) {
        return Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(function __do() {
            var v = Data_Array_ST.emptySTArray();
            var v1 = Control_Monad_ST.newSTRef(b)();
            (function () {
                while (!(function __do() {
                    var v2 = Control_Monad_ST.readSTRef(v1)();
                    var $12 = f(v2);
                    if ($12 instanceof Data_Maybe.Nothing) {
                        return true;
                    };
                    if ($12 instanceof Data_Maybe.Just) {
                        Data_Array_ST.pushSTArray(v)($12.value0.value0)();
                        Control_Monad_ST.writeSTRef(v1)($12.value0.value1)();
                        return false;
                    };
                    throw new Error("Failed pattern match at Data.Unfoldable line 35, column 7 - line 41, column 5: " + [ $12.constructor.name ]);
                })()) {

                };
                return {};
            })();
            return v;
        }));
    };
});
var replicate = function (dictUnfoldable) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                var $16 = i <= 0;
                if ($16) {
                    return Data_Maybe.Nothing.value;
                };
                if (!$16) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1));
                };
                throw new Error("Failed pattern match at Data.Unfoldable line 54, column 7 - line 58, column 1: " + [ $16.constructor.name ]);
            };
            return unfoldr(dictUnfoldable)(step)(n);
        };
    };
};
var replicateA = function (dictApplicative) {
    return function (dictUnfoldable) {
        return function (dictTraversable) {
            return function (n) {
                return function (m) {
                    return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                };
            };
        };
    };
};
var singleton = function (dictUnfoldable) {
    return replicate(dictUnfoldable)(1);
};
var none = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(Prelude["const"](Data_Maybe.Nothing.value))(Prelude.unit);
};
module.exports = {
    Unfoldable: Unfoldable, 
    singleton: singleton, 
    none: none, 
    replicateA: replicateA, 
    replicate: replicate, 
    unfoldr: unfoldr, 
    unfoldableArray: unfoldableArray
};

},{"Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js","Control.Monad.ST":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.ST/index.js","Data.Array.ST":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array.ST/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Traversable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Traversable/index.js","Data.Tuple":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Tuple/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Main/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var VexFlow = require("VexFlow");
var MidiJS = require("MidiJS");
var MidiToVexFlow = require("MidiToVexFlow");
var MidiPlayer = require("MidiPlayer");
var main = function __do() {
    var v = VexFlow.createCanvas("notationCanvas")();
    MidiPlayer.loadFile("bower_components/purescript-midiplayer/midi/bachTest.mid")();
    return MidiPlayer.loadPlugin({
        soundfontUrl: "bower_components/midi/examples/soundfont/", 
        instrument: "acoustic_grand_piano"
    })(Prelude["const"](Prelude[">>="](Control_Monad_Eff.bindEff)(MidiPlayer.getData)(MidiToVexFlow.renderMidi(v))))();
};
module.exports = {
    main: main
};

},{"Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js","MidiJS":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiJS/index.js","MidiPlayer":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiPlayer/index.js","MidiToVexFlow":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiToVexFlow/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js","VexFlow":"/Users/Alko/Coding/purescript/purescript-vexflow/output/VexFlow/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Math/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Math

exports.abs = Math.abs;

exports.acos = Math.acos;

exports.asin = Math.asin;

exports.atan = Math.atan;

exports.atan2 = function (y) {
  return function (x) {
    return Math.atan2(y, x);
  };
};

exports.ceil = Math.ceil;

exports.cos = Math.cos;

exports.exp = Math.exp;

exports.floor = Math.floor;

exports.log = Math.log;

exports.max = function (n1) {
  return function (n2) {
    return Math.max(n1, n2);
  };
};

exports.min = function (n1) {
  return function (n2) {
    return Math.min(n1, n2);
  };
};

exports.pow = function (n) {
  return function (p) {
    return Math.pow(n, p);
  };
};

exports["%"] = function(n) {
  return function(m) {
    return n % m;
  };
};

exports.round = Math.round;

exports.sin = Math.sin;

exports.sqrt = Math.sqrt;

exports.tan = Math.tan;

exports.e = Math.E;

exports.ln2 = Math.LN2;

exports.ln10 = Math.LN10;

exports.log2e = Math.LOG2E;

exports.log10e = Math.LOG10E;

exports.pi = Math.PI;

exports.sqrt1_2 = Math.SQRT1_2;

exports.sqrt2 = Math.SQRT2;

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Math/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
module.exports = {
    sqrt2: $foreign.sqrt2, 
    sqrt1_2: $foreign.sqrt1_2, 
    pi: $foreign.pi, 
    log10e: $foreign.log10e, 
    log2e: $foreign.log2e, 
    ln10: $foreign.ln10, 
    ln2: $foreign.ln2, 
    e: $foreign.e, 
    "%": $foreign["%"], 
    tan: $foreign.tan, 
    sqrt: $foreign.sqrt, 
    sin: $foreign.sin, 
    round: $foreign.round, 
    pow: $foreign.pow, 
    min: $foreign.min, 
    max: $foreign.max, 
    log: $foreign.log, 
    floor: $foreign.floor, 
    exp: $foreign.exp, 
    cos: $foreign.cos, 
    ceil: $foreign.ceil, 
    atan2: $foreign.atan2, 
    atan: $foreign.atan, 
    asin: $foreign.asin, 
    acos: $foreign.acos, 
    abs: $foreign.abs
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Math/foreign.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiJS/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Function_Eff = require("Data.Function.Eff");
var MidiPlayer = require("MidiPlayer");
var playLoop = function (startTime) {
    return function __do() {
        MidiPlayer.stop();
        MidiPlayer.setCurrentTime(startTime)();
        return MidiPlayer.play();
    };
};
var play = playLoop(12000.0);
var main = function __do() {
    MidiPlayer.loadFile("midi/test2")();
    return MidiPlayer.loadPlugin({
        soundfontUrl: "bower_components/midi/examples/soundfont/", 
        instrument: "acoustic_grand_piano"
    })(Prelude["const"](play))();
};
module.exports = {
    playLoop: playLoop, 
    play: play, 
    main: main
};

},{"Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js","Data.Function.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Function.Eff/index.js","MidiPlayer":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiPlayer/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiJsTypes/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Data_Generic = require("Data.Generic");
var Data_Maybe = require("Data.Maybe");
var TrackName = (function () {
    function TrackName(value0) {
        this.value0 = value0;
    };
    TrackName.create = function (value0) {
        return new TrackName(value0);
    };
    return TrackName;
})();
var InstrumentName = (function () {
    function InstrumentName(value0) {
        this.value0 = value0;
    };
    InstrumentName.create = function (value0) {
        return new InstrumentName(value0);
    };
    return InstrumentName;
})();
var TimeSignature = (function () {
    function TimeSignature(value0) {
        this.value0 = value0;
    };
    TimeSignature.create = function (value0) {
        return new TimeSignature(value0);
    };
    return TimeSignature;
})();
var KeySignature = (function () {
    function KeySignature(value0) {
        this.value0 = value0;
    };
    KeySignature.create = function (value0) {
        return new KeySignature(value0);
    };
    return KeySignature;
})();
var Marker = (function () {
    function Marker(value0) {
        this.value0 = value0;
    };
    Marker.create = function (value0) {
        return new Marker(value0);
    };
    return Marker;
})();
var SmpteOffset = (function () {
    function SmpteOffset(value0) {
        this.value0 = value0;
    };
    SmpteOffset.create = function (value0) {
        return new SmpteOffset(value0);
    };
    return SmpteOffset;
})();
var ProgramChange = (function () {
    function ProgramChange(value0) {
        this.value0 = value0;
    };
    ProgramChange.create = function (value0) {
        return new ProgramChange(value0);
    };
    return ProgramChange;
})();
var Controller = (function () {
    function Controller(value0) {
        this.value0 = value0;
    };
    Controller.create = function (value0) {
        return new Controller(value0);
    };
    return Controller;
})();
var SetTempo = (function () {
    function SetTempo(value0) {
        this.value0 = value0;
    };
    SetTempo.create = function (value0) {
        return new SetTempo(value0);
    };
    return SetTempo;
})();
var NoteOn = (function () {
    function NoteOn(value0) {
        this.value0 = value0;
    };
    NoteOn.create = function (value0) {
        return new NoteOn(value0);
    };
    return NoteOn;
})();
var NoteOff = (function () {
    function NoteOff(value0) {
        this.value0 = value0;
    };
    NoteOff.create = function (value0) {
        return new NoteOff(value0);
    };
    return NoteOff;
})();
var EndOfTrack = (function () {
    function EndOfTrack(value0) {
        this.value0 = value0;
    };
    EndOfTrack.create = function (value0) {
        return new EndOfTrack(value0);
    };
    return EndOfTrack;
})();
var MidiChannelPrefix = (function () {
    function MidiChannelPrefix(value0) {
        this.value0 = value0;
    };
    MidiChannelPrefix.create = function (value0) {
        return new MidiChannelPrefix(value0);
    };
    return MidiChannelPrefix;
})();
var genericMidiEvent = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.TrackName" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(TrackName.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (deltaTime1) {
                    return function (subtype1) {
                        return function (text1) {
                            return function (type$prime1) {
                                return {
                                    deltaTime: deltaTime1, 
                                    subtype: subtype1, 
                                    text: text1, 
                                    "type'": type$prime1
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.InstrumentName" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(InstrumentName.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (deltaTime1) {
                    return function (subtype1) {
                        return function (text1) {
                            return function (type$prime1) {
                                return {
                                    deltaTime: deltaTime1, 
                                    subtype: subtype1, 
                                    text: text1, 
                                    "type'": type$prime1
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.TimeSignature" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(TimeSignature.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 7) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (deltaTime1) {
                    return function (denominator1) {
                        return function (metronome1) {
                            return function (numerator1) {
                                return function (subtype1) {
                                    return function (thirtyseconds1) {
                                        return function (type$prime1) {
                                            return {
                                                deltaTime: deltaTime1, 
                                                denominator: denominator1, 
                                                metronome: metronome1, 
                                                numerator: numerator1, 
                                                subtype: subtype1, 
                                                thirtyseconds: thirtyseconds1, 
                                                "type'": type$prime1
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[3]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[4]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[5]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[6]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.KeySignature" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(KeySignature.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 5) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (deltaTime1) {
                    return function (key1) {
                        return function (scale1) {
                            return function (subtype1) {
                                return function (text1) {
                                    return {
                                        deltaTime: deltaTime1, 
                                        key: key1, 
                                        scale: scale1, 
                                        subtype: subtype1, 
                                        text: text1
                                    };
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[4]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.Marker" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Marker.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (deltaTime1) {
                    return function (subtype1) {
                        return function (text1) {
                            return function (type$prime1) {
                                return {
                                    deltaTime: deltaTime1, 
                                    subtype: subtype1, 
                                    text: text1, 
                                    "type'": type$prime1
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.SmpteOffset" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(SmpteOffset.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 9) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (deltaTime1) {
                    return function (frame1) {
                        return function (frameRate1) {
                            return function (hour1) {
                                return function (minute1) {
                                    return function (sec1) {
                                        return function (subFrame1) {
                                            return function (subtype1) {
                                                return function (type$prime1) {
                                                    return {
                                                        deltaTime: deltaTime1, 
                                                        frame: frame1, 
                                                        frameRate: frameRate1, 
                                                        hour: hour1, 
                                                        minute: minute1, 
                                                        sec: sec1, 
                                                        subFrame: subFrame1, 
                                                        subtype: subtype1, 
                                                        "type'": type$prime1
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[3]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[4]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[5]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[6]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[7]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[8]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.ProgramChange" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(ProgramChange.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 5) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (channel1) {
                    return function (deltaTime1) {
                        return function (programNumber1) {
                            return function (subtype1) {
                                return function (type$prime1) {
                                    return {
                                        channel: channel1, 
                                        deltaTime: deltaTime1, 
                                        programNumber: programNumber1, 
                                        subtype: subtype1, 
                                        "type'": type$prime1
                                    };
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[4]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.Controller" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Controller.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 5) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (channel1) {
                    return function (controllerType1) {
                        return function (deltaTime1) {
                            return function (type$prime1) {
                                return function (value1) {
                                    return {
                                        channel: channel1, 
                                        controllerType: controllerType1, 
                                        deltaTime: deltaTime1, 
                                        "type'": type$prime1, 
                                        value: value1
                                    };
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[4]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.SetTempo" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(SetTempo.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (deltaTime1) {
                    return function (microsecondsPerBeat1) {
                        return function (subtype1) {
                            return function (type$prime1) {
                                return {
                                    deltaTime: deltaTime1, 
                                    microsecondsPerBeat: microsecondsPerBeat1, 
                                    subtype: subtype1, 
                                    "type'": type$prime1
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.NoteOn" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(NoteOn.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 6) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (channel1) {
                    return function (deltaTime1) {
                        return function (noteNumber1) {
                            return function (subtype1) {
                                return function (type$prime1) {
                                    return function (velocity1) {
                                        return {
                                            channel: channel1, 
                                            deltaTime: deltaTime1, 
                                            noteNumber: noteNumber1, 
                                            subtype: subtype1, 
                                            "type'": type$prime1, 
                                            velocity: velocity1
                                        };
                                    };
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[4]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[5]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.NoteOff" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(NoteOff.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 6) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (channel1) {
                    return function (deltaTime1) {
                        return function (noteNumber1) {
                            return function (subtype1) {
                                return function (type$prime1) {
                                    return function (velocity1) {
                                        return {
                                            channel: channel1, 
                                            deltaTime: deltaTime1, 
                                            noteNumber: noteNumber1, 
                                            subtype: subtype1, 
                                            "type'": type$prime1, 
                                            velocity: velocity1
                                        };
                                    };
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[4]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[5]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.EndOfTrack" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(EndOfTrack.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 3) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (deltaTime1) {
                    return function (subtype1) {
                        return function (type$prime1) {
                            return {
                                deltaTime: deltaTime1, 
                                subtype: subtype1, 
                                "type'": type$prime1
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[2]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "MidiJsTypes.MidiChannelPrefix" && v.value1.length === 1)) {
        return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(MidiChannelPrefix.create))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (channel1) {
                    return function (deltaTime1) {
                        return function (subtype1) {
                            return function (type$prime1) {
                                return {
                                    channel: channel1, 
                                    deltaTime: deltaTime1, 
                                    subtype: subtype1, 
                                    "type'": type$prime1
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[0]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[1]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[2]).recValue(Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Prelude.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("MidiJsTypes.MidiEvent", [ {
        sigConstructor: "MidiJsTypes.TrackName", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "text", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.InstrumentName", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "text", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.TimeSignature", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "denominator", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "metronome", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "numerator", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "thirtyseconds", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.KeySignature", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "key", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "scale", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "text", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.Marker", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "text", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.SmpteOffset", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "frame", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "frameRate", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "hour", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "minute", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "sec", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subFrame", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.ProgramChange", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "programNumber", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.Controller", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "controllerType", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "value", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.SetTempo", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "microsecondsPerBeat", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.NoteOn", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "noteNumber", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "velocity", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.NoteOff", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "noteNumber", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "velocity", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.EndOfTrack", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    }, {
        sigConstructor: "MidiJsTypes.MidiChannelPrefix", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    } ]);
}, function (v) {
    if (v instanceof TrackName) {
        return new Data_Generic.SProd("MidiJsTypes.TrackName", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "text", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.text);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            } ]);
        } ]);
    };
    if (v instanceof InstrumentName) {
        return new Data_Generic.SProd("MidiJsTypes.InstrumentName", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "text", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.text);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            } ]);
        } ]);
    };
    if (v instanceof TimeSignature) {
        return new Data_Generic.SProd("MidiJsTypes.TimeSignature", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "denominator", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.denominator);
                }
            }, {
                recLabel: "metronome", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.metronome);
                }
            }, {
                recLabel: "numerator", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.numerator);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "thirtyseconds", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.thirtyseconds);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            } ]);
        } ]);
    };
    if (v instanceof KeySignature) {
        return new Data_Generic.SProd("MidiJsTypes.KeySignature", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "key", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.key);
                }
            }, {
                recLabel: "scale", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.scale);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "text", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.text);
                }
            } ]);
        } ]);
    };
    if (v instanceof Marker) {
        return new Data_Generic.SProd("MidiJsTypes.Marker", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "text", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.text);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            } ]);
        } ]);
    };
    if (v instanceof SmpteOffset) {
        return new Data_Generic.SProd("MidiJsTypes.SmpteOffset", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "frame", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.frame);
                }
            }, {
                recLabel: "frameRate", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.frameRate);
                }
            }, {
                recLabel: "hour", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.hour);
                }
            }, {
                recLabel: "minute", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.minute);
                }
            }, {
                recLabel: "sec", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.sec);
                }
            }, {
                recLabel: "subFrame", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.subFrame);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            } ]);
        } ]);
    };
    if (v instanceof ProgramChange) {
        return new Data_Generic.SProd("MidiJsTypes.ProgramChange", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.channel);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "programNumber", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.programNumber);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            } ]);
        } ]);
    };
    if (v instanceof Controller) {
        return new Data_Generic.SProd("MidiJsTypes.Controller", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.channel);
                }
            }, {
                recLabel: "controllerType", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.controllerType);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            }, {
                recLabel: "value", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.value);
                }
            } ]);
        } ]);
    };
    if (v instanceof SetTempo) {
        return new Data_Generic.SProd("MidiJsTypes.SetTempo", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "microsecondsPerBeat", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.microsecondsPerBeat);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            } ]);
        } ]);
    };
    if (v instanceof NoteOn) {
        return new Data_Generic.SProd("MidiJsTypes.NoteOn", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.channel);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "noteNumber", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.noteNumber);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            }, {
                recLabel: "velocity", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.velocity);
                }
            } ]);
        } ]);
    };
    if (v instanceof NoteOff) {
        return new Data_Generic.SProd("MidiJsTypes.NoteOff", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.channel);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "noteNumber", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.noteNumber);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            }, {
                recLabel: "velocity", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.velocity);
                }
            } ]);
        } ]);
    };
    if (v instanceof EndOfTrack) {
        return new Data_Generic.SProd("MidiJsTypes.EndOfTrack", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            } ]);
        } ]);
    };
    if (v instanceof MidiChannelPrefix) {
        return new Data_Generic.SProd("MidiJsTypes.MidiChannelPrefix", [ function ($dollarq) {
            return new Data_Generic.SRecord([ {
                recLabel: "channel", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0.channel);
                }
            }, {
                recLabel: "deltaTime", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0.deltaTime);
                }
            }, {
                recLabel: "subtype", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0.subtype);
                }
            }, {
                recLabel: "type'", 
                recValue: function ($dollarq1) {
                    return Data_Generic.toSpine(Data_Generic.genericString)(v.value0["type'"]);
                }
            } ]);
        } ]);
    };
    throw new Error("Failed pattern match at MidiJsTypes line 80, column 1 - line 81, column 1: " + [ v.constructor.name ]);
});
var showMidiEvent = new Prelude.Show(Data_Generic.gShow(genericMidiEvent));
var eqMidiEvent = new Prelude.Eq(function (x) {
    return function (y) {
        if (x instanceof TrackName && y instanceof TrackName) {
            return x.value0.deltaTime === y.value0.deltaTime && x.value0.subtype === y.value0.subtype && x.value0.text === y.value0.text && x.value0["type'"] === y.value0["type'"];
        };
        if (x instanceof InstrumentName && y instanceof InstrumentName) {
            return x.value0.deltaTime === y.value0.deltaTime && x.value0.subtype === y.value0.subtype && x.value0.text === y.value0.text && x.value0["type'"] === y.value0["type'"];
        };
        if (x instanceof TimeSignature && y instanceof TimeSignature) {
            return x.value0.deltaTime === y.value0.deltaTime && x.value0.denominator === y.value0.denominator && x.value0.metronome === y.value0.metronome && x.value0.numerator === y.value0.numerator && x.value0.subtype === y.value0.subtype && x.value0.thirtyseconds === y.value0.thirtyseconds && x.value0["type'"] === y.value0["type'"];
        };
        if (x instanceof KeySignature && y instanceof KeySignature) {
            return x.value0.deltaTime === y.value0.deltaTime && x.value0.key === y.value0.key && x.value0.scale === y.value0.scale && x.value0.subtype === y.value0.subtype && x.value0.text === y.value0.text;
        };
        if (x instanceof Marker && y instanceof Marker) {
            return x.value0.deltaTime === y.value0.deltaTime && x.value0.subtype === y.value0.subtype && x.value0.text === y.value0.text && x.value0["type'"] === y.value0["type'"];
        };
        if (x instanceof SmpteOffset && y instanceof SmpteOffset) {
            return x.value0.deltaTime === y.value0.deltaTime && x.value0.frame === y.value0.frame && x.value0.frameRate === y.value0.frameRate && x.value0.hour === y.value0.hour && x.value0.minute === y.value0.minute && x.value0.sec === y.value0.sec && x.value0.subFrame === y.value0.subFrame && x.value0.subtype === y.value0.subtype && x.value0["type'"] === y.value0["type'"];
        };
        if (x instanceof ProgramChange && y instanceof ProgramChange) {
            return x.value0.channel === y.value0.channel && x.value0.deltaTime === y.value0.deltaTime && x.value0.programNumber === y.value0.programNumber && x.value0.subtype === y.value0.subtype && x.value0["type'"] === y.value0["type'"];
        };
        if (x instanceof Controller && y instanceof Controller) {
            return x.value0.channel === y.value0.channel && x.value0.controllerType === y.value0.controllerType && x.value0.deltaTime === y.value0.deltaTime && x.value0["type'"] === y.value0["type'"] && x.value0.value === y.value0.value;
        };
        if (x instanceof SetTempo && y instanceof SetTempo) {
            return x.value0.deltaTime === y.value0.deltaTime && x.value0.microsecondsPerBeat === y.value0.microsecondsPerBeat && x.value0.subtype === y.value0.subtype && x.value0["type'"] === y.value0["type'"];
        };
        if (x instanceof NoteOn && y instanceof NoteOn) {
            return x.value0.channel === y.value0.channel && x.value0.deltaTime === y.value0.deltaTime && x.value0.noteNumber === y.value0.noteNumber && x.value0.subtype === y.value0.subtype && x.value0["type'"] === y.value0["type'"] && x.value0.velocity === y.value0.velocity;
        };
        if (x instanceof NoteOff && y instanceof NoteOff) {
            return x.value0.channel === y.value0.channel && x.value0.deltaTime === y.value0.deltaTime && x.value0.noteNumber === y.value0.noteNumber && x.value0.subtype === y.value0.subtype && x.value0["type'"] === y.value0["type'"] && x.value0.velocity === y.value0.velocity;
        };
        if (x instanceof EndOfTrack && y instanceof EndOfTrack) {
            return x.value0.deltaTime === y.value0.deltaTime && x.value0.subtype === y.value0.subtype && x.value0["type'"] === y.value0["type'"];
        };
        if (x instanceof MidiChannelPrefix && y instanceof MidiChannelPrefix) {
            return x.value0.channel === y.value0.channel && x.value0.deltaTime === y.value0.deltaTime && x.value0.subtype === y.value0.subtype && x.value0["type'"] === y.value0["type'"];
        };
        return false;
    };
});
module.exports = {
    TrackName: TrackName, 
    InstrumentName: InstrumentName, 
    TimeSignature: TimeSignature, 
    KeySignature: KeySignature, 
    Marker: Marker, 
    SmpteOffset: SmpteOffset, 
    ProgramChange: ProgramChange, 
    Controller: Controller, 
    SetTempo: SetTempo, 
    NoteOn: NoteOn, 
    NoteOff: NoteOff, 
    EndOfTrack: EndOfTrack, 
    MidiChannelPrefix: MidiChannelPrefix, 
    eqMidiEvent: eqMidiEvent, 
    genericMidiEvent: genericMidiEvent, 
    showMidiEvent: showMidiEvent
};

},{"Data.Generic":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Generic/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiPlayer/foreign.js":[function(require,module,exports){
// module MidiPlayer

module.exports = {
    
    loadPlugin: function(config) {
        return function(callback) {
            return function() {
                window.onload = function() {
                    MIDI.loadPlugin(
                        extend_TODO_eliminate({
		            onprogress: function(state, progress) {
			        console.log('onprogress:', state, progress);
		            },
                            onsuccess: function() {
                                callback()();
                            }
                        }, config
					     ));
                };
            };
        };
    },

    setVolume: function(channel) {
        return function(volume) {
            return function() {
                MIDI.setVolume(channel, volume);
            };
        };
    },

    loadFile: function(dataUrl) {
	return function () {
	    console.log('loadFile: MIDI = ', MIDI);
	    MIDI.Player.loadFile(dataUrl);
	};
    },
    
    play: function() {
	console.log('play: MIDI = ', MIDI);
	MIDI.Player.start();
    },

    stop: function() {
	console.log('stop: MIDI = ', MIDI);
	MIDI.Player.stop();
    },

    pause: function() {
	console.log('pause: MIDI = ', MIDI);
	MIDI.Player.pause();
    },
    
    resume: function() {
	console.log('resume: MIDI = ', MIDI);
	MIDI.Player.resume();
    },
    
    currentTime: function() {
	console.log('currentTime: MIDI = ', MIDI);
	MIDI.Player.currentTime();
    },

    endTime: function() {
	console.log('endTime: MIDI = ', MIDI);
	MIDI.Player.endTime();
    },

    setCurrentTime: function(r) {
    	return function () {
    	    console.log('Change and skip to current time: MIDI = ', MIDI);
    	    MIDI.Player.currentTime = r;
    	};
    },
    
    playing: function() {
	console.log('playing MIDI = ', MIDI);
	MIDI.Player.playing();
    },

    addEventListener: function() {
	console.log('addEventListener MIDI = ', MIDI);
	MIDI.Player.addEventListener();
    }, 

    removeEventListener: function() {
	console.log('removeEventListener MIDI = ', MIDI);
	MIDI.Player.removeEventListener();
    },

    getData: function() {
	console.log(MIDI.Player.replayer.getData());
	var recData = new MIDI.Player.replayer.getData();
	var midiObjects = recData.map(function(record){
	    return record[0].event;
	});
	return midiObjects;
    },

    getTicksPerBeat: function() {
	return MidiFile(MIDI.Player.currentData).header.ticksPerBeat;
    },

    logger: function(a) {
	return function() {
	    console.log(a);
	};
    }

};

// TODO eliminate
var extend_TODO_eliminate = function(defaults, options) {
    var extended = {};
    var prop;
    for (prop in defaults) {
        if (Object.prototype.hasOwnProperty.call(defaults, prop)) {
            extended[prop] = defaults[prop];
        }
    }
    for (prop in options) {
        if (Object.prototype.hasOwnProperty.call(options, prop)) {
            extended[prop] = options[prop];
        }
    }
    return extended;
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiPlayer/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var MidiJsTypes = require("MidiJsTypes");
var Data_Foreign = require("Data.Foreign");
module.exports = {
    logger: $foreign.logger, 
    getTicksPerBeat: $foreign.getTicksPerBeat, 
    getData: $foreign.getData, 
    removeEventListener: $foreign.removeEventListener, 
    addEventListener: $foreign.addEventListener, 
    playing: $foreign.playing, 
    setCurrentTime: $foreign.setCurrentTime, 
    endtime: $foreign.endtime, 
    currentTime: $foreign.currentTime, 
    resume: $foreign.resume, 
    pause: $foreign.pause, 
    stop: $foreign.stop, 
    play: $foreign.play, 
    loadFile: $foreign.loadFile, 
    setVolume: $foreign.setVolume, 
    loadPlugin: $foreign.loadPlugin
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiPlayer/foreign.js","Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js","Data.Foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foreign/index.js","MidiJsTypes":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiJsTypes/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiToVexFlow/foreign.js":[function(require,module,exports){
// module MidiToVexFlow
var mjt = require('MidiJsTypes');

// MidiEventRec -> MidiEventFoo
module.exports = {

    unsafeF1: function(midiEventRec) {
	var res = null;
	console.log('unsafeF1: midiEventRec = ', midiEventRec);
	if (midiEventRec.subtype == 'noteOn')      {
	    res = new mjt.NoteOn(midiEventRec);
	}
	else if (midiEventRec.subtype == 'noteOff')      {
	    res = new mjt.NoteOff(midiEventRec);
	}
	else if (midiEventRec.subtype == 'timeSignature')      {
	    res = new mjt.TimeSignature(midiEventRec);
	}
	else if (midiEventRec.subtype == 'keySignature')      {
	    res = new mjt.KeySignature(midiEventRec);
	}
	else if (midiEventRec.subtype == 'smpteOffset')      {
	    res = new mjt.SmpteOffset(midiEventRec);
	}
	else if (midiEventRec.subtype == 'setTempo')      {
	    res = new mjt.SetTempo(midiEventRec);
	}
	else if (midiEventRec.subtype == 'endOfTrack')      {
	    res = new mjt.EndOfTrack(midiEventRec);
	}
	else if (midiEventRec.subtype == 'programChange')      {
	    res = new mjt.ProgramChange(midiEventRec);
	}
	else if (midiEventRec.subtype == 'controller')      {
	    res = new mjt.Controller(midiEventRec);
	}
	else if (midiEventRec.subtype == 'trackName')      {
	    res = new mjt.TrackName(midiEventRec);
	}
	else if (midiEventRec.subtype == 'instrumentName') {
	    res = new mjt.InstrumentName(midiEventRec);
	}
	else if (midiEventRec.subtype == 'midiChannelPrefix') {
	    res = new mjt.MidiChannelPrefix(midiEventRec);
	}
	else if (midiEventRec.subtype == 'marker') {
	    res = new mjt.Marker(midiEventRec);
	}
	console.log('res =', res);
	if (!res) throw new Error('Pattern match on subtype field failed.');
	return res;
    }
};

},{"MidiJsTypes":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiJsTypes/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiToVexFlow/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Data_List_2 = require("Data.List");
var Data_Either = require("Data.Either");
var Data_Foreign = require("Data.Foreign");
var Data_Tuple = require("Data.Tuple");
var MidiJsTypes = require("MidiJsTypes");
var MidiPlayer = require("MidiPlayer");
var MidiJS = require("MidiJS");
var VexMusic = require("VexMusic");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var VexFlow = require("VexFlow");
var Data_Int = require("Data.Int");
var Data_List_2 = require("Data.List");
var Data_List_2 = require("Data.List");
var Quantizer = require("Quantizer");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_List_Lazy = require("Data.List.Lazy");
var toArray = function (lst) {
    return Data_List_2.toUnfoldable(Data_Unfoldable.unfoldableArray)(Prelude.map(Data_List_2.functorList)(function (x) {
        return Data_List_2.toUnfoldable(Data_Unfoldable.unfoldableArray)(x);
    })(lst));
};
var setFirstTie = function (midiNote) {
    var $32 = {};
    for (var $33 in midiNote) {
        if (midiNote.hasOwnProperty($33)) {
            $32[$33] = midiNote[$33];
        };
    };
    $32.hasFirstTie = true;
    return $32;
};
var setEndingTie = function (midiNote) {
    var $34 = {};
    for (var $35 in midiNote) {
        if (midiNote.hasOwnProperty($35)) {
            $34[$35] = midiNote[$35];
        };
    };
    $34.hasEndingTie = true;
    return $34;
};
var setDot = function (midiNote) {
    var $36 = {};
    for (var $37 in midiNote) {
        if (midiNote.hasOwnProperty($37)) {
            $36[$37] = midiNote[$37];
        };
    };
    $36.hasDot = true;
    return $36;
};
var setDots = function (__copy_v) {
    return function (__copy_v1) {
        return function (__copy_v2) {
            return function (__copy_accXs) {
                return function (__copy_v3) {
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    var v2 = __copy_v2;
                    var accXs = __copy_accXs;
                    var v3 = __copy_v3;
                    tco: while (true) {
                        if (v3 instanceof Data_List_2.Nil) {
                            return new Data_List_2.Cons(accXs, Data_List_2.Nil.value);
                        };
                        if (v3 instanceof Data_List_2.Cons && (v2 === 0.0 && v3.value0.deltaTime === v * 1.5 || (v2 === v / 2.0 && v3.value0.deltaTime === v * 1.5 || (v2 === (v / 2.0) * 4.0 && v3.value0.deltaTime === v * 1.5 || v2 === (v / 2.0) * 5.0 && v3.value0.deltaTime === v * 1.5)))) {
                            var __tco_v = v;
                            var __tco_v1 = v1;
                            var __tco_v2 = v3.value0.deltaTime + v2;
                            var __tco_accXs = Data_List_2.snoc(accXs)(setDot(v3.value0));
                            var __tco_v3 = v3.value1;
                            v = __tco_v;
                            v1 = __tco_v1;
                            v2 = __tco_v2;
                            accXs = __tco_accXs;
                            v3 = __tco_v3;
                            continue tco;
                        };
                        if (v3 instanceof Data_List_2.Cons) {
                            var __tco_v = v;
                            var __tco_v1 = v1;
                            var __tco_v2 = v3.value0.deltaTime + v2;
                            var __tco_accXs = Data_List_2.snoc(accXs)(v3.value0);
                            var __tco_v3 = v3.value1;
                            v = __tco_v;
                            v1 = __tco_v1;
                            v2 = __tco_v2;
                            accXs = __tco_accXs;
                            v3 = __tco_v3;
                            continue tco;
                        };
                        throw new Error("Failed pattern match at MidiToVexFlow line 113, column 1 - line 114, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, accXs.constructor.name, v3.constructor.name ]);
                    };
                };
            };
        };
    };
};
var separateStaff = function (v) {
    if (v instanceof Data_List_2.Nil) {
        return Data_List_2.Nil.value;
    };
    if (v instanceof Data_List_2.Cons && (v.value0 instanceof MidiJsTypes.NoteOn && v.value0.value0.noteNumber > 59)) {
        return new Data_List_2.Cons(v.value0, separateStaff(v.value1));
    };
    if (v instanceof Data_List_2.Cons && (v.value0 instanceof MidiJsTypes.NoteOff && v.value0.value0.noteNumber > 59)) {
        return new Data_List_2.Cons(v.value0, separateStaff(v.value1));
    };
    if (v instanceof Data_List_2.Cons) {
        return separateStaff(v.value1);
    };
    throw new Error("Failed pattern match at MidiToVexFlow line 232, column 1 - line 233, column 1: " + [ v.constructor.name ]);
};
var replaceBy = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v3 instanceof Data_List_2.Nil) {
                    return Data_List_2.Nil.value;
                };
                if (v3 instanceof Data_List_2.Cons && v(v1)(v3.value0)) {
                    return new Data_List_2.Cons(v2, v3.value1);
                };
                if (v3 instanceof Data_List_2.Cons) {
                    return new Data_List_2.Cons(v3.value0, replaceBy(v)(v1)(v2)(v3.value1));
                };
                throw new Error("Failed pattern match at MidiToVexFlow line 266, column 1 - line 267, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
            };
        };
    };
};
var position = function (ticksPerBeat) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_2.Nil) {
                return Data_List_2.Nil.value;
            };
            if (v1 instanceof Data_List_2.Cons && v1.value1 instanceof Data_List_2.Nil) {
                return Data_List_2.Nil.value;
            };
            if (v1 instanceof Data_List_2.Cons && (v1.value1 instanceof Data_List_2.Cons && v1.value1.value1 instanceof Data_List_2.Nil)) {
                return new Data_List_2.Cons(new Data_Tuple.Tuple(v + v1.value0.deltaTime, v1.value1.value0), Data_List_2.Nil.value);
            };
            if (v1 instanceof Data_List_2.Cons && v1.value1 instanceof Data_List_2.Cons) {
                return new Data_List_2.Cons(new Data_Tuple.Tuple(Data_Int.toNumber(Data_Int.round(v1.value0.deltaTime + v) % Data_Int.round(ticksPerBeat * 4.0)), v1.value1.value0), position(ticksPerBeat)(v + v1.value0.deltaTime)(new Data_List_2.Cons(v1.value1.value0, v1.value1.value1)));
            };
            throw new Error("Failed pattern match at MidiToVexFlow line 130, column 1 - line 131, column 1: " + [ ticksPerBeat.constructor.name, v.constructor.name, v1.constructor.name ]);
        };
    };
};
var position$prime = function (ticksPerBeat) {
    return function (v) {
        if (v instanceof Data_List_2.Cons) {
            return new Data_List_2.Cons(new Data_Tuple.Tuple(0.0, v.value0), position(ticksPerBeat)(0.0)(new Data_List_2.Cons(v.value0, v.value1)));
        };
        throw new Error("Failed pattern match at MidiToVexFlow line 127, column 1 - line 129, column 1: " + [ ticksPerBeat.constructor.name, v.constructor.name ]);
    };
};
var midiNoteToVexTone = function (midiNote) {
    return {
        pitch: Data_Tuple.fst(VexMusic.midiNoteToPartialVexFlowNote(midiNote % 12)), 
        accidental: Data_Tuple.snd(VexMusic.midiNoteToPartialVexFlowNote(midiNote % 12)), 
        octave: VexMusic.midiNoteToOctave(midiNote)
    };
};
var midiNoteToVexNote = function (ticksPerBeat) {
    return function (x) {
        return {
            note: [ midiNoteToVexTone(x.noteNumber) ], 
            duration: VexMusic.deltaTimeToVexFlowDuration(ticksPerBeat)(x.deltaTime)
        };
    };
};
var midiNoteToVexFlowNote = function (ticksPerBeat) {
    return function (x) {
        return {
            pitch: [ VexMusic.vexNoteToVexFlowPitch(midiNoteToVexTone(x.noteNumber)) ], 
            duration: VexMusic.deltaTimeToVexFlowDuration(ticksPerBeat)(x.deltaTime)
        };
    };
};
var midiEventWriter = Prelude.map(Data_List_2.functorList)(function (midiObject) {
    return new Data_Tuple.Tuple(midiObject, false);
});
var metsj = function (v) {
    if (v instanceof MidiJsTypes.NoteOn) {
        return true;
    };
    if (v instanceof MidiJsTypes.NoteOff) {
        return true;
    };
    return false;
};
var maybeToInt = function (v) {
    if (v instanceof Data_List_2.Nil) {
        return Data_List_2.Nil.value;
    };
    if (v instanceof Data_List_2.Cons && v.value0 instanceof Data_Maybe.Nothing) {
        return maybeToInt(v.value1);
    };
    if (v instanceof Data_List_2.Cons) {
        return new Data_List_2.Cons(VexFlow.fromJust(v.value0), maybeToInt(v.value1));
    };
    throw new Error("Failed pattern match at MidiToVexFlow line 257, column 1 - line 258, column 1: " + [ v.constructor.name ]);
};
var insertNewDeltaTime = function (n) {
    return function (midiNote) {
        var $89 = {};
        for (var $90 in midiNote) {
            if (midiNote.hasOwnProperty($90)) {
                $89[$90] = midiNote[$90];
            };
        };
        $89.noteNumber = midiNote.noteNumber;
        $89.deltaTime = n;
        return $89;
    };
};
var setTies = function (ticksPerBeat) {
    return function (numerator) {
        return function (accumulatedDeltaTime) {
            return function (accNotes) {
                return function (v) {
                    if (v instanceof Data_List_2.Nil) {
                        return new Data_List_2.Cons(accNotes, Data_List_2.Nil.value);
                    };
                    if (v instanceof Data_List_2.Cons) {
                        var resolution = ticksPerBeat / 4.0;
                        var lastNoteDeltaTime = ticksPerBeat - accumulatedDeltaTime;
                        var newFirstNoteDeltaTime = v.value0.deltaTime - lastNoteDeltaTime;
                        var dt = accumulatedDeltaTime + v.value0.deltaTime;
                        var $96 = dt < ticksPerBeat;
                        if ($96) {
                            return setTies(ticksPerBeat)(numerator)(dt)(Data_List_2.snoc(accNotes)(v.value0))(v.value1);
                        };
                        if (!$96) {
                            var $97 = dt === ticksPerBeat;
                            if ($97) {
                                return new Data_List_2.Cons(Data_List_2.snoc(accNotes)(v.value0), setTies(ticksPerBeat)(numerator)(0.0)(Data_List_2.Nil.value)(v.value1));
                            };
                            if (!$97) {
                                var $98 = dt === 2.0 * ticksPerBeat && (accumulatedDeltaTime === 0.0 || accumulatedDeltaTime === 960.0);
                                if ($98) {
                                    return new Data_List_2.Cons(Data_List_2.snoc(accNotes)(v.value0), setTies(ticksPerBeat)(numerator)(Prelude.mod(Prelude.moduloSemiringNumber)(ticksPerBeat * 4.0 - accumulatedDeltaTime)(ticksPerBeat * 4.0))(Data_List_2.Nil.value)(v.value1));
                                };
                                if (!$98) {
                                    var $99 = dt === 4.0 * ticksPerBeat;
                                    if ($99) {
                                        return new Data_List_2.Cons(Data_List_2.snoc(accNotes)(v.value0), setTies(ticksPerBeat)(numerator)(0.0)(Data_List_2.Nil.value)(v.value1));
                                    };
                                    if (!$99) {
                                        var $100 = dt > ticksPerBeat && v.value0.hasDot;
                                        if ($100) {
                                            return new Data_List_2.Cons(Data_List_2.snoc(accNotes)(v.value0), setTies(ticksPerBeat)(numerator)((function () {
                                                var $101 = accumulatedDeltaTime === 0.0;
                                                if ($101) {
                                                    return resolution;
                                                };
                                                if (!$101) {
                                                    return 0.0;
                                                };
                                                throw new Error("Failed pattern match at MidiToVexFlow line 98, column 69 - line 98, column 124: " + [ $101.constructor.name ]);
                                            })())(Data_List_2.Nil.value)(v.value1));
                                        };
                                        if (!$100) {
                                            return new Data_List_2.Cons(Data_List_2.snoc(accNotes)(setFirstTie(insertNewDeltaTime(lastNoteDeltaTime)(v.value0))), setTies(ticksPerBeat)(numerator)(0.0)(Data_List_2.Nil.value)(new Data_List_2.Cons(setEndingTie(insertNewDeltaTime(newFirstNoteDeltaTime)(v.value0)), v.value1)));
                                        };
                                        throw new Error("Failed pattern match at MidiToVexFlow line 97, column 17 - line 101, column 3: " + [ $100.constructor.name ]);
                                    };
                                    throw new Error("Failed pattern match at MidiToVexFlow line 95, column 8 - line 101, column 3: " + [ $99.constructor.name ]);
                                };
                                throw new Error("Failed pattern match at MidiToVexFlow line 93, column 8 - line 101, column 3: " + [ $98.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at MidiToVexFlow line 91, column 8 - line 101, column 3: " + [ $97.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at MidiToVexFlow line 89, column 3 - line 101, column 3: " + [ $96.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at MidiToVexFlow line 87, column 1 - line 88, column 1: " + [ ticksPerBeat.constructor.name, numerator.constructor.name, accumulatedDeltaTime.constructor.name, accNotes.constructor.name, v.constructor.name ]);
                };
            };
        };
    };
};
var getNumerator = function (__copy_v) {
    var v = __copy_v;
    tco: while (true) {
        if (v instanceof Data_List_2.Cons && v.value0 instanceof MidiJsTypes.TimeSignature) {
            return v.value0.value0.numerator;
        };
        if (v instanceof Data_List_2.Cons) {
            var __tco_v = v.value1;
            v = __tco_v;
            continue tco;
        };
        throw new Error("Failed pattern match at MidiToVexFlow line 222, column 1 - line 223, column 1: " + [ v.constructor.name ]);
    };
};
var getDeltaTimeNotes = function (v) {
    if (v instanceof Data_List_2.Nil) {
        return Data_List_2.Nil.value;
    };
    if (v instanceof Data_List_2.Cons && v.value0 instanceof MidiJsTypes.NoteOn) {
        return new Data_List_2.Cons(v.value0.value0.deltaTime, getDeltaTimeNotes(v.value1));
    };
    if (v instanceof Data_List_2.Cons && v.value0 instanceof MidiJsTypes.NoteOff) {
        return new Data_List_2.Cons(v.value0.value0.deltaTime, getDeltaTimeNotes(v.value1));
    };
    if (v instanceof Data_List_2.Cons) {
        return getDeltaTimeNotes(v.value1);
    };
    throw new Error("Failed pattern match at MidiToVexFlow line 226, column 1 - line 227, column 1: " + [ v.constructor.name ]);
};
var fromRight = function (v) {
    if (v instanceof Data_Either.Right) {
        return v.value0;
    };
    throw new Error("Failed pattern match at MidiToVexFlow line 275, column 1 - line 275, column 23: " + [ v.constructor.name ]);
};
var findStartingTie = VexFlow.mapWithIndex(function (note) {
    return function (i) {
        if (note.hasFirstTie) {
            return new Data_Maybe.Just(i);
        };
        if (!note.hasFirstTie) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at MidiToVexFlow line 239, column 44 - line 239, column 88: " + [ note.hasFirstTie.constructor.name ]);
    };
});
var findNoteOff = function (__copy_v) {
    return function (__copy_v1) {
        var v = __copy_v;
        var v1 = __copy_v1;
        tco: while (true) {
            if (v1 instanceof Data_List_2.Nil) {
                return new Data_Either.Left("No corresponding unread noteOff found.");
            };
            if (v1 instanceof Data_List_2.Cons && v1.value0.value0 instanceof MidiJsTypes.NoteOff) {
                var $124 = v1.value0.value0.value0.noteNumber === v && !v1.value0.value1;
                if ($124) {
                    return new Data_Either.Right(v1.value0);
                };
                if (!$124) {
                    var __tco_v = v;
                    var __tco_v1 = v1.value1;
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                throw new Error("Failed pattern match at MidiToVexFlow line 196, column 3 - line 203, column 1: " + [ $124.constructor.name ]);
            };
            if (v1 instanceof Data_List_2.Cons) {
                var __tco_v = v;
                var __tco_v1 = v1.value1;
                v = __tco_v;
                v1 = __tco_v1;
                continue tco;
            };
            throw new Error("Failed pattern match at MidiToVexFlow line 194, column 1 - line 195, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var eighthsIndex$prime = function (ticksPerBeat) {
    var indexed = function (notes) {
        return Data_List_Lazy.toUnfoldable(Data_List_2.unfoldableList)(Data_List_Lazy.zip(Data_List_Lazy.iterate(function (v) {
            return v + 1 | 0;
        })(0))(Data_List_Lazy.fromFoldable(Data_List_2.foldableList)(position$prime(ticksPerBeat)(notes))));
    };
    return function ($205) {
        return Prelude.map(Data_List_2.functorList)(function (v) {
            return new Data_Tuple.Tuple(v.value0, v.value1.value0);
        })(Data_List_2.filter(function (v) {
            return v.value1.value1.deltaTime <= (ticksPerBeat / 2.0) * 1.5;
        })(indexed($205)));
    };
};
var divideIntoMeasures = function (ticksPerBeat) {
    return function (numerator) {
        return function (accumulatedDeltaTime) {
            return function (accNotes) {
                return function (v) {
                    if (v instanceof Data_List_2.Nil) {
                        return Data_List_2.Nil.value;
                    };
                    if (v instanceof Data_List_2.Cons) {
                        var measure = ticksPerBeat * Data_Int.toNumber(numerator);
                        var lastNoteDeltaTime = measure - accumulatedDeltaTime;
                        var newFirstNoteDeltaTime = v.value0.deltaTime - lastNoteDeltaTime;
                        var dt = accumulatedDeltaTime + v.value0.deltaTime;
                        var $147 = dt < measure;
                        if ($147) {
                            return divideIntoMeasures(ticksPerBeat)(numerator)(dt)(Data_List_2.snoc(accNotes)(v.value0))(v.value1);
                        };
                        if (!$147) {
                            var $148 = dt === measure;
                            if ($148) {
                                return new Data_List_2.Cons(Data_List_2.snoc(accNotes)(v.value0), divideIntoMeasures(ticksPerBeat)(numerator)(0.0)(Data_List_2.Nil.value)(v.value1));
                            };
                            if (!$148) {
                                return new Data_List_2.Cons(Data_List_2.snoc(accNotes)(setFirstTie(insertNewDeltaTime(lastNoteDeltaTime)(v.value0))), divideIntoMeasures(ticksPerBeat)(numerator)(0.0)(Data_List_2.Nil.value)(new Data_List_2.Cons(setEndingTie(insertNewDeltaTime(newFirstNoteDeltaTime)(v.value0)), v.value1)));
                            };
                            throw new Error("Failed pattern match at MidiToVexFlow line 73, column 8 - line 78, column 3: " + [ $148.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at MidiToVexFlow line 71, column 3 - line 78, column 3: " + [ $147.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at MidiToVexFlow line 69, column 1 - line 70, column 1: " + [ ticksPerBeat.constructor.name, numerator.constructor.name, accumulatedDeltaTime.constructor.name, accNotes.constructor.name, v.constructor.name ]);
                };
            };
        };
    };
};
var beamsIndex = function (v) {
    return function (accXs) {
        return function (v1) {
            if (v1 instanceof Data_List_2.Nil) {
                return new Data_List_2.Cons(accXs, Data_List_2.Nil.value);
            };
            if (v1 instanceof Data_List_2.Cons && v1.value1 instanceof Data_List_2.Nil) {
                return new Data_List_2.Cons(Data_List_2.snoc(accXs)(Data_Tuple.fst(v1.value0)), Data_List_2.Nil.value);
            };
            if (v1 instanceof Data_List_2.Cons && (v1.value1 instanceof Data_List_2.Cons && Data_Tuple.snd(v1.value0) === (v / 4.0) * 3.0)) {
                return new Data_List_2.Cons(Data_List_2.snoc(accXs)(Data_Tuple.fst(v1.value0)), beamsIndex(v)(Data_List_2.Nil.value)(new Data_List_2.Cons(v1.value1.value0, v1.value1.value1)));
            };
            if (v1 instanceof Data_List_2.Cons && (v1.value1 instanceof Data_List_2.Cons && Data_Tuple.snd(v1.value0) === (v / 4.0) * 11.0)) {
                return new Data_List_2.Cons(Data_List_2.snoc(accXs)(Data_Tuple.fst(v1.value0)), beamsIndex(v)(Data_List_2.Nil.value)(new Data_List_2.Cons(v1.value1.value0, v1.value1.value1)));
            };
            if (v1 instanceof Data_List_2.Cons && (v1.value1 instanceof Data_List_2.Cons && (Data_Tuple.snd(v1.value0) === (v / 2.0) * 3.0 || Data_Tuple.snd(v1.value0) === (v / 4.0) * 7.0))) {
                return new Data_List_2.Cons(Data_List_2.snoc(accXs)(Data_Tuple.fst(v1.value0)), beamsIndex(v)(Data_List_2.Nil.value)(new Data_List_2.Cons(v1.value1.value0, v1.value1.value1)));
            };
            if (v1 instanceof Data_List_2.Cons && (v1.value1 instanceof Data_List_2.Cons && Data_Tuple.fst(v1.value0) !== Data_Tuple.fst(v1.value1.value0) - 1)) {
                return new Data_List_2.Cons(accXs, beamsIndex(v)(Data_List_2.Nil.value)(new Data_List_2.Cons(v1.value1.value0, v1.value1.value1)));
            };
            if (v1 instanceof Data_List_2.Cons && (v1.value1 instanceof Data_List_2.Cons && Data_Tuple.fst(v1.value0) === Data_Tuple.fst(v1.value1.value0) - 1)) {
                return beamsIndex(v)(Data_List_2.snoc(accXs)(Data_Tuple.fst(v1.value0)))(new Data_List_2.Cons(v1.value1.value0, v1.value1.value1));
            };
            throw new Error("Failed pattern match at MidiToVexFlow line 139, column 1 - line 140, column 1: " + [ v.constructor.name, accXs.constructor.name, v1.constructor.name ]);
        };
    };
};
var accumulateDeltaTime = function (__copy_v) {
    return function (__copy_v1) {
        return function (__copy_v2) {
            var v = __copy_v;
            var v1 = __copy_v1;
            var v2 = __copy_v2;
            tco: while (true) {
                if (v2 instanceof Data_List_2.Nil) {
                    return 0.0;
                };
                if (v2 instanceof Data_List_2.Cons && v2.value0.value0 instanceof MidiJsTypes.NoteOn) {
                    var __tco_v = v;
                    var __tco_v1 = v1 + v2.value0.value0.value0.deltaTime;
                    var __tco_v2 = v2.value1;
                    v = __tco_v;
                    v1 = __tco_v1;
                    v2 = __tco_v2;
                    continue tco;
                };
                if (v2 instanceof Data_List_2.Cons && v2.value0.value0 instanceof MidiJsTypes.NoteOff) {
                    var $184 = v2.value0.value0.value0.noteNumber === v && !v2.value0.value1;
                    if ($184) {
                        return v1 + v2.value0.value0.value0.deltaTime;
                    };
                    if (!$184) {
                        var __tco_v = v;
                        var __tco_v1 = v1 + v2.value0.value0.value0.deltaTime;
                        var __tco_v2 = v2.value1;
                        v = __tco_v;
                        v1 = __tco_v1;
                        v2 = __tco_v2;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at MidiToVexFlow line 187, column 75 - line 190, column 1: " + [ $184.constructor.name ]);
                };
                if (v2 instanceof Data_List_2.Cons) {
                    var __tco_v = v;
                    var __tco_v1 = v1;
                    var __tco_v2 = v2.value1;
                    v = __tco_v;
                    v1 = __tco_v1;
                    v2 = __tco_v2;
                    continue tco;
                };
                throw new Error("Failed pattern match at MidiToVexFlow line 185, column 1 - line 186, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
};
var calculateDuration = function (v) {
    if (v instanceof Data_List_2.Nil) {
        return Data_List_2.Nil.value;
    };
    if (v instanceof Data_List_2.Cons && v.value0.value0 instanceof MidiJsTypes.NoteOn) {
        var toRead = function (v1) {
            return new Data_Tuple.Tuple(v1.value0, true);
        };
        var noteOff = fromRight(findNoteOff(v.value0.value0.value0.noteNumber)(v.value1));
        var $196 = v.value0.value0.value0.subtype === "noteOn";
        if ($196) {
            return new Data_List_2.Cons({
                noteNumber: v.value0.value0.value0.noteNumber, 
                deltaTime: accumulateDeltaTime(v.value0.value0.value0.noteNumber)(0.0)(v) - v.value0.value0.value0.deltaTime, 
                hasFirstTie: false, 
                hasEndingTie: false, 
                hasDot: false
            }, calculateDuration(replaceBy(Prelude["=="](Data_Tuple.eqTuple(MidiJsTypes.eqMidiEvent)(Prelude.eqBoolean)))(noteOff)(toRead(noteOff))(v.value1)));
        };
        if (!$196) {
            return calculateDuration(v.value1);
        };
        throw new Error("Failed pattern match at MidiToVexFlow line 166, column 3 - line 174, column 3: " + [ $196.constructor.name ]);
    };
    if (v instanceof Data_List_2.Cons) {
        return calculateDuration(v.value1);
    };
    throw new Error("Failed pattern match at MidiToVexFlow line 164, column 1 - line 165, column 1: " + [ v.constructor.name ]);
};
var renderMidiPuurJwt = function (midiData) {
    return function (ticksPerBeat) {
        var safeData = Data_List_2.toList(Data_Foldable.foldableArray)(Prelude.map(Prelude.functorArray)($foreign.unsafeF1)(midiData));
        var numerator = getNumerator(safeData);
        var midiNotes = Data_List_2.filter(function (x) {
            return x.noteNumber > 0;
        })(Prelude.map(Data_List_2.functorList)(Quantizer.quantizeNote(ticksPerBeat)(0.0))(calculateDuration(Prelude.map(Data_List_2.functorList)(function (midiObject) {
            return new Data_Tuple.Tuple(midiObject, false);
        })(Data_List_2.filter(metsj)(Data_List_2.toList(Data_List_2.foldableList)(safeData))))));
        var measuredMidi = Prelude.map(Data_List_2.functorList)(function ($206) {
            return Data_List_2.concat(setTies(ticksPerBeat)(numerator)(0.0)(Data_List_2.Nil.value)(Data_List_2.concat(setDots(ticksPerBeat)(numerator)(0.0)(Data_List_2.Nil.value)($206))));
        })(divideIntoMeasures(ticksPerBeat)(numerator)(0.0)(Data_List_2.Nil.value)(midiNotes));
        var foo = toArray(Prelude.map(Data_List_2.functorList)(position$prime(ticksPerBeat))(measuredMidi));
        var vexNotes = Prelude.map(Prelude.functorArray)(function (x) {
            return [ Prelude.map(Prelude.functorArray)(midiNoteToVexNote(ticksPerBeat))(x) ];
        })(toArray(measuredMidi));
        var vexFlowNotes = Prelude.map(Prelude.functorArray)(function (x) {
            return [ Prelude.map(Prelude.functorArray)(midiNoteToVexFlowNote(ticksPerBeat))(x) ];
        })(toArray(measuredMidi));
        var indexedTies = toArray(Prelude.map(Data_List_2.functorList)(function ($207) {
            return maybeToInt(findStartingTie($207));
        })(measuredMidi));
        var indexedBeams = Data_List_2.toUnfoldable(Data_Unfoldable.unfoldableArray)(Prelude.map(Data_List_2.functorList)(function ($208) {
            return toArray(beamsIndex(ticksPerBeat)(Data_List_2.Nil.value)(eighthsIndex$prime(ticksPerBeat)($208)));
        })(measuredMidi));
        return {
            vexFlowNotes: vexFlowNotes, 
            vexNotes: vexNotes, 
            indexedTies: indexedTies, 
            indexedBeams: indexedBeams, 
            numerator: numerator, 
            foo: foo
        };
    };
};
var renderMidi = function (canvas) {
    return function (d) {
        return function __do() {
            var v = MidiPlayer.getTicksPerBeat();
            var x = renderMidiPuurJwt(d)(v);
            return VexFlow.renderNotation(canvas)(x.vexFlowNotes)(x.vexNotes)(x.indexedTies)(x.indexedBeams)(x.numerator)(x.foo)();
        };
    };
};
module.exports = {
    fromRight: fromRight, 
    toArray: toArray, 
    replaceBy: replaceBy, 
    maybeToInt: maybeToInt, 
    midiNoteToVexTone: midiNoteToVexTone, 
    midiNoteToVexNote: midiNoteToVexNote, 
    midiNoteToVexFlowNote: midiNoteToVexFlowNote, 
    findStartingTie: findStartingTie, 
    separateStaff: separateStaff, 
    getDeltaTimeNotes: getDeltaTimeNotes, 
    getNumerator: getNumerator, 
    metsj: metsj, 
    findNoteOff: findNoteOff, 
    accumulateDeltaTime: accumulateDeltaTime, 
    calculateDuration: calculateDuration, 
    midiEventWriter: midiEventWriter, 
    setEndingTie: setEndingTie, 
    setFirstTie: setFirstTie, 
    setDot: setDot, 
    beamsIndex: beamsIndex, 
    position: position, 
    "position'": position$prime, 
    "eighthsIndex'": eighthsIndex$prime, 
    setDots: setDots, 
    insertNewDeltaTime: insertNewDeltaTime, 
    setTies: setTies, 
    divideIntoMeasures: divideIntoMeasures, 
    renderMidi: renderMidi, 
    renderMidiPuurJwt: renderMidiPuurJwt, 
    unsafeF1: $foreign.unsafeF1
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiToVexFlow/foreign.js","Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js","Control.Monad.Eff.Console":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff.Console/index.js","Data.Either":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Either/index.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.Foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foreign/index.js","Data.Int":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int/index.js","Data.List":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.List/index.js","Data.List.Lazy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.List.Lazy/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Tuple":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Tuple/index.js","Data.Unfoldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Unfoldable/index.js","MidiJS":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiJS/index.js","MidiJsTypes":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiJsTypes/index.js","MidiPlayer":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiPlayer/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js","Quantizer":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Quantizer/index.js","VexFlow":"/Users/Alko/Coding/purescript/purescript-vexflow/output/VexFlow/index.js","VexMusic":"/Users/Alko/Coding/purescript/purescript-vexflow/output/VexMusic/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Music/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Data_Generic = require("Data.Generic");
var Data_Maybe = require("Data.Maybe");
var SixtyFourth = (function () {
    function SixtyFourth() {

    };
    SixtyFourth.value = new SixtyFourth();
    return SixtyFourth;
})();
var ThirtySecond = (function () {
    function ThirtySecond() {

    };
    ThirtySecond.value = new ThirtySecond();
    return ThirtySecond;
})();
var Sixteenth = (function () {
    function Sixteenth() {

    };
    Sixteenth.value = new Sixteenth();
    return Sixteenth;
})();
var Eighth = (function () {
    function Eighth() {

    };
    Eighth.value = new Eighth();
    return Eighth;
})();
var Quarter = (function () {
    function Quarter() {

    };
    Quarter.value = new Quarter();
    return Quarter;
})();
var Half = (function () {
    function Half() {

    };
    Half.value = new Half();
    return Half;
})();
var Whole = (function () {
    function Whole() {

    };
    Whole.value = new Whole();
    return Whole;
})();
var C = (function () {
    function C() {

    };
    C.value = new C();
    return C;
})();
var D = (function () {
    function D() {

    };
    D.value = new D();
    return D;
})();
var E = (function () {
    function E() {

    };
    E.value = new E();
    return E;
})();
var F = (function () {
    function F() {

    };
    F.value = new F();
    return F;
})();
var G = (function () {
    function G() {

    };
    G.value = new G();
    return G;
})();
var A = (function () {
    function A() {

    };
    A.value = new A();
    return A;
})();
var B = (function () {
    function B() {

    };
    B.value = new B();
    return B;
})();
var Three = (function () {
    function Three() {

    };
    Three.value = new Three();
    return Three;
})();
var Five = (function () {
    function Five() {

    };
    Five.value = new Five();
    return Five;
})();
var Six = (function () {
    function Six() {

    };
    Six.value = new Six();
    return Six;
})();
var Seven = (function () {
    function Seven() {

    };
    Seven.value = new Seven();
    return Seven;
})();
var Even = (function () {
    function Even(value0) {
        this.value0 = value0;
    };
    Even.create = function (value0) {
        return new Even(value0);
    };
    return Even;
})();
var Tuplet = (function () {
    function Tuplet(value0) {
        this.value0 = value0;
    };
    Tuplet.create = function (value0) {
        return new Tuplet(value0);
    };
    return Tuplet;
})();
var DoubleFlat = (function () {
    function DoubleFlat() {

    };
    DoubleFlat.value = new DoubleFlat();
    return DoubleFlat;
})();
var Flat = (function () {
    function Flat() {

    };
    Flat.value = new Flat();
    return Flat;
})();
var Natural = (function () {
    function Natural() {

    };
    Natural.value = new Natural();
    return Natural;
})();
var Sharp = (function () {
    function Sharp() {

    };
    Sharp.value = new Sharp();
    return Sharp;
})();
var DoubleSharp = (function () {
    function DoubleSharp() {

    };
    DoubleSharp.value = new DoubleSharp();
    return DoubleSharp;
})();
var genericAccidental = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Music.DoubleFlat" && v.value1.length === 0)) {
        return new Data_Maybe.Just(DoubleFlat.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Music.Flat" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Flat.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Music.Natural" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Natural.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Music.Sharp" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Sharp.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Music.DoubleSharp" && v.value1.length === 0)) {
        return new Data_Maybe.Just(DoubleSharp.value);
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Music.Accidental", [ {
        sigConstructor: "Music.DoubleFlat", 
        sigValues: [  ]
    }, {
        sigConstructor: "Music.Flat", 
        sigValues: [  ]
    }, {
        sigConstructor: "Music.Natural", 
        sigValues: [  ]
    }, {
        sigConstructor: "Music.Sharp", 
        sigValues: [  ]
    }, {
        sigConstructor: "Music.DoubleSharp", 
        sigValues: [  ]
    } ]);
}, function (v) {
    if (v instanceof DoubleFlat) {
        return new Data_Generic.SProd("Music.DoubleFlat", [  ]);
    };
    if (v instanceof Flat) {
        return new Data_Generic.SProd("Music.Flat", [  ]);
    };
    if (v instanceof Natural) {
        return new Data_Generic.SProd("Music.Natural", [  ]);
    };
    if (v instanceof Sharp) {
        return new Data_Generic.SProd("Music.Sharp", [  ]);
    };
    if (v instanceof DoubleSharp) {
        return new Data_Generic.SProd("Music.DoubleSharp", [  ]);
    };
    throw new Error("Failed pattern match at Music line 41, column 1 - line 42, column 1: " + [ v.constructor.name ]);
});
var showAccidental = new Prelude.Show(Data_Generic.gShow(genericAccidental));
var eqAccidental = new Prelude.Eq(Data_Generic.gEq(genericAccidental));
var cSharp = {
    pitch: C.value, 
    accidental: Sharp.value, 
    octave: 5, 
    duration: new Even(Whole.value)
};
module.exports = {
    Three: Three, 
    Five: Five, 
    Six: Six, 
    Seven: Seven, 
    SixtyFourth: SixtyFourth, 
    ThirtySecond: ThirtySecond, 
    Sixteenth: Sixteenth, 
    Eighth: Eighth, 
    Quarter: Quarter, 
    Half: Half, 
    Whole: Whole, 
    Even: Even, 
    Tuplet: Tuplet, 
    DoubleFlat: DoubleFlat, 
    Flat: Flat, 
    Natural: Natural, 
    Sharp: Sharp, 
    DoubleSharp: DoubleSharp, 
    C: C, 
    D: D, 
    E: E, 
    F: F, 
    G: G, 
    A: A, 
    B: B, 
    cSharp: cSharp, 
    genericAccidental: genericAccidental, 
    eqAccidental: eqAccidental, 
    showAccidental: showAccidental
};

},{"Data.Generic":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Generic/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Prelude

//- Functor --------------------------------------------------------------------

exports.arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

//- Bind -----------------------------------------------------------------------

exports.arrayBind = function (arr) {
  return function (f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

//- Monoid ---------------------------------------------------------------------

exports.concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

exports.concatArray = function (xs) {
  return function (ys) {
    return xs.concat(ys);
  };
};

//- Semiring -------------------------------------------------------------------

exports.intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

exports.intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

exports.numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

exports.numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};

//- ModuloSemiring -------------------------------------------------------------

exports.intDiv = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x / y | 0;
  };
};

exports.intMod = function (x) {
  return function (y) {
    return x % y;
  };
};

exports.numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};

//- Ring -----------------------------------------------------------------------

exports.intSub = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x - y | 0;
  };
};

exports.numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};

//- Eq -------------------------------------------------------------------------

exports.refEq = function (r1) {
  return function (r2) {
    return r1 === r2;
  };
};

exports.refIneq = function (r1) {
  return function (r2) {
    return r1 !== r2;
  };
};

exports.eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs.length !== ys.length) return false;
      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }
      return true;
    };
  };
};

exports.ordArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;
      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);
        if (o !== 0) {
          return o;
        }
        i++;
      }
      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};

//- Ord ------------------------------------------------------------------------

exports.unsafeCompareImpl = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x > y ? gt : eq;
        };
      };
    };
  };
};

//- Bounded --------------------------------------------------------------------

exports.topInt = 2147483647;
exports.bottomInt = -2147483648;

exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);

//- BooleanAlgebra -------------------------------------------------------------

exports.boolOr = function (b1) {
  return function (b2) {
    return b1 || b2;
  };
};

exports.boolAnd = function (b1) {
  return function (b2) {
    return b1 && b2;
  };
};

exports.boolNot = function (b) {
  return !b;
};

//- Show -----------------------------------------------------------------------

exports.showIntImpl = function (n) {
  return n.toString();
};

exports.showNumberImpl = function (n) {
  /* jshint bitwise: false */
  return n === (n | 0) ? n + ".0" : n.toString();
};

exports.showCharImpl = function (c) {
  var code = c.charCodeAt(0);
  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07": return "'\\a'";
      case "\b": return "'\\b'";
      case "\f": return "'\\f'";
      case "\n": return "'\\n'";
      case "\r": return "'\\r'";
      case "\t": return "'\\t'";
      case "\v": return "'\\v'";
    }
    return "'\\" + code.toString(10) + "'";
  }
  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

exports.showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(
    /[\0-\x1F\x7F"\\]/g,
    function (c, i) { // jshint ignore:line
      switch (c) {
        case "\"":
        case "\\":
          return "\\" + c;
        case "\x07": return "\\a";
        case "\b": return "\\b";
        case "\f": return "\\f";
        case "\n": return "\\n";
        case "\r": return "\\r";
        case "\t": return "\\t";
        case "\v": return "\\v";
      }
      var k = i + 1;
      var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
      return "\\" + c.charCodeAt(0).toString(10) + empty;
    }
  ) + "\"";
};

exports.showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];
    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }
    return "[" + ss.join(",") + "]";
  };
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Unit = function (x) {
    return x;
};
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();
var Semigroupoid = function (compose) {
    this.compose = compose;
};
var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};
var Functor = function (map) {
    this.map = map;
};
var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.apply = apply;
};
var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};
var Bind = function (__superclass_Prelude$dotApply_0, bind) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.bind = bind;
};
var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};
var Semigroup = function (append) {
    this.append = append;
};
var Semiring = function (add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
};
var Ring = function (__superclass_Prelude$dotSemiring_0, sub) {
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    this.sub = sub;
};
var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    this.div = div;
    this.mod = mod;
};
var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
    this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
    this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
};
var Num = function (__superclass_Prelude$dotDivisionRing_0) {
    this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
};
var Eq = function (eq) {
    this.eq = eq;
};
var Ord = function (__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};
var Bounded = function (bottom, top) {
    this.bottom = bottom;
    this.top = top;
};
var BoundedOrd = function (__superclass_Prelude$dotBounded_0, __superclass_Prelude$dotOrd_1) {
    this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
    this["__superclass_Prelude.Ord_1"] = __superclass_Prelude$dotOrd_1;
};
var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
    this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
    this.conj = conj;
    this.disj = disj;
    this.not = not;
};
var Show = function (show) {
    this.show = show;
};
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};
var zero = function (dict) {
    return dict.zero;
};
var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
var unit = {};
var top = function (dict) {
    return dict.top;
};
var sub = function (dict) {
    return dict.sub;
};
var $minus = function (dictRing) {
    return sub(dictRing);
};
var showUnit = new Show(function (v) {
    return "unit";
});
var showString = new Show($foreign.showStringImpl);
var showOrdering = new Show(function (v) {
    if (v instanceof LT) {
        return "LT";
    };
    if (v instanceof GT) {
        return "GT";
    };
    if (v instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match at Prelude line 864, column 3 - line 865, column 3: " + [ v.constructor.name ]);
});
var showNumber = new Show($foreign.showNumberImpl);
var showInt = new Show($foreign.showIntImpl);
var showChar = new Show($foreign.showCharImpl);
var showBoolean = new Show(function (v) {
    if (v) {
        return "true";
    };
    if (!v) {
        return "false";
    };
    throw new Error("Failed pattern match at Prelude line 842, column 3 - line 843, column 3: " + [ v.constructor.name ]);
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (dictShow) {
    return new Show($foreign.showArrayImpl(show(dictShow)));
};
var semiringUnit = new Semiring(function (v) {
    return function (v1) {
        return unit;
    };
}, function (v) {
    return function (v1) {
        return unit;
    };
}, unit, unit);
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
var semigroupoidFn = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (v) {
    return function (v1) {
        return unit;
    };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupOrdering = new Semigroup(function (v) {
    return function (v1) {
        if (v instanceof LT) {
            return LT.value;
        };
        if (v instanceof GT) {
            return GT.value;
        };
        if (v instanceof EQ) {
            return v1;
        };
        throw new Error("Failed pattern match at Prelude line 414, column 3 - line 415, column 3: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var semigroupArray = new Semigroup($foreign.concatArray);
var ringUnit = new Ring(function () {
    return semiringUnit;
}, function (v) {
    return function (v1) {
        return unit;
    };
});
var ringNumber = new Ring(function () {
    return semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function () {
    return semiringInt;
}, $foreign.intSub);
var pure = function (dict) {
    return dict.pure;
};
var $$return = function (dictApplicative) {
    return pure(dictApplicative);
};
var otherwise = true;
var one = function (dict) {
    return dict.one;
};
var not = function (dict) {
    return dict.not;
};
var negate = function (dictRing) {
    return function (a) {
        return $minus(dictRing)(zero(dictRing["__superclass_Prelude.Semiring_0"]()))(a);
    };
};
var mul = function (dict) {
    return dict.mul;
};
var $times = function (dictSemiring) {
    return mul(dictSemiring);
};
var moduloSemiringUnit = new ModuloSemiring(function () {
    return semiringUnit;
}, function (v) {
    return function (v1) {
        return unit;
    };
}, function (v) {
    return function (v1) {
        return unit;
    };
});
var moduloSemiringNumber = new ModuloSemiring(function () {
    return semiringNumber;
}, $foreign.numDiv, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var moduloSemiringInt = new ModuloSemiring(function () {
    return semiringInt;
}, $foreign.intDiv, $foreign.intMod);
var mod = function (dict) {
    return dict.mod;
};
var map = function (dict) {
    return dict.map;
};
var $less$dollar$greater = function (dictFunctor) {
    return map(dictFunctor);
};
var $less$hash$greater = function (dictFunctor) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(dictFunctor)(f)(fa);
        };
    };
};
var id = function (dict) {
    return dict.id;
};
var functorArray = new Functor($foreign.arrayMap);
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (v) {
    return function (v1) {
        return EQ.value;
    };
});
var eqString = new Eq($foreign.refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqOrdering = new Eq(function (v) {
    return function (v1) {
        if (v instanceof LT && v1 instanceof LT) {
            return true;
        };
        if (v instanceof GT && v1 instanceof GT) {
            return true;
        };
        if (v instanceof EQ && v1 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var ordOrdering = new Ord(function () {
    return eqOrdering;
}, function (v) {
    return function (v1) {
        if (v instanceof LT && v1 instanceof LT) {
            return EQ.value;
        };
        if (v instanceof EQ && v1 instanceof EQ) {
            return EQ.value;
        };
        if (v instanceof GT && v1 instanceof GT) {
            return EQ.value;
        };
        if (v instanceof LT) {
            return LT.value;
        };
        if (v instanceof EQ && v1 instanceof LT) {
            return GT.value;
        };
        if (v instanceof EQ && v1 instanceof GT) {
            return LT.value;
        };
        if (v instanceof GT) {
            return GT.value;
        };
        throw new Error("Failed pattern match at Prelude line 669, column 3 - line 670, column 3: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var eqNumber = new Eq($foreign.refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqInt = new Eq($foreign.refEq);
var ordInt = new Ord(function () {
    return eqInt;
}, unsafeCompare);
var eqChar = new Eq($foreign.refEq);
var ordChar = new Ord(function () {
    return eqChar;
}, unsafeCompare);
var eqBoolean = new Eq($foreign.refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, unsafeCompare);
var eq = function (dict) {
    return dict.eq;
};
var $eq$eq = function (dictEq) {
    return eq(dictEq);
};
var eqArray = function (dictEq) {
    return new Eq($foreign.eqArrayImpl($eq$eq(dictEq)));
};
var divisionRingUnit = new DivisionRing(function () {
    return moduloSemiringUnit;
}, function () {
    return ringUnit;
});
var numUnit = new Num(function () {
    return divisionRingUnit;
});
var divisionRingNumber = new DivisionRing(function () {
    return moduloSemiringNumber;
}, function () {
    return ringNumber;
});
var numNumber = new Num(function () {
    return divisionRingNumber;
});
var div = function (dict) {
    return dict.div;
};
var $div = function (dictModuloSemiring) {
    return div(dictModuloSemiring);
};
var disj = function (dict) {
    return dict.disj;
};
var $bar$bar = function (dictBooleanAlgebra) {
    return disj(dictBooleanAlgebra);
};
var $$const = function (a) {
    return function (v) {
        return a;
    };
};
var $$void = function (dictFunctor) {
    return function (fa) {
        return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
    };
};
var conj = function (dict) {
    return dict.conj;
};
var $amp$amp = function (dictBooleanAlgebra) {
    return conj(dictBooleanAlgebra);
};
var compose = function (dict) {
    return dict.compose;
};
var functorFn = new Functor(compose(semigroupoidFn));
var $less$less$less = function (dictSemigroupoid) {
    return compose(dictSemigroupoid);
};
var $greater$greater$greater = function (dictSemigroupoid) {
    return flip(compose(dictSemigroupoid));
};
var compare = function (dict) {
    return dict.compare;
};
var ordArray = function (dictOrd) {
    return new Ord(function () {
        return eqArray(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (xs) {
        return function (ys) {
            return $dollar(compare(ordInt)(0))($foreign.ordArrayImpl(function (x) {
                return function (y) {
                    var $79 = compare(dictOrd)(x)(y);
                    if ($79 instanceof EQ) {
                        return 0;
                    };
                    if ($79 instanceof LT) {
                        return 1;
                    };
                    if ($79 instanceof GT) {
                        return negate(ringInt)(1);
                    };
                    throw new Error("Failed pattern match at Prelude line 661, column 53 - line 664, column 57: " + [ $79.constructor.name ]);
                };
            })(xs)(ys));
        };
    });
};
var $less = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var $80 = compare(dictOrd)(a1)(a2);
            if ($80 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};
var $less$eq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var $81 = compare(dictOrd)(a1)(a2);
            if ($81 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};
var $greater = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var $82 = compare(dictOrd)(a1)(a2);
            if ($82 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};
var $greater$eq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var $83 = compare(dictOrd)(a1)(a2);
            if ($83 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryFn = new Category(function () {
    return semigroupoidFn;
}, function (x) {
    return x;
});
var boundedUnit = new Bounded(unit, unit);
var boundedOrdering = new Bounded(LT.value, GT.value);
var boundedOrdUnit = new BoundedOrd(function () {
    return boundedUnit;
}, function () {
    return ordUnit;
});
var boundedOrdOrdering = new BoundedOrd(function () {
    return boundedOrdering;
}, function () {
    return ordOrdering;
});
var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
var boundedOrdInt = new BoundedOrd(function () {
    return boundedInt;
}, function () {
    return ordInt;
});
var boundedChar = new Bounded($foreign.bottomChar, $foreign.topChar);
var boundedOrdChar = new BoundedOrd(function () {
    return boundedChar;
}, function () {
    return ordChar;
});
var boundedBoolean = new Bounded(false, true);
var boundedOrdBoolean = new BoundedOrd(function () {
    return boundedBoolean;
}, function () {
    return ordBoolean;
});
var bottom = function (dict) {
    return dict.bottom;
};
var boundedFn = function (dictBounded) {
    return new Bounded(function (v) {
        return bottom(dictBounded);
    }, function (v) {
        return top(dictBounded);
    });
};
var booleanAlgebraUnit = new BooleanAlgebra(function () {
    return boundedUnit;
}, function (v) {
    return function (v1) {
        return unit;
    };
}, function (v) {
    return function (v1) {
        return unit;
    };
}, function (v) {
    return unit;
});
var booleanAlgebraFn = function (dictBooleanAlgebra) {
    return new BooleanAlgebra(function () {
        return boundedFn(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
    }, function (fx) {
        return function (fy) {
            return function (a) {
                return conj(dictBooleanAlgebra)(fx(a))(fy(a));
            };
        };
    }, function (fx) {
        return function (fy) {
            return function (a) {
                return disj(dictBooleanAlgebra)(fx(a))(fy(a));
            };
        };
    }, function (fx) {
        return function (a) {
            return not(dictBooleanAlgebra)(fx(a));
        };
    });
};
var booleanAlgebraBoolean = new BooleanAlgebra(function () {
    return boundedBoolean;
}, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
var $div$eq = function (dictEq) {
    return function (x) {
        return function (y) {
            return not(booleanAlgebraBoolean)($eq$eq(dictEq)(x)(y));
        };
    };
};
var bind = function (dict) {
    return dict.bind;
};
var liftM1 = function (dictMonad) {
    return function (f) {
        return function (a) {
            return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v) {
                return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(f(v));
            });
        };
    };
};
var $greater$greater$eq = function (dictBind) {
    return bind(dictBind);
};
var asTypeOf = function (x) {
    return function (v) {
        return x;
    };
};
var applyFn = new Apply(function () {
    return functorFn;
}, function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
});
var bindFn = new Bind(function () {
    return applyFn;
}, function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
});
var apply = function (dict) {
    return dict.apply;
};
var $less$times$greater = function (dictApply) {
    return apply(dictApply);
};
var liftA1 = function (dictApplicative) {
    return function (f) {
        return function (a) {
            return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function () {
    return applyFn;
}, $$const);
var monadFn = new Monad(function () {
    return applicativeFn;
}, function () {
    return bindFn;
});
var append = function (dict) {
    return dict.append;
};
var $plus$plus = function (dictSemigroup) {
    return append(dictSemigroup);
};
var $less$greater = function (dictSemigroup) {
    return append(dictSemigroup);
};
var semigroupFn = function (dictSemigroup) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(dictSemigroup)(f(x))(g(x));
            };
        };
    });
};
var ap = function (dictMonad) {
    return function (f) {
        return function (a) {
            return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                    return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                });
            });
        };
    };
};
var monadArray = new Monad(function () {
    return applicativeArray;
}, function () {
    return bindArray;
});
var bindArray = new Bind(function () {
    return applyArray;
}, $foreign.arrayBind);
var applyArray = new Apply(function () {
    return functorArray;
}, ap(monadArray));
var applicativeArray = new Applicative(function () {
    return applyArray;
}, function (x) {
    return [ x ];
});
var add = function (dict) {
    return dict.add;
};
var $plus = function (dictSemiring) {
    return add(dictSemiring);
};
module.exports = {
    LT: LT, 
    GT: GT, 
    EQ: EQ, 
    Show: Show, 
    BooleanAlgebra: BooleanAlgebra, 
    BoundedOrd: BoundedOrd, 
    Bounded: Bounded, 
    Ord: Ord, 
    Eq: Eq, 
    DivisionRing: DivisionRing, 
    Num: Num, 
    Ring: Ring, 
    ModuloSemiring: ModuloSemiring, 
    Semiring: Semiring, 
    Semigroup: Semigroup, 
    Monad: Monad, 
    Bind: Bind, 
    Applicative: Applicative, 
    Apply: Apply, 
    Functor: Functor, 
    Category: Category, 
    Semigroupoid: Semigroupoid, 
    show: show, 
    "||": $bar$bar, 
    "&&": $amp$amp, 
    not: not, 
    disj: disj, 
    conj: conj, 
    bottom: bottom, 
    top: top, 
    unsafeCompare: unsafeCompare, 
    ">=": $greater$eq, 
    "<=": $less$eq, 
    ">": $greater, 
    "<": $less, 
    compare: compare, 
    "/=": $div$eq, 
    "==": $eq$eq, 
    eq: eq, 
    "-": $minus, 
    negate: negate, 
    sub: sub, 
    "/": $div, 
    mod: mod, 
    div: div, 
    "*": $times, 
    "+": $plus, 
    one: one, 
    mul: mul, 
    zero: zero, 
    add: add, 
    "++": $plus$plus, 
    "<>": $less$greater, 
    append: append, 
    ap: ap, 
    liftM1: liftM1, 
    "return": $$return, 
    ">>=": $greater$greater$eq, 
    bind: bind, 
    liftA1: liftA1, 
    pure: pure, 
    "<*>": $less$times$greater, 
    apply: apply, 
    "void": $$void, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    map: map, 
    id: id, 
    ">>>": $greater$greater$greater, 
    "<<<": $less$less$less, 
    compose: compose, 
    otherwise: otherwise, 
    asTypeOf: asTypeOf, 
    "const": $$const, 
    flip: flip, 
    "#": $hash, 
    "$": $dollar, 
    unit: unit, 
    semigroupoidFn: semigroupoidFn, 
    categoryFn: categoryFn, 
    functorFn: functorFn, 
    functorArray: functorArray, 
    applyFn: applyFn, 
    applyArray: applyArray, 
    applicativeFn: applicativeFn, 
    applicativeArray: applicativeArray, 
    bindFn: bindFn, 
    bindArray: bindArray, 
    monadFn: monadFn, 
    monadArray: monadArray, 
    semigroupString: semigroupString, 
    semigroupUnit: semigroupUnit, 
    semigroupFn: semigroupFn, 
    semigroupOrdering: semigroupOrdering, 
    semigroupArray: semigroupArray, 
    semiringInt: semiringInt, 
    semiringNumber: semiringNumber, 
    semiringUnit: semiringUnit, 
    ringInt: ringInt, 
    ringNumber: ringNumber, 
    ringUnit: ringUnit, 
    moduloSemiringInt: moduloSemiringInt, 
    moduloSemiringNumber: moduloSemiringNumber, 
    moduloSemiringUnit: moduloSemiringUnit, 
    divisionRingNumber: divisionRingNumber, 
    divisionRingUnit: divisionRingUnit, 
    numNumber: numNumber, 
    numUnit: numUnit, 
    eqBoolean: eqBoolean, 
    eqInt: eqInt, 
    eqNumber: eqNumber, 
    eqChar: eqChar, 
    eqString: eqString, 
    eqUnit: eqUnit, 
    eqArray: eqArray, 
    eqOrdering: eqOrdering, 
    ordBoolean: ordBoolean, 
    ordInt: ordInt, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordChar: ordChar, 
    ordUnit: ordUnit, 
    ordArray: ordArray, 
    ordOrdering: ordOrdering, 
    boundedBoolean: boundedBoolean, 
    boundedUnit: boundedUnit, 
    boundedOrdering: boundedOrdering, 
    boundedInt: boundedInt, 
    boundedChar: boundedChar, 
    boundedFn: boundedFn, 
    boundedOrdBoolean: boundedOrdBoolean, 
    boundedOrdUnit: boundedOrdUnit, 
    boundedOrdOrdering: boundedOrdOrdering, 
    boundedOrdInt: boundedOrdInt, 
    boundedOrdChar: boundedOrdChar, 
    booleanAlgebraBoolean: booleanAlgebraBoolean, 
    booleanAlgebraUnit: booleanAlgebraUnit, 
    booleanAlgebraFn: booleanAlgebraFn, 
    showBoolean: showBoolean, 
    showInt: showInt, 
    showNumber: showNumber, 
    showChar: showChar, 
    showString: showString, 
    showUnit: showUnit, 
    showArray: showArray, 
    showOrdering: showOrdering
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/foreign.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Quantizer/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var MidiPlayer = require("MidiPlayer");
var MidiJsTypes = require("MidiJsTypes");
var quantizeNote = function (__copy_ticksPerBeat) {
    return function (__copy_acc) {
        return function (__copy_event) {
            var ticksPerBeat = __copy_ticksPerBeat;
            var acc = __copy_acc;
            var event = __copy_event;
            tco: while (true) {
                if (event.deltaTime < (acc * ticksPerBeat) / 4.0) {
                    var $3 = {};
                    for (var $4 in event) {
                        if (event.hasOwnProperty($4)) {
                            $3[$4] = event[$4];
                        };
                    };
                    $3.deltaTime = acc * (ticksPerBeat / 4.0);
                    return $3;
                };
                if (event.deltaTime > (acc * ticksPerBeat) / 4.0 && event.deltaTime < acc * (ticksPerBeat / 4.0) + ticksPerBeat / 8.0) {
                    var $5 = {};
                    for (var $6 in event) {
                        if (event.hasOwnProperty($6)) {
                            $5[$6] = event[$6];
                        };
                    };
                    $5.deltaTime = acc * (ticksPerBeat / 4.0);
                    return $5;
                };
                if (event.deltaTime > (acc * ticksPerBeat) / 4.0 && event.deltaTime > acc * (ticksPerBeat / 4.0) + ticksPerBeat / 8.0) {
                    var __tco_ticksPerBeat = ticksPerBeat;
                    var __tco_acc = acc + 1.0;
                    var __tco_event = event;
                    ticksPerBeat = __tco_ticksPerBeat;
                    acc = __tco_acc;
                    event = __tco_event;
                    continue tco;
                };
                return event;
            };
        };
    };
};
module.exports = {
    quantizeNote: quantizeNote
};

},{"MidiJsTypes":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiJsTypes/index.js","MidiPlayer":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiPlayer/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/Type.Proxy/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Proxy3 = (function () {
    function Proxy3() {

    };
    Proxy3.value = new Proxy3();
    return Proxy3;
})();
var Proxy2 = (function () {
    function Proxy2() {

    };
    Proxy2.value = new Proxy2();
    return Proxy2;
})();
var $$Proxy = (function () {
    function Proxy() {

    };
    Proxy.value = new Proxy();
    return Proxy;
})();
module.exports = {
    Proxy3: Proxy3, 
    Proxy2: Proxy2, 
    "Proxy": $$Proxy
};

},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/VexFlow/foreign.js":[function(require,module,exports){

// module VexFlow

module.exports = {

    createCanvas: (function(div) {
    	return function(){
    	    return document.getElementById(div);
    	};
    }),

    createRenderer: (function(canvas) {
    	return function() {;
    	    var renderer = new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS);
    	    return renderer;
    	};
    }),

    createCtx: (function(renderer) {
    	return function() {
    	    return renderer.getContext();
    	};
    }),

    createStave: (function(x) {
    	return function(y) {
    	    return function(width) {
    		return function() {
    		    var stave = new Vex.Flow.Stave(x, y, width);
    		    return stave;
    		};
    	    };
	
    	};
    }),

    drawKeyStave: function(stave) {
    	return function(clef) {
    	    return function(ctx) {
    		return function() {
    		    stave.addClef(clef).setContext(ctx).draw();
    		};
    	    };
    	};
    },

    drawStave: function(stave) {
    	    return function(ctx) {
    		return function() {
		    stave.setContext(ctx).draw();
    		};
    	    };
    },

    createKeySignature: function(key) {
	return function (stave) {
	    return function() {
		return ((new Vex.Flow.KeySignature(key)).addToStave(stave));
	    };
	};
    },

    createTimeSignature: function(meter) {
	return function (stave) {
	    return function() {
		return stave.addTimeSignature(meter);
	    };
	};
    },

    logger: function(item) {
	return function() {
	    console.log(item);
	};
    },
    
    createNotes: function(voices) {
    	    return function() {
    		return voices.map(function(voice){
    		    return voice.map(function(note){
			if (note.duration.indexOf("d") > 0) {
			    return (new Vex.Flow.StaveNote({ keys: note.pitch, duration: note.duration})).addDotToAll();
			}
			else {
    			    return (new Vex.Flow.StaveNote({ keys: note.pitch, duration: note.duration}));
			}
			
    		    });
    		});
    	    };
    },

    addAccidentals: function(voices) {
    	return function(indexList) {
    	    return function() {
		 return indexList.map(function(e, i) {
		    return indexList[i].map(function(f, j) {;
    			function addAccidental (prev, curr){
    			    return prev.addAccidental(curr.value1, new Vex.Flow.Accidental(curr.value0));
			};
			return indexList[i][j].reduce(addAccidental, voices[i][j]);
		    });
		 });
    	    };	
	};
    },
    
    createNewVoice: function(numBeats) {
    	return function(beatValue) {
    	    return function() {
    		return (new Vex.Flow.Voice({
    		    num_beats: numBeats,
    		    beat_value: beatValue,
    		    resolution: Vex.Flow.RESOLUTION
    		}));
    	    };
    	};
    },

    addBeams: function(voices){
	return function(indices) {
	    return function() {
		return voices.map(function(voice){
		    return indices.map(function(index){
			if (index.length > 1) {
				var start = index[0];
				var end = index[index.length - 1] + 1;
				var group = voice.slice(start, end);
				var kip = new Vex.Flow.Beam(group);
				return kip;
			    };
		    });
		});
	    };
	};
    },

    addTies: function(voice){
	return function(indices){
	    return function() {
		return indices.map(function(index){
		    return new Vex.Flow.StaveTie({
			first_note: voice[0][index],
			last_note: voice[0][index+1],
			first_indices: [0],
			last_indices: [0]
		    });
		});
	    };
	};
    },    
    
    addNotesToVoice: function(notes) {
    	return function(voice) {
    		return function() {
    		    return notes.map(function(note) {
    			return voice().addTickables(note);
    		    });
    		};
    	};
    },

    formatter: function(voices) {
    	return function(pxRes) {
    	    return function() {
    		return new Vex.Flow.Formatter().joinVoices(voices).format(voices, pxRes);
    	    };
    	};
    },
	
    drawVoice: function(ctx) {
    	return function(stave) {
    	    return function(voices) {
    		return function() {
    		    voices.map(function(voice) {
    			return voice.draw(ctx,stave);
    			});
    		};
    	    };
    	};
    },

    drawTies: function(tiedVoice) {
	return function(ctx){
	    return function(){
		tiedVoice.map(function(voice){
		    return voice.setContext(ctx).draw();
		});
	    };
	};
    },

    drawBeams: function(voices) {
	return function(ctx){
	    return function(){
		console.log(voices);
		voices.map(function(voice){
		    voice.map(function(v) {
			if (v != undefined) {
			    v.setContext(ctx).draw();
			}
		    });
		});
	    };
	};
    }
};



},{}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/VexFlow/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Music = require("Music");
var VexMusic = require("VexMusic");
var Data_Tuple_1 = require("Data.Tuple");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple_1 = require("Data.Tuple");
var MidiPlayer = require("MidiPlayer");
var Data_List = require("Data.List");
var Data_Int = require("Data.Int");
var Data_Array = require("Data.Array");
var Data_Foldable = require("Data.Foldable");
var Data_List_Lazy = require("Data.List.Lazy");
var Data_Unfoldable = require("Data.Unfoldable");
var renderVoice = function (num) {
    return function (bar) {
        return function (accidentals) {
            return function (indexedTies) {
                return function (indexedBeams) {
                    return function (context) {
                        return function (stave) {
                            return function __do() {
                                var v = $foreign.createNotes(bar)();
                                var v1 = $foreign.addAccidentals(v)(accidentals)();
                                var v2 = $foreign.addTies(v1)(indexedTies)();
                                var v3 = $foreign.addBeams(v1)(indexedBeams)();
                                var v4 = $foreign.addNotesToVoice(v1)($foreign.createNewVoice(num)(4.0))();
                                $foreign.formatter(v4)(260.0)();
                                $foreign.drawVoice(context)(stave)(v4)();
                                $foreign.drawTies(v2)(context)();
                                return $foreign.drawBeams(v3)(context)();
                            };
                        };
                    };
                };
            };
        };
    };
};
var renderStaff = function (renderer) {
    return function (w) {
        return function (i) {
            return function (voice) {
                return function __do() {
                    var v = $foreign.createCtx(renderer)();
                    var foo = i - i % 4;
                    var v1 = $foreign.createStave(80 + ((i % 4) * 280 | 0) | 0)(0 + (50 * foo | 0) | 0)(w)();
                    $foreign.drawStave(v1)(v)();
                    return voice(v)(v1)();
                };
            };
        };
    };
};
var mapWithIndex = function (f) {
    return function (lst) {
        var go = function (__copy_v) {
            return function (__copy_v1) {
                return function (__copy_acc) {
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    var acc = __copy_acc;
                    tco: while (true) {
                        if (v1 instanceof Data_List.Nil) {
                            return acc;
                        };
                        if (v1 instanceof Data_List.Cons) {
                            var __tco_v = v + 1 | 0;
                            var __tco_v1 = v1.value1;
                            var __tco_acc = new Data_List.Cons(f(v1.value0)(v), acc);
                            v = __tco_v;
                            v1 = __tco_v1;
                            acc = __tco_acc;
                            continue tco;
                        };
                        throw new Error("Failed pattern match at VexFlow line 113, column 1 - line 118, column 1: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                    };
                };
            };
        };
        return Data_List.reverse(go(0)(lst)(Data_List.Nil.value));
    };
};
var fromJust = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    throw new Error("Failed pattern match at VexFlow line 110, column 1 - line 112, column 1: " + [ v.constructor.name ]);
};
var drawPrimaryStave = function (renderer) {
    return function (clef) {
        return function (key) {
            return function (num) {
                return function __do() {
                    var v = $foreign.createCtx(renderer)();
                    var v1 = $foreign.createStave(1)(1)(80.0)();
                    $foreign.createKeySignature(key)(v1)();
                    $foreign.createTimeSignature(Prelude.show(Prelude.showInt)(num) + "/4")(v1)();
                    return $foreign.drawKeyStave(v1)(clef)(v)();
                };
            };
        };
    };
};
var addIndexToArray = function (arr) {
    return Data_List_Lazy.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_List_Lazy.zip(Data_List_Lazy.iterate(function (v) {
        return v + 1 | 0;
    })(0))(Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)(arr)));
};
var drawNotation = function (num) {
    return function (music) {
        return function (accidentals) {
            return function (renderer) {
                return function (indexedTies) {
                    return function (indexedBeams) {
                        var voices = Data_Array.zipWith(renderVoice(num))(music)(accidentals);
                        var stave = renderStaff(renderer)(280.0);
                        var indexedVoices = addIndexToArray(voices);
                        return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(function (v) {
                            return stave(v.value0)(v.value1(fromJust(Data_Array.index(indexedTies)(v.value0)))(fromJust(Data_Array.index(indexedBeams)(v.value0))));
                        })(indexedVoices);
                    };
                };
            };
        };
    };
};
var renderNotation = function (canvas) {
    return function (notes) {
        return function (vexNotes) {
            return function (indexedTies) {
                return function (indexedBeams) {
                    return function (num) {
                        return function (foo) {
                            return function __do() {
                                var v = $foreign.createRenderer(canvas)();
                                drawPrimaryStave(v)("treble")("G")(num)();
                                drawNotation(num)(notes)(VexMusic.musicWithIndexedAccidentals(vexNotes))(v)(indexedTies)(indexedBeams)();
                                MidiPlayer.logger("MAUW")();
                                return MidiPlayer.logger(foo)();
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    addIndexToArray: addIndexToArray, 
    mapWithIndex: mapWithIndex, 
    fromJust: fromJust, 
    drawPrimaryStave: drawPrimaryStave, 
    renderStaff: renderStaff, 
    renderVoice: renderVoice, 
    drawNotation: drawNotation, 
    renderNotation: renderNotation, 
    drawTies: $foreign.drawTies, 
    drawBeams: $foreign.drawBeams, 
    addNotesToVoice: $foreign.addNotesToVoice, 
    addBeams: $foreign.addBeams, 
    addTies: $foreign.addTies, 
    createTimeSignature: $foreign.createTimeSignature, 
    createKeySignature: $foreign.createKeySignature, 
    drawStave: $foreign.drawStave, 
    addAccidentals: $foreign.addAccidentals, 
    createNewVoice: $foreign.createNewVoice, 
    formatter: $foreign.formatter, 
    drawVoice: $foreign.drawVoice, 
    drawKeyStave: $foreign.drawKeyStave, 
    createStave: $foreign.createStave, 
    createNotes: $foreign.createNotes, 
    createCtx: $foreign.createCtx, 
    createRenderer: $foreign.createRenderer, 
    createCanvas: $foreign.createCanvas
};

},{"./foreign":"/Users/Alko/Coding/purescript/purescript-vexflow/output/VexFlow/foreign.js","Control.Monad.Eff":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff/index.js","Control.Monad.Eff.Console":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Control.Monad.Eff.Console/index.js","Data.Array":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array/index.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.Int":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Int/index.js","Data.List":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.List/index.js","Data.List.Lazy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.List.Lazy/index.js","Data.Maybe":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Maybe/index.js","Data.Tuple":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Tuple/index.js","Data.Unfoldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Unfoldable/index.js","MidiPlayer":"/Users/Alko/Coding/purescript/purescript-vexflow/output/MidiPlayer/index.js","Music":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Music/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js","VexMusic":"/Users/Alko/Coding/purescript/purescript-vexflow/output/VexMusic/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/VexMusic/index.js":[function(require,module,exports){
// Generated by psc version 0.8.2.0
"use strict";
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Data_Array = require("Data.Array");
var Music = require("Music");
var Data_List_Lazy = require("Data.List.Lazy");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_Foldable = require("Data.Foldable");
var pitchToString = function (v) {
    if (v instanceof Music.C) {
        return "c";
    };
    if (v instanceof Music.D) {
        return "d";
    };
    if (v instanceof Music.E) {
        return "e";
    };
    if (v instanceof Music.F) {
        return "f";
    };
    if (v instanceof Music.G) {
        return "g";
    };
    if (v instanceof Music.A) {
        return "a";
    };
    if (v instanceof Music.B) {
        return "b";
    };
    throw new Error("Failed pattern match at VexMusic line 46, column 1 - line 47, column 1: " + [ v.constructor.name ]);
};
var midiNoteToPartialVexFlowNote = function (v) {
    if (v === 0) {
        return new Data_Tuple.Tuple(Music.C.value, Music.Natural.value);
    };
    if (v === 1) {
        return new Data_Tuple.Tuple(Music.C.value, Music.Sharp.value);
    };
    if (v === 2) {
        return new Data_Tuple.Tuple(Music.D.value, Music.Natural.value);
    };
    if (v === 3) {
        return new Data_Tuple.Tuple(Music.D.value, Music.Sharp.value);
    };
    if (v === 4) {
        return new Data_Tuple.Tuple(Music.E.value, Music.Natural.value);
    };
    if (v === 5) {
        return new Data_Tuple.Tuple(Music.F.value, Music.Natural.value);
    };
    if (v === 6) {
        return new Data_Tuple.Tuple(Music.F.value, Music.Sharp.value);
    };
    if (v === 7) {
        return new Data_Tuple.Tuple(Music.G.value, Music.Natural.value);
    };
    if (v === 8) {
        return new Data_Tuple.Tuple(Music.G.value, Music.Sharp.value);
    };
    if (v === 9) {
        return new Data_Tuple.Tuple(Music.A.value, Music.Natural.value);
    };
    if (v === 10) {
        return new Data_Tuple.Tuple(Music.A.value, Music.Sharp.value);
    };
    if (v === 11) {
        return new Data_Tuple.Tuple(Music.B.value, Music.Natural.value);
    };
    throw new Error("Failed pattern match at VexMusic line 96, column 1 - line 97, column 1: " + [ v.constructor.name ]);
};
var midiNoteToOctave = function (n) {
    return (n - n % 12) / 12 | 0;
};
var isNatural = function (v) {
    return Prelude["/="](Music.eqAccidental)(v.value0)(Music.Natural.value);
};
var filterAccidentals = Data_Array.filter(isNatural);
var extractAccidentals = function ($34) {
    return Prelude.map(Prelude.functorArray)(function (v) {
        return v.accidental;
    })((function (v) {
        return v.note;
    })($34));
};
var durationToInt = function (v) {
    if (v instanceof Music.Even && v.value0 instanceof Music.SixtyFourth) {
        return 64;
    };
    if (v instanceof Music.Even && v.value0 instanceof Music.ThirtySecond) {
        return 32;
    };
    if (v instanceof Music.Even && v.value0 instanceof Music.Sixteenth) {
        return 16;
    };
    if (v instanceof Music.Even && v.value0 instanceof Music.Eighth) {
        return 8;
    };
    if (v instanceof Music.Even && v.value0 instanceof Music.Quarter) {
        return 4;
    };
    if (v instanceof Music.Even && v.value0 instanceof Music.Half) {
        return 2;
    };
    if (v instanceof Music.Even && v.value0 instanceof Music.Whole) {
        return 1;
    };
    if (v instanceof Music.Tuplet && v.value0 instanceof Music.Three) {
        return 3;
    };
    if (v instanceof Music.Tuplet && v.value0 instanceof Music.Five) {
        return 5;
    };
    if (v instanceof Music.Tuplet && v.value0 instanceof Music.Six) {
        return 6;
    };
    if (v instanceof Music.Tuplet && v.value0 instanceof Music.Seven) {
        return 7;
    };
    throw new Error("Failed pattern match at VexMusic line 62, column 1 - line 63, column 1: " + [ v.constructor.name ]);
};
var noteToVexNote = function (note$prime) {
    return {
        note: [ {
            pitch: note$prime.pitch, 
            accidental: note$prime.accidental, 
            octave: note$prime.octave
        } ], 
        duration: Prelude.show(Prelude.showInt)(durationToInt(note$prime.duration))
    };
};
var deltaTimeToVexFlowDuration = function (ticksPerBeat) {
    return function (deltaTime) {
        if (deltaTime === ticksPerBeat / 4.0) {
            return Prelude.show(Prelude.showInt)(16);
        };
        if (deltaTime === (ticksPerBeat / 2.0) * 1.5) {
            return Prelude.show(Prelude.showInt)(8) + "d";
        };
        if (deltaTime === ticksPerBeat / 2.0) {
            return Prelude.show(Prelude.showInt)(8);
        };
        if (deltaTime === ticksPerBeat) {
            return Prelude.show(Prelude.showInt)(4);
        };
        if (deltaTime === ticksPerBeat * 1.5) {
            return Prelude.show(Prelude.showInt)(4) + "d";
        };
        if (deltaTime === ticksPerBeat * 2.0) {
            return Prelude.show(Prelude.showInt)(2);
        };
        if (deltaTime === ticksPerBeat * 3.0) {
            return Prelude.show(Prelude.showInt)(1);
        };
        if (deltaTime === ticksPerBeat * 4.0) {
            return Prelude.show(Prelude.showInt)(1);
        };
        throw new Error("Failed pattern match at VexMusic line 86, column 1 - line 87, column 1: " + [ ticksPerBeat.constructor.name, deltaTime.constructor.name ]);
    };
};
var deltaTimeToVexDuration = function (ticksPerBeat) {
    return function (deltaTime) {
        if (deltaTime === ticksPerBeat / 4.0) {
            return 16;
        };
        if (deltaTime === ticksPerBeat / 2.0) {
            return 8;
        };
        if (deltaTime === ticksPerBeat) {
            return 4;
        };
        if (deltaTime === ticksPerBeat * 2.0) {
            return 2;
        };
        if (deltaTime === ticksPerBeat * 3.0) {
            return 1;
        };
        if (deltaTime === ticksPerBeat * 4.0) {
            return 1;
        };
        throw new Error("Failed pattern match at VexMusic line 78, column 1 - line 79, column 1: " + [ ticksPerBeat.constructor.name, deltaTime.constructor.name ]);
    };
};
var addIndexToAccidentals = function (arr) {
    return Data_List_Lazy.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_List_Lazy.zip(Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)(arr))(Data_List_Lazy.iterate(function (v) {
        return v + 1 | 0;
    })(0)));
};
var accidentalToString = function (v) {
    if (v instanceof Music.DoubleFlat) {
        return "bb";
    };
    if (v instanceof Music.Flat) {
        return "b";
    };
    if (v instanceof Music.Natural) {
        return "";
    };
    if (v instanceof Music.Sharp) {
        return "#";
    };
    if (v instanceof Music.DoubleSharp) {
        return "##";
    };
    throw new Error("Failed pattern match at VexMusic line 55, column 1 - line 56, column 1: " + [ v.constructor.name ]);
};
var accidentalToVexFlowAccidental = function (v) {
    return new Data_Tuple.Tuple(accidentalToString(v.value0), v.value1);
};
var vexnoteToIndexedAccidentals = function (vexFlowNote) {
    var accidentals = extractAccidentals(vexFlowNote);
    var indexedAccidentals = addIndexToAccidentals(accidentals);
    var filteredAccidentals = filterAccidentals(indexedAccidentals);
    return Prelude.map(Prelude.functorArray)(accidentalToVexFlowAccidental)(filteredAccidentals);
};
var vexVoiceToIndexedAccidentals = Prelude.map(Prelude.functorArray)(vexnoteToIndexedAccidentals);
var vexBarToIndexedAccidentals = Prelude.map(Prelude.functorArray)(vexVoiceToIndexedAccidentals);
var musicWithIndexedAccidentals = Prelude.map(Prelude.functorArray)(vexBarToIndexedAccidentals);
var vexNoteToVexFlowPitch = function (vexTone) {
    return pitchToString(vexTone.pitch) + (accidentalToString(vexTone.accidental) + ("/" + Prelude.show(Prelude.showInt)(vexTone.octave)));
};
var vexNoteToVexFlowNote = function (vexNote) {
    return {
        pitch: Prelude.map(Prelude.functorArray)(vexNoteToVexFlowPitch)(vexNote.note), 
        duration: vexNote.duration
    };
};
var noteToVexFlowNote = function (note) {
    var vexNote = noteToVexNote(note);
    return vexNoteToVexFlowNote(vexNote);
};
var vexNoteToVexFlowVoice = Prelude.map(Prelude.functorArray)(vexNoteToVexFlowNote);
var vexNoteToVexFlowBar = Prelude.map(Prelude.functorArray)(vexNoteToVexFlowVoice);
module.exports = {
    musicWithIndexedAccidentals: musicWithIndexedAccidentals, 
    vexBarToIndexedAccidentals: vexBarToIndexedAccidentals, 
    vexVoiceToIndexedAccidentals: vexVoiceToIndexedAccidentals, 
    vexnoteToIndexedAccidentals: vexnoteToIndexedAccidentals, 
    accidentalToVexFlowAccidental: accidentalToVexFlowAccidental, 
    filterAccidentals: filterAccidentals, 
    isNatural: isNatural, 
    addIndexToAccidentals: addIndexToAccidentals, 
    extractAccidentals: extractAccidentals, 
    vexNoteToVexFlowBar: vexNoteToVexFlowBar, 
    vexNoteToVexFlowVoice: vexNoteToVexFlowVoice, 
    vexNoteToVexFlowNote: vexNoteToVexFlowNote, 
    vexNoteToVexFlowPitch: vexNoteToVexFlowPitch, 
    noteToVexFlowNote: noteToVexFlowNote, 
    noteToVexNote: noteToVexNote, 
    midiNoteToPartialVexFlowNote: midiNoteToPartialVexFlowNote, 
    deltaTimeToVexFlowDuration: deltaTimeToVexFlowDuration, 
    deltaTimeToVexDuration: deltaTimeToVexDuration, 
    midiNoteToOctave: midiNoteToOctave, 
    durationToInt: durationToInt, 
    accidentalToString: accidentalToString, 
    pitchToString: pitchToString
};

},{"Data.Array":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Array/index.js","Data.Foldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Foldable/index.js","Data.List.Lazy":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.List.Lazy/index.js","Data.Tuple":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Tuple/index.js","Data.Unfoldable":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Data.Unfoldable/index.js","Music":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Music/index.js","Prelude":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Prelude/index.js"}],"/Users/Alko/Coding/purescript/purescript-vexflow/output/browserify.js":[function(require,module,exports){
require('Main').main();

},{"Main":"/Users/Alko/Coding/purescript/purescript-vexflow/output/Main/index.js"}]},{},["/Users/Alko/Coding/purescript/purescript-vexflow/output/browserify.js"]);
